<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InformedProteomics.Backend</name>
    </assembly>
    <members>
        <member name="T:InformedProteomics.Backend.Database.DatabaseSearchMode">
            <summary>
            Available database search modes
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.DatabaseSearchMode.Target">
            <summary>
            Target search only
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.DatabaseSearchMode.Decoy">
            <summary>
            Decoy search only
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.DatabaseSearchMode.Both">
            <summary>
            Target and Decoy search
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.InternalCleavageType.MultipleInternalCleavages">
            <summary>
            Any sequence in a protein that matches the parameters for N and C terminus cleavages
            </summary>
            <remarks>All cleavage combinations that meet the parameters for N and C terminus cleavage maximums will be checked.
            NOTE: Any sequence minLength &lt;= length &lt;= maxLength</remarks>
        </member>
        <member name="F:InformedProteomics.Backend.Database.InternalCleavageType.SingleInternalCleavage">
            <summary>
            Only sequences that match either the N terminus cleavages parameter or the C terminus cleavages parameter
            </summary>
            <remarks>If the C terminus has no cleavage, the N terminus can have cleavages up to the specified N terminus cleavages max;
            if the N terminus has no cleavages, the C terminus can have cleavages up to the specified C terminus cleavages max.
            NOTE: Any sequence minLength &lt;= length &lt;= maxLength, with C or N terminus cleavages</remarks>
        </member>
        <member name="F:InformedProteomics.Backend.Database.InternalCleavageType.NoInternalCleavage">
            <summary>
            Only intact proteins
            </summary>
            <remarks>No cleavages will be performed on the protein sequences
            NOTE: Allows C-term cleavages up to the specified maximum</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Database.ProteinHashInfo.ObservationCount">
            <summary>
            Number of times this protein name has been encountered in the source FASTA file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Database.ProteinHashInfo.SequenceLength">
            <summary>
            Number of residues in the protein sequqence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Database.ProteinHashInfo.SequenceHash">
            <summary>
            SHA-1 Hash of the protein sequence
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.ProteinHashInfo.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.ProteinHashInfo.Sha1Hash(System.String)">
            <summary>
            Compute the SHA1 Hash of the given text
            </summary>
            <param name="text"></param>
            <returns>String representation of the SHA1 hash</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.SearchableDatabase.FindAllMatchedSequenceIndices(System.String)">
            <summary>
            Find all occurrences of pattern in the fasta sequence. Return all matched indices.
            </summary>
            <param name="patternStr">pattern to search</param>
            <returns>the matched sequence indices.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.SearchableDatabase.FindAllMatchedSequenceIndices(System.Byte[])">
            <summary>
            Find all occurrences of pattern in the fasta sequence. Return all matched indices.
            </summary>
            <param name="pattern">pattern to search</param>
            <returns>the matched sequence indices.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.SearchableDatabase.Search(System.String)">
            <summary>
            Suffix array based O(m) search, where m is the pattern length
            </summary>
            <param name="patternStr">pattern to search</param>
            <returns>the relative position in this suffix array.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.SearchableDatabase.Search(System.Byte[])">
            <summary>
            Suffix array based O(m) search, where m is the pattern length
            </summary>
            <param name="pattern">pattern to search</param>
            <returns>the relative position in this suffix array.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.SearchableDatabase.Compare(System.Collections.Generic.IList{System.Byte},System.Int32,System.Byte)">
            <summary>
            Compares two suffices (index1 and index2)
            </summary>
            <param name="index">suffix index</param>
            <param name="pattern">sequence to compare</param>
            <param name="startIndex">known common prefix</param>
            <returns>a positive number if 1 is larger,
            a negative if 1 is smaller and 0 if they are equal.
            The longest common prefix length can be retrieved by taking absolute value of the return value minus 1
            </returns>
        </member>
        <member name="T:InformedProteomics.Backend.Database.IndexedDatabase">
            <summary>
            Provide fast, indexed access to Fasta database information using Permuted Longest Common Prefix data
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.IndexedDatabase.PermutedLongestCommonPrefixFileExtension">
            <summary>
            File extension to use for Permuted Longest Common Prefix file
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.IndexedDatabase.Encoding">
            <summary>
            Encoding to use for writing and reading indexed database files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.IndexedDatabase.FastaDatabase">
            <summary>
            The Fasta database that will be indexed
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.IndexedDatabase.PLcp">
            <summary>
            Cached Permuted Longest Common Prefix data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.#ctor(InformedProteomics.Backend.Database.FastaDatabase)">
            <summary>
            Constructor - build the index
            </summary>
            <param name="fastaDatabase"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.Read">
            <summary>
            Read in the Permuted Longest Common Prefix file
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.AnnotationsAndOffsets(System.Int32,System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Biology.Enzyme)">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="numTolerableTermini"></param>
            <param name="numMissedCleavages"></param>
            <param name="enzyme"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.AnnotationsAndOffsetsParallel(System.Int32,System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Biology.Enzyme,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="numTolerableTermini"></param>
            <param name="numMissedCleavages"></param>
            <param name="enzyme"></param>
            <param name="threads"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.AnnotationsAndOffsetsNoEnzyme(System.Int32,System.Int32)">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.AnnotationsAndOffsetsNoEnzymeParallel(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="threads"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.IntactSequenceAnnotationsAndOffsets(System.Int32,System.Int32)">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.IntactSequenceAnnotationsAndOffsets(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="numCTermCleavages"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.IntactSequenceAnnotationsAndOffsetsWithCTermCleavagesLargerThan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="numCTermCleavages"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.SequenceAnnotationsAndOffsetsWithNtermOrCtermCleavageNoLargerThan(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the annotation and offset data from the database for all sequences that comply with the parameters
            </summary>
            <param name="minSequenceLength"></param>
            <param name="maxSequenceLength"></param>
            <param name="maxNumNTermCleavages"></param>
            <param name="maxNumCTermCleavages"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.GetLongestSequenceLength">
            <summary>
            Length of the longest sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.EstimateTotalPeptides(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Estimate the total number of peptides that will be used in processing - essential for reasonably accurate progress reporting
            </summary>
            <param name="mode"></param>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="numNTermCleavages"></param>
            <param name="numCTermCleavages"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.EstimateTotalPeptides(InformedProteomics.Backend.Database.InternalCleavageType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Estimate the total number of peptides that will be used in processing - essential for reasonably accurate progress reporting
            </summary>
            <param name="mode"></param>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <param name="numNTermCleavages"></param>
            <param name="numCTermCleavages"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.IndexedDatabase.GetLcp(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Get the longest common prefix for the supplied sequence
            </summary>
            <param name="sequence"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Database.SequenceAndOffset">
            <summary>
            Container for holding a sequence and its offset
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.SequenceAndOffset.#ctor(System.Byte[],System.Int64)">
            <summary>
            Constructor - set the data
            </summary>
            <param name="sequence"></param>
            <param name="offset"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Database.SequenceAndOffset.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Database.SequenceAndOffset.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Database.FastaDatabase">
            <summary>
            Facilitates working with a Fasta sequence database, using suffix arrays
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.FileFormatId">
            <summary>
            File format identifier to avoid incompatible backing files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.SeqFileExtension">
            <summary>
            Extension used for the Seq file
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.AnnotationFileExtension">
            <summary>
            Extension used for the Annotation file
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.DecoyDatabaseFileExtension">
            <summary>
            Extension used for the Decoy database file
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.ShuffleDecoyFileExtension">
            <summary>
            Extension used for the shuffled decoy database file
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.DecoyProteinPrefix">
            <summary>
            Prefix to flag decoy proteins
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.Delimiter">
            <summary>
            Sequence delimiter in the backing files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.LastCharacter">
            <summary>
            Last character marker in the backing files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.AnnotationDelimiter">
            <summary>
            Annotation delimiter in the backing files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.NumMutations">
            <summary>
            For shuffled decoys, number of mutations
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase.Encoding">
            <summary>
            Encoding used in the backing files
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Database.FastaDatabase.IsDecoy">
            <summary>
            True if this instance is tied to the decoy database
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="databaseFilePath"></param>
            <param name="isDecoy"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.Decoy(InformedProteomics.Backend.Data.Biology.Enzyme,System.Boolean)">
            <summary>
            Get the Decoy version of this database (create it if missing)
            </summary>
            <param name="enzyme"></param>
            <param name="shuffle"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.CreateDecoyDatabase(InformedProteomics.Backend.Data.Biology.Enzyme,System.Boolean)">
            <summary>
            Create the decoy version of this databse
            </summary>
            <param name="enzyme"></param>
            <param name="shuffle"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.Characters">
            <summary>
            Returns the characters in the sequence file
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.Read">
            <summary>
            Read in the backing files
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetFastaFilePath">
            <summary>
            Path to the Fasta file
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetNumEntries">
            <summary>
            Number of proteins in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinNames">
            <summary>
            Get the names of all proteins in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetSequence">
            <summary>
            Get the entire concatenated sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.PrintSequence">
            <summary>
            Print the entire sequence to console
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetDecoyDatabasePath(InformedProteomics.Backend.Data.Biology.Enzyme,System.Boolean)">
            <summary>
            Generate the path for the decoy database according to the supplied parameters
            </summary>
            <param name="enzyme"></param>
            <param name="shuffle"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinName(System.Int64)">
            <summary>
            Get the name of the protein that starts at <paramref name="offset"/> in the concatenated sequence
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinDescription(System.Int64)">
            <summary>
            Get the description of the protein that starts at <paramref name="offset"/> in the concatenated sequence
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetOffset(System.String)">
            <summary>
            Get the offset in the concatenated sequence of the protein with name <paramref name="name"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinDescription(System.String)">
            <summary>
            Get the description of the protein with name <paramref name="name"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinLength(System.String)">
            <summary>
            Get the length of the protein with name <paramref name="name"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinSequence(System.String)">
            <summary>
            Get the sequence of the protein with name <paramref name="name"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetProteinSequence(System.Int64,System.Int32)">
            <summary>
            Return the protein sequence starting at the given offset, spanning the given length
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetOneBasedPositionInProtein(System.Int64)">
            <summary>
            Get the position in the protein sequence of the offset in the concatenated sequence (one-based index)
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetZeroBasedPositionInProtein(System.Int64)">
            <summary>
            Get the position in the protein sequence of the offset in the concatenated sequence (zero-based index)
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.GetLastWriteTimeHash">
            <summary>
            Returns the hash based on last write time, used for consistency verification
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabase.CheckHashCodeBinaryFile(System.String,System.Int32)">
            <summary>
            For file <paramref name="filePath"/>, check the last write time hash against <paramref name="code"/>
            </summary>
            <param name="filePath"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabase._duplicateNameCounts">
            <summary>
            Tracks duplicate names along with a count for each name
            </summary>
            <remarks>Used to auto-rename proteins</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopeMz(System.Int32)">
            <summary>
            Gets the m/z of ith isotope
            </summary>
            <param name="isotopeIndex">isotope index. 0 means mono-isotope, 1 means 2nd isotope, etc.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetMostAbundantIsotopeMz">
            <summary>
            Gets the m/z of the most abundant isotope peak
            </summary>
            <returns>m/z of the most abundant isotope peak</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopeMz(System.Double)">
            <summary>
            Gets the m/z of ith isotope
            </summary>
            <param name="isotopeIndexInRealNumber">isotope index in real number. 0 means mono-isotope, 0.5 means the center of mono and 2nd isotopes.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopes(System.Double)">
            <summary>
            Gets theoretical isotope peaks whose intensities are relative to the most intense isotope
            </summary>
            <param name="relativeIntensityThreshold">relative isotope intensity threshold</param>
            <returns>Enumerable of isotope peaks</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopes(System.Int32)">
            <summary>
            Gets top n (numIsotopes) theoretical isotope peaks ordered by the ratios of isotopes (higher first)
            </summary>
            <param name="numIsotopes">number of isotopes</param>
            <returns>Enumerable of isotope peaks</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetIsotopeMass(System.Int32)">
            <summary>
            Gets the mass of ith isotope
            </summary>
            <param name="isotopeIndex">isotope index. 0 means mono-isotope, 1 means 2nd isotope, etc.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetIsotopeMass(System.Double)">
            <summary>
            Gets the m/z of ith isotope
            </summary>
            <param name="isotopeIndexInRealNumber">isotope index in real number. 0 means mono-isotope, 0.5 means the center of mono and 2nd isotopes.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.op_UnaryNegation(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Unary -
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.GetMonoIsotopicMass">
            <summary>
            Gets the mono-isotopic mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.GetNominalMass">
            <summary>
            Gets the mono-isotopic nominal mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetSequenceCompositions">
            <summary>
            Gets all possible compositions of the current sequence
            </summary>
            <returns>all possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetNumProteoforms">
            <summary>
            Gets number of possible proteoforms
            </summary>
            <returns>number of possible proteoforms</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.PutAminoAcid(System.Int32,System.Char,InformedProteomics.Backend.Data.Enum.SequenceLocation)">
            <summary>
            Add an amino acid residue to this generator.
            </summary>
            <param name="index">index to add the amino acid. 0 is C-term. 1 is the C-term amino acid.</param>
            <param name="residue">amino acid residue to add.</param>
            <param name="loc">location of the residue</param>
            <returns>true if residue is a valid amino acid; false otherwise.</returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModificationCombination">
            <summary>
            Combination of modifications applied to an amino acid sequence
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModificationParams">
            <summary>
            This class catalogues all possible combinations of modifications
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.#ctor">
            <summary>
            No modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.#ctor(InformedProteomics.Backend.Data.Sequence.Modification[],System.Int32)">
            <summary>
            Storing all possible combinations of modifications up to MaxNumDynModsPerSequence
            </summary>
            <param name="modifications">array of modifications</param>
            <param name="maxNumDynModsPerSequence">number of maximum modifications</param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationParams.NumModificationCombinations">
            <summary>
            Gets the number of all possible modification instances
            </summary>
            <returns>the number of modification instances</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.GetModificationCombination(System.Int32)">
            <summary>
            Gets the modificatino combination with the specified modCombIndex
            </summary>
            <param name="modCombIndex">modification combination modCombIndex</param>
            <returns>modification combination</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.CreateGraph(InformedProteomics.Backend.Data.Sequence.AminoAcidSet,System.String)">
            <summary>
            Create a graph representing the annotation. Annotation is reversed.
            </summary>
            <param name="aaSet">amino acid set</param>
            <param name="annotation">annotation (e.g. G.PEPTIDER.K or _.PEPTIDER._)</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.CreateGraph(InformedProteomics.Backend.Data.Sequence.AminoAcidSet,InformedProteomics.Backend.Data.Sequence.AminoAcid,System.String,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Create a graph representing the sequence. Sequence is reversed.
            </summary>
            <param name="aaSet">amino acid set</param>
            <param name="nTerm">N-term amino acid</param>
            <param name="sequence">sequence</param>
            <param name="cTerm">C-term amino acid</param>
            <returns>sequence graph</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoformCompositions">
            <summary>
            Gets the number of possible compositions of the current sequence
            </summary>
            <returns>the number of possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumDistinctSequenceCompositions">
            <summary>
            Gets the number of distinct compositions of the current sequence
            </summary>
            <returns>the number of possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetSequenceCompositions">
            <summary>
            Gets all possible compositions of the current sequence
            </summary>
            <returns>all possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoforms">
            <summary>
            Gets number of possible proteoforms
            </summary>
            <returns>number of possible proteoforms</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoformSequences(System.Int32)">
            <summary>
            Get number of possible proteoform sequences for the speicified modification combination
            </summary>
            <param name="modIndex">index of modification combination</param>
            <returns>number of sequences</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetUnmodifiedSequenceComposition">
            <summary>
            Gets the composition of the sequence without variable modification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumFragmentCompositions">
            <summary>
            Gets the number of possible product compositions of the current sequence
            </summary>
            <returns>the number of possible product compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.PutAminoAcid(System.Int32,System.Char)">
            <summary>
            Add an amino acid residue to this generator.
            </summary>
            <param name="index">index to add the amino acid. 0 is C-term. 1 is the C-term amino acid.</param>
            <param name="residue">amino acid residue to add.</param>
            <returns>true if residue is a valid amino acid; false otherwise.</returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.SearchModifications">
            <summary>
            The list of search modifications provided via the mods file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.ToString">
            <summary>
            Returns a string that represents this modification object.
            </summary>
            <returns>
            A string that represents the modification.
            </returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.UpdateAndGetModification(System.String,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Register a new modification or update existing modification.
            </summary>
            <param name="name">The name of the modification.</param>
            <param name="composition">The composition of the modification.</param>
            <returns>Registered modification.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.UpdateAndGetModification(System.String,System.Double)">
            <summary>
            Register a new modification or update an existing modification.
            </summary>
            <param name="name">The name of the modification.</param>
            <param name="mass">The mass of the modification.</param>
            <returns>Registered modification.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.UnregisterModification(InformedProteomics.Backend.Data.Sequence.Modification)">
            <summary>
            Unregister a modification by name.
            Added by Chris.
            </summary>
            <param name="modification">The modification to remove.</param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.SearchModification">
            <summary>
            A modification specified in the search
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod">
            <summary>
            Type of dissociation/activation supported/available in this program
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.CID">
            <summary>
            Collision-induced dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.ETD">
            <summary>
            Electron transfer dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.HCD">
            <summary>
            High-energy/beam-type collision induced dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.ECD">
            <summary>
            Electron capture dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.PQD">
            <summary>
            Pulsed q dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.UVPD">
            <summary>
            Ultraviolet photo dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.Unknown">
            <summary>
            Unknown activation method
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeakIndices">
            <summary>
            Used for retrieving Observed peaks when reading from a .dpbf file, in conjunction with a .pbf file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.SetObservedPeaksFromSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum)">
            <summary>
            Uses the peaks in spec to find and set the <see cref="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeaks"/> according to the indices in <see cref="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeakIndices"/>
            </summary>
            <param name="spec"></param>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.dataReader">
            <summary>
            MassSpec data reader to read raw spectra from.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.deconvoluter">
            <summary>
            Spectrum deconvoluter.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.msLevelSet">
            <summary>
            The MS levels (ex MS1, MS2, etc) to extract spectra for.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.maxDegreeOfParallelism">
            <summary>
            The maximum number of threads the deconvoluter can use.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.#ctor(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,InformedProteomics.Backend.Data.Spectrometry.Deconvoluter,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter" /> class.
            This constructor creates an instance with multiple MSLevels for default (MS1 and MS2).
            </summary>
            <param name="dataReader">MassSpec data reader to read raw spectra from.</param>
            <param name="deconvoluter">Spectrum deconvoluter.</param>
            <param name="msLevels">The MS levels (ex MS1, MS2, etc) to extract spectra for.</param>
            <param name="maxDegreeOfParallelism">The maximum number of threads the deconvoluter can use.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.#ctor(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,InformedProteomics.Backend.Data.Spectrometry.Deconvoluter,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter" /> class.
            This constructor creates an instance with a single MSLevel
            </summary>
            <param name="dataReader">MassSpec data reader to read raw spectra from.</param>
            <param name="deconvoluter">Spectrum deconvoluter.</param>
            <param name="msLevel">The MS level (ex MS1, MS2, etc) to extract spectra for.</param>
            <param name="maxDegreeOfParallelism">The maximum number of threads the deconvoluter can use.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.ReadAllSpectra">
            <summary>
            Gets all spectra.
            Deconvolutes spectra in parallel as it reads them.
            </summary>
            <returns>Deconvoluted spectra.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number and deconvolutes it.
            </summary>
            <param name="scanNum">The scan to deconvolute.</param>
            <param name="includePeaks">Should it be deconvoluted?</param>
            <returns>Deconvoluted spectrum.</returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.NumSpectra">
            <summary>
            Gets the number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.Close">
            <summary>
            Close the reader.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.Dispose">
            <summary>
            Cleans up the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum">
            <summary>
            Class for hold MSn (product) spectrum information
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mzArr"></param>
            <param name="intensityArr"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.#ctor(System.Collections.Generic.ICollection{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="peaks"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.ActivationMethod">
            <summary>
            Activation Method
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.IsolationWindow">
            <summary>
            Isolation Window
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.SetMsLevel(System.Int32)">
            <summary>
            Set the MS Level
            </summary>
            <param name="msLevel"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Spectrum">
            <summary>
            Class to hold information about a single Spectrum
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mzArr"></param>
            <param name="intensityArr"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.#ctor(System.Collections.Generic.ICollection{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="peaks"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.ScanNum">
            <summary>
            Scan Number
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.NativeId">
            <summary>
            Native ID
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.TotalIonCurrent">
            <summary>
            Total Ion Current
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.MsLevel">
            <summary>
            MS Level
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.ElutionTime">
            <summary>
            Elution time (minutes)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.Peaks">
            <summary>
            Peaks
            </summary>
            <remarks>Peaks are assumed to be sorted according to m/z</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FindPeak(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Finds the maximum intensity peak within the specified range
            </summary>
            <param name="mz">m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>maximum intensity peak</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetPeakListWithin(System.Double,System.Double)">
            <summary>
            Gets a list of peaks within [minMz, maxMz]
            </summary>
            <param name="minMz">minimum m/z</param>
            <param name="maxMz">maximum m/z</param>
            <returns>list of peaks within [minMz, maxMz]</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetPeakListWithin(System.Double,System.Double,System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak}@)">
            <summary>
            Gets a list of peaks within [minMz, maxMz] and add to peakList
            </summary>
            <param name="minMz">minimum m/z</param>
            <param name="maxMz">maximum m/z</param>
            <param name="peakList">list of peaks where the peaks will be added</param>
            <returns>list of peaks within [minMz, maxMz]</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.ContainsIon(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Checks whether this spectrum contains all isotope peaks whose relative intensity is equal or larter than the threshold
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>true if spectrum contains all ions; false otherwise.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetAllIsotopePeaks(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Finds all isotope peaks corresponding to theoretical profiles with relative intensity higher than the threshold
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>array of observed isotope peaks in the spectrum. null if no peak found.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetCorrScore(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Computes the Pearson correlation between the ion and corresponding peaks in the spectrum
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>Pearson correlation</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetFitScore(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Computes the fit score between the ion and corresponding peaks in the spectrum
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>fit score</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetConsineScore(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Computes the cosine between the ion and corresponding peaks in the spectrum
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>cosine value</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FindPeak(System.Double,System.Double)">
            <summary>
            Finds the maximum intensity peak within the specified range
            </summary>
            <param name="minMz">minimum m/z</param>
            <param name="maxMz">maximum m/z</param>
            <returns>maximum intensity peak within the range</returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Tolerance">
            <summary>
            Facilitates working with mass spec measurement tolerances
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Tolerance.OnePpm">
            <summary>
            Constant tolerance object for 1 PPM
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.#ctor(System.Double)">
            <summary>
            Instantiate a tolerance with the supplied value and PPM units
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.#ctor(System.Double,InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit)">
            <summary>
            Instantiate a tolerance with the supplied value and units
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetValue">
            <summary>
            Get the tolerance value for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetUnit">
            <summary>
            Get the tolerance unit set for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetToleranceAsMz(System.Double)">
            <summary>
            Get the tolerance limit in terms of m/z for the supplied mass
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetToleranceAsTh(System.Double)">
            <summary>
            Get the tolerance limit in terms of Thomsons (m/z) for the supplied mass
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetToleranceAsDa(System.Double,System.Int32)">
            <summary>
            Get the tolerance limit in terms of Daltons for the supplied mass and charge
            </summary>
            <param name="mz"></param>
            <param name="charge"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.IsWithin(System.Double,System.Double)">
            <summary>
            Test the supplied m/z values to see if they are within the tolerance limits in this instance
            </summary>
            <param name="mz1"></param>
            <param name="mz2"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.ToString">
            <summary>
            Return the string representation of this tolerance
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.Parse(System.String)">
            <summary>
            Return a tolerance object that was created using the data from the supplied string
            </summary>
            <param name="tolStr"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetName(System.Int32)">
            <summary>
            Returns ion name with ion index (e.g. y++4-H2O => charge 2 y4 - H2O)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.GetIonTypesFromDecharged(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.IonType},System.Int32)">
            <summary>
            Given a list of IonTypes of charge 1 and a charge value, a list of the same IonTypes of charge up to and
            including charge are outputted.
            </summary>
            <param name="ionTypes">List of IonTypes of charge 1</param>
            <param name="charge">IonTypes of charge up to and including charge will be outputted</param>
            <returns>List of charged IonTypes</returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit">
            <summary>
            Units used for tolerance
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Ppm">
            <summary>
            Parts per million
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Da">
            <summary>
            Daltons
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Mz">
            <summary>
            m/z
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Th">
            <summary>
            Thomsons (m/z)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.Display(System.Int32)">
            <summary>
            Display the chromatogram
            </summary>
            <param name="maxPointsToShow">Maximum number of data points to show</param>
            <remarks>Set maxPoints to 0 to see all of the data points</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.ChargeState">
            <summary>
            The charge state of the fragment.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.Mz">
            <summary>
            The m/z of the fragment.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.Mass">
            <summary>
            The mass of the fragment.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.IonType">
            <summary>
            If this fragment is y6, the FragmentIonClassBase is y
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.ResidueNumber">
            <summary>
            The index of the residue this fragment breaks the peptide at.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.IonSymbol">
            <summary>
            The full ion symbol of the fragment. e.g. y6 or y6++ or y6-H2O++
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IntensityComparer">
            <summary>
            Sort by reverse order of intensities (highest intensity comes first)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance">
            <summary>
            Compare by m/z. Two peaks within ppmTolerance are considered to be equal.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithPpmTolerance">
            <summary>
            Compare by m/z. Two peaks within ppmTolerance are considered to be equal.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithToleranceMz">
            <summary>
            Compare by m/z. Two peaks within toleranceTh Th are considered to be equal.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning">
            <summary>
            Compare by m/z. Two peaks within ppmTolerance are considered to be equal.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun">
            <summary>
            Reduced version of PbfLcMsRun for holding deconvoluted spectra
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.FileExtensionConst">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.FileExtensionVirtual">
            <summary>
            File extension used for this type
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.ContainsChromatograms">
            <summary>
            File extension - overridden. See <see cref="F:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.FileExtensionConst"/> for static access.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.GetPbfFileName(System.String)">
            <summary>
            Function to convert a spectra file name/path to a *.pbf name, even when it has multiple extensions (i.e., .mzML.gz)
            </summary>
            <param name="specFileName"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.GetCheckPbfFilePath(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Gets valid possible pbf file paths
            </summary>
            <param name="specFilePath">Path to the spectra file</param>
            <param name="pbfPath">Path to the default pbf file (in the same folder as the spectra file dataset)</param>
            <param name="fileName"></param>
            <param name="tempPath"></param>
            <returns>The default path to the pbf file, unless a valid pbf file exists at the temp path</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Constructor for opening a DPBF file
            </summary>
            <param name="specFileName"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.#ctor(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.String,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Boolean)">
            <summary>
            Constructor for creating and/or opening a DPBF file
            </summary>
            <param name="specFileName"></param>
            <param name="msdr"></param>
            <param name="pbfFileName"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <param name="keepDataReaderOpen"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.GetSpectrumWithIsotopePeaks(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.Int32)">
            <summary>
            Reads a Spectrum from the DPBF file with isotope peaks populated
            </summary>
            <param name="fullData">The file used to create the DPBF file (throws <see cref="T:System.ArgumentException"/> if it is not) - PBF file preferred.</param>
            <param name="scanNum">The scan to read</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the checksum of the source file does not match the checksum stored in the DPBF file</exception>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.ReadSpectrum(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Read a spectrum from the current position in <paramref name="reader"/>, with the option to only read the metadata.
            </summary>
            <param name="reader"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.DPbfLcMsRun.WriteSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum,System.IO.BinaryWriter)">
            <summary>
            Write the supplied spectrum to the current position in <paramref name="writer"/>
            </summary>
            <param name="specIn"></param>
            <param name="writer"></param>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.LcMsRun">
            <summary>
            Base class for objects that provide access to LCMS run data
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.NumUniqueIsolationWindowThresholdForDia">
            <summary>
            Number of unique isolation windows kept for DIA data
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.IsolationWindowBinningFactor">
            <summary>
            Factor used to bin isolation window data
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MinLcScan">
            <summary>
            Index of first LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MaxLcScan">
            <summary>
            Index of last LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MinMsLevel">
            <summary>
            Lowest MS Level in the dataset. Usually 1.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MaxMsLevel">
            <summary>
            Highest MS Level in the dataset.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.AllScanNumbers">
            <summary>
            List of all scan numbers in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MinMs1Mz">
            <summary>
            The smallest MS1 m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MaxMs1Mz">
            <summary>
            The largest MS1 m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.IsDia">
            <summary>
            True if the dataset is DIA data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.#ctor">
            <summary>
            Default values for configuration properties
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.Dispose">
            <summary>
            Properly dispose of all unmanaged resources (specifically, file handles)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.ReadAllSpectra">
            <summary>
            Gets all spectra
            </summary>
            <returns>all spectra</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number.
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Return the specified spectrum from the file, optionally reading only the metadata
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMs1Spectrum(System.Int32,System.Int32@)">
            <summary>
            If <paramref name="scanNum"/> is a MS1 scan, return it; otherwise, return null.
            </summary>
            <param name="scanNum"></param>
            <param name="ms1ScanIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetIsolationWindow(System.Int32)">
            <summary>
            Return the isolation window for the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetSummedMs1Spectrum(System.Int32,System.Double)">
            <summary>
            Create a summed MS1 spectrum from the scans within <paramref name="elutionTimeTolerance"/> of <paramref name="scanNum"/>
            </summary>
            <param name="scanNum"></param>
            <param name="elutionTimeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetSummedMs1Spectrum(System.Int32,System.Int32)">
            <summary>
            Create a summed MS1 spectrum from the scans in the supplied range
            </summary>
            <param name="minScanNum">min scan number, inclusive</param>
            <param name="maxScanNum">max scan number, inclusive</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetSummedSpectrum(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Produce a summed spectrum using the data in the scans specified by <paramref name="scanNums"/>
            </summary>
            <param name="scanNums"></param>
            <param name="repScanNum">Representative scan number</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetSummedMs2Spectrum(System.Double,System.Int32,System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.ActivationMethod)">
            <summary>
            Get a summed MS2 spectrum from the dataset, with the provided limits
            </summary>
            <param name="monoIsotopicMass"></param>
            <param name="minScanNum">min scan number, inclusive</param>
            <param name="maxScanNum">max scan number, inclusive</param>
            <param name="minCharge">min charge, inclusive</param>
            <param name="maxCharge">max charge, inclusive</param>
            <param name="activationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMsLevel(System.Int32)">
            <summary>
            Gets the MS level of the specified scan
            </summary>
            <param name="scanNum">scan number</param>
            <returns>MS level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetElutionTime(System.Int32)">
            <summary>
            Get the elution time of the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorScanNum(System.Int32)">
            <summary>
            Gets the precursor scan number
            </summary>
            <param name="scanNum"></param>
            <returns>precursor scan number or 0 for MS1</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetNextScanNum(System.Int32)">
            <summary>
            Gets the next scan number whose ms level is smaller by 1
            </summary>
            <param name="scanNum">scan number</param>
            <returns>next scan number or MaxLc for MS1</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrevScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the greatest scan number smaller than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>previous scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetNextScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the smallest scan number larger than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>next scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetScanNumbers(System.Int32)">
            <summary>
            Gets the scan numbers of the specified msLevel
            </summary>
            <param name="msLevel">MS level</param>
            <returns>scan numbers of the specified msLevel</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMs1ScanVector">
            <summary>
            An array of all of the MS1 scan numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMs1ScanNumToIndex">
            <summary>
            Array of length MaxLcScan where entries that are non-zero are the scan index of the given scan number
            </summary>
            <returns></returns>
            <remarks>
            For example, if scan 7 is the 5th MS1 scan in the dataset, then _ms1ScanNumToIndex[7] is 4
            Entries in the array that are 0 mean that MS1 scan does not map to an index
            (exception: scan 1 is listed as index 0)
            </remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.HigherPrecursorChromatogramCacheSize">
            <summary>
            Number of extra precursor chromatogram points to cache on the higher-m/z side of a requested XIC
            </summary>
            <remarks>This will be ignored for any size less than 20 (i.e., no caching on the higher-m/z side will occur)
            This property is specifically designed for use in getting large numbers of XICs that are very close in m/z; a high value will cause degraded performance when reading XICs at random</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.LowerPrecursorChromatogramCacheSize">
            <summary>
            Number of extra precursor chromatogram points to cache on the lower-m/z side of a requested XIC
            </summary>
            <remarks>This will be ignored for any size less than 20 (i.e., no caching on the lower-m/z side will occur)
            This property is specifically designed for use in getting large numbers of XICs that are very close in m/z; a high value will cause degraded performance when reading XICs at random</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullPrecursorIonExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullPrecursorIonExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullPrecursorIonExtractedIonChromatogramVector(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>An array of doubles, with every intensity value in the provided m/z range</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z (using only MS1 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Returns selected peaks between minMz and maxMz. The biggest peak per scan is selected.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Int32,System.Int32)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            Only XicPeaks around the targetScanNum are returned
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="targetScanNum">target scan number to generate xic</param>
            <param name="maxNumConsecutiveScansWithoutPeak">maximum number of consecutive scans with a peak</param>
            <returns>XIC around targetScanNum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            Only XicPeaks around the targetScanNum are returned
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <param name="targetScanNum">target scan number to generate xic</param>
            <param name="tolerance">max number of consecutive scans without a peak</param>
            <returns>XIC around targetScanNum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorChromatogramRange(System.Double,System.Double)">
            <summary>
            Returns all precursor peaks between minMz and maxMz, including multiple peaks per scan
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullProductExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullProductExtractedIonChromatogram(System.Double,System.Double,System.Double)">
            <summary>
            Returns a xic for the chosen range that covers the entire run.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <param name="precursorMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetTrimmedXic(InformedProteomics.Backend.Data.Spectrometry.Xic,System.Int32,System.Int32)">
            <summary>
            Get a segment of Xic containing the targetScanNum
            </summary>
            <param name="xic">xic to be trimmed</param>
            <param name="targetScanNum">target scan number to generate xic</param>
            <param name="tolerance">number of scans that can be tolerated</param>
            <returns>Trimmed XIC around targetScanNum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetNumUniqueIsoWindows">
            <summary>
            Return the number of unique isolation windows in the dataset
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMinIsolationWindowWidth">
            <summary>
            Get the narrowest isolation window width
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFragmentationSpectraScanNums(InformedProteomics.Backend.Data.Biology.Ion)">
            <summary>
            Gets scan numbers of the fragmentation spectra whose isolation window contains the precursor ion specified
            </summary>
            <param name="precursorIon"></param>
            <returns>scan numbers of fragmentation spectra</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFragmentationSpectraScanNums(System.Double)">
            <summary>
            Gets scan numbers of the fragmentation spectra whose isolation window contains the precursor ion specified
            </summary>
            <param name="mostAbundantIsotopeMz"></param>
            <returns>scan numbers of fragmentation spectra</returns>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.IsolationMzBinToScanNums">
            <summary>
            Dictionary to map IsolationMzBins to scan numbers
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.ScanNumToMsLevel">
            <summary>
            Dictionary to map scan numbers to MS Levels
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.ScanNumElutionTimeMap">
            <summary>
            Dictionary to map scan numbers to elution times
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.IsDiaOrNull">
            <summary>
            True if DIA data, false if not, null if unknown
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.CreatePrecursorNextScanMap">
            <summary>
            Create the maps for linking MSn scans to their precursors, and for getting the next MS1 scan number given a scan number
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory">
            <summary>
            Factory class for getting the right data reader for the provided file(s)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.GetMassSpecDataReader(System.String)">
            <summary>
            Gets the appropriate IMassSpecDataReader for the supplied path.
            It is recommended that "NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <remarks>It is recommended that "NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.GetMassSpecDataType(System.String)">
            <summary>
            Gets the appropriate classifying MassSpecDataType for the supplied path
            </summary>
            <param name="filePath">Path to spec file/folder</param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.MassSpecDataTypeFilterString">
            <summary>
            The list of all formats supported by built-in type and ProteoWizard (not all-inclusive), as an OpenFileDialog filter string.
            </summary>
            <remarks>Included are some filenames, which are inner contents for folder-type datasets.</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.MassSpecDataTypes">
            <summary>
            The list of all formats supported by built-in type and ProteoWizard (not all-inclusive).
            </summary>
            <remarks>Included are some filenames, which are inner contents for folder-type datasets.</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.MassSpecDataTypeFilterList">
            <summary>
            The list of extensions (some file names) of all formats supported by built-in types and by ProteoWizard (not all-inclusive)
            </summary>
            <remarks>Included are some filenames, which are inner contents for folder-type datasets.</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.SupportedDirectoryTypes">
            <summary>
            The list of directory dataset type extensions that are supported by ProteoWizard (not all-inclusive)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.IsADirectoryDataset(System.String)">
            <summary>
            Test the supplied path to see if we can read it using available readers
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.GetDirectoryContainingDataset(System.String)">
            <summary>
            Gets the directory that contains the dataset; it will back out of subdirectories of folder-type datasets
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.GetDatasetName(System.String)">
            <summary>
            Utility function: Gets the actual dataset name, needed in cases when a file in a folder-type dataset is given.
            </summary>
            <param name="path"></param>
            <returns>The path to the dataset, or the path to the dataset directory</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.NormalizeDatasetPath(System.String)">
            <summary>
            Get the normalized dataset path; only returns a different string when the given path is to a file/folder in a folder-type dataset
            </summary>
            <param name="path"></param>
            <returns>Normalized dataset path</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.ChangeExtension(System.String,System.String)">
            <summary>
            Modification of Path.ChangeExtension: properly removes multiple extensions.
            </summary>
            <param name="filePath"></param>
            <param name="newExt"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.RemoveExtension(System.String)">
            <summary>
            Modification of Path.ChangeExtension(path, null), which removes the extension. This will remove multiple extensions.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.IsPwizAvailable">
            <summary>
            Tests to see if we can load the needed ProteoWizard DLL without errors
            </summary>
            <returns>True if we can load the ProteoWizard DLLs</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.IsThermoRawAvailable">
            <summary>
            Tests to see if we can load the needed  Thermo MSFileReader DLL without errors
            </summary>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.SupportedTypesAll">
            <summary>
            Gets the list of all file types supported as a pair of description and file extensions.
            Contains all files supported when ProteoWizard is available.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.SupportedTypesBuiltIn">
            <summary>
            Gets the list of all file types supported as a pair of description and file extensions.
            Contains all file types supported if only ThermoRawFileReaderDLL is available.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MassSpecDataReaderFactory.SupportedTypesNoExternalDll">
            <summary>
            Gets the list of all file types supported as a pair of description and file extensions.
            Contains only file types that are natively supported by InformedProteomics without
            any external DLLs available.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.MzMLReader">
            <summary>
            Reader for mzML files. Can handle gzipped mzML files, and read in a forward-only fashion or in a random-access fashion.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.MzMLReader.MzML_Version">
            <summary>
            Enumeration of common mzML versions
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.MzMLReader._version">
            <summary>
            Store the mzML version, so that we can use it to adjust how some things are processed.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.MzMLReader.NativeIdConversion">
            <summary>
            Helper class for converting between native IDs and scan numbers
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.NativeIdConversion.TryGetScanNumberLong(System.String,System.Int64@)">
            <summary>
            Try to get the scan number for <paramref name="nativeId"/>, and parse it as a long int
            </summary>
            <param name="nativeId"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.NativeIdConversion.TryGetScanNumberInt(System.String,System.Int32@)">
            <summary>
            Try to get the scan number for <paramref name="nativeId"/>, and parse it as an int
            </summary>
            <param name="nativeId"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.NativeIdConversion.GetScanNumber(System.String)">
            <summary>
            For the supplied <paramref name="nativeId"/>, get the corresponding scan number
            </summary>
            <param name="nativeId"></param>
            <returns></returns>
            <remarks>Code is ported from MSData.cpp in ProteoWizard</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize a MzMlReader object
            </summary>
            <param name="filePath">Path to mzML file</param>
            <param name="randomAccess">If mzML reader should be configured for random access</param>
            <param name="tryReducingMemoryUsage">If mzML reader should try to avoid reading all spectra into memory. This will reduce memory usage for a non-random access MzMLReader, as long as ReadMassSpectrum(int) isn't used.</param>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MzMLReader.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MzMLReader.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MzMLReader.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MzMLReader.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MzMLReader.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.MzMLReader.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.RequireMetadata">
            <summary>
            Read the file-level metadata from the mzML file, without reading any spectra
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadAllSpectra">
            <summary>
            Returns all mass spectra.
            Uses "yield return" to allow processing one spectra at a time if called from a foreach loop statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns a single spectrum from the file
            </summary>
            <param name="index"></param>
            <param name="includePeaks"></param>
            <returns></returns>
            <remarks>If random access mode is turned on, this will respond quickly and use only as much memory as is needed to store the spectrum.
            If random access mode is off, this will cause the memory usage reducing mode to shut of, and all spectra will be read into memory.</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadAllSpectraNonRandom">
            <summary>
            Read all mass spectra in the file, not using random access
            Uses "yield return" to use less memory when called from a "foreach" statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadMassSpectrumNonRandom(System.Int64,System.Boolean)">
            <summary>
            Read a single mass spectrum and return it.
            Causes all spectra in the file to be loaded into memory
            </summary>
            <param name="index"></param>
            <param name="includePeaks"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadAllSpectraRandom">
            <summary>
            Read all mass spectra in the file, using random access
            Uses "yield return" to use less memory when called from a "foreach" statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadMassSpectrumRandom(System.Int64,System.Boolean)">
            <summary>
            Read a single mass spectrum and return it.
            </summary>
            <param name="index"></param>
            <param name="includePeaks"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.Close">
            <summary>
            Close out the file handle and delete any temp files
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.Cleanup">
            <summary>
            Delete unzipped file, if we had to unzip the file to read it.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.Dispose">
            <summary>
            Close and cleanup file handles
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.Finalize">
            <summary>
            Close and cleanup file handles
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ClearDataCache">
            <summary>
            Clear out cached data - keep the index information, if it is a random access reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadIndexFromEnd">
            <summary>
            Find and read the index information, starting at the end of the file...
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadChecksum">
            <summary>
            Read the Checksum from the indexedmzML data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadRunForOffsets">
            <summary>
            Handle the child nodes of the run element
            Called by IndexMzMl (xml hierarchy)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadIndexList(System.Xml.XmlReader)">
            <summary>
            Handle the child nodes of the indexedmzML element
            Called by IndexMzMl (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "indexList" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadIndex(System.Xml.XmlReader)">
            <summary>
            Handle the child nodes of the indexList element
            Called by ReadIndexList (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "index" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadMzMl">
            <summary>
            Read and parse a .mzML file
            Files are commonly larger than 100 MB, so use a streaming reader instead of a DOM reader
            Very conditional, depending on configuration
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadFileDescription(System.Xml.XmlReader)">
            <summary>
            Handle the child nodes of the fileDescription element
            Called by ReadMzML (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "fileDescription" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadSourceFileList(System.Xml.XmlReader)">
            <summary>
            Handle a single sourceFileList element and child nodes
            Called by ReadMzML (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single sourceFileList element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadReferenceableParamGroupList(System.Xml.XmlReader)">
            <summary>
            Handle the child nodes of the referenceableParamGroupList element
            Called by ReadMzML (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "referenceableParamGroupList" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadCvParam(System.Xml.XmlReader)">
            <summary>
            Handle the cvParam element
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "cvParam" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadUserParam(System.Xml.XmlReader)">
            <summary>
            Handle the userParam element
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "userParam" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadRunData(System.Xml.XmlReader)">
            <summary>
            Handle the child nodes of the run element
            Called by ReadMzML (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single "run" element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadSpectrumList(System.Xml.XmlReader)">
            <summary>
            Handle the child nodes of a spectrumList element
            Called by ReadRunData (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single spectrumList element</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadSpectrum(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Handle a single spectrum element and child nodes
            Called by ReadSpectrumList (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single spectrum element</param>
            <param name="includePeaks">Whether to read binary data arrays</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadSpectrumDescription(System.Xml.XmlReader,System.Collections.Generic.List{InformedProteomics.Backend.MassSpecData.MzMLReader.ScanData}@,System.Collections.Generic.List{InformedProteomics.Backend.MassSpecData.MzMLReader.Precursor}@,System.Boolean@)">
            <summary>
            mzML_1.0.0 compatibility
            Handle a single spectrumDescription element and child nodes
            Called by ReadSpectrumList (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single spectrum element</param>
            <param name="scans"></param>
            <param name="precursors"></param>
            <param name="centroided"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadScanList(System.Xml.XmlReader)">
            <summary>
            Handle a single scanList element and child nodes
            Called by ReadSpectrum (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single scanList element</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadScan(System.Xml.XmlReader)">
            <summary>
            Handle a single scan element and child nodes
            Called by ReadSpectrum (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single scan element</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadPrecursorList(System.Xml.XmlReader)">
            <summary>
            Handle a single precursorList element and child nodes
            Called by ReadSpectrum (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single precursorList element</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadPrecursor(System.Xml.XmlReader)">
            <summary>
            Handle a single precursor element and child nodes
            Called by ReadPrecursorList (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single precursor element</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadSelectedIonList(System.Xml.XmlReader)">
            <summary>
            Handle a single selectedIonList element and child nodes
            Called by ReadPrecursor (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single selectedIonList element</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadBinaryDataArrayList(System.Xml.XmlReader,System.Int32)">
            <summary>
            Handle a single binaryDataArrayList element and child nodes
            Called by ReadSpectrum (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single binaryDataArrayList element</param>
            <param name="defaultArrayLength">Default array length, coming from spectrum attribute</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.MzMLReader.ReadBinaryDataArray(System.Xml.XmlReader,System.Int32)">
            <summary>
            Handle a single binaryDataArray element and child nodes
            Called by ReadBinaryDataArrayList (xml hierarchy)
            </summary>
            <param name="reader">XmlReader that is only valid for the scope of the single binaryDataArray element</param>
            <param name="defaultLength">Default array length, coming from spectrum attribute</param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor">
            <summary>
            Interface for objects that can supply chromatograms
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullPrecursorIonExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullPrecursorIonExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullProductExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullProductExtractedIonChromatogram(System.Double,System.Double,System.Double)">
            <summary>
            Returns a xic for the chosen range that covers the entire run.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <param name="precursorIonMz"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ILcMsRun">
            <summary>
            Interface for LcMsRun data objects
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ILcMsRun.MinLcScan">
            <summary>
            Index of first LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ILcMsRun.MaxLcScan">
            <summary>
            Index of last LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ILcMsRun.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ILcMsRun.IsDia">
            <summary>
            True if the dataset is DIA data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetElutionTime(System.Int32)">
            <summary>
            Get the elution time of the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetMsLevel(System.Int32)">
            <summary>
            Gets the MS level of the specified scan
            </summary>
            <param name="scanNum">scan number</param>
            <returns>MS level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetPrevScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the greatest scan number smaller than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>previous scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetNextScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the smallest scan number larger than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>next scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetScanNumbers(System.Int32)">
            <summary>
            Gets the scan numbers of the specified msLevel
            </summary>
            <param name="msLevel">MS level</param>
            <returns>scan numbers of the specified msLevel</returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ISpectrumExtractor">
            <summary>
            Interface for objects that can supply spectra
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumExtractor.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Read the specified spectrum from the file, optionally reading only the metadata
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun">
            <summary>
            LcMsRun implementation where all information is held in the system's memory. Due to the amount of memory this can consume, use of <see cref="T:InformedProteomics.Backend.MassSpecData.PbfLcMsRun"/> is generally preferred.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetLcMsRunScanRange(System.String,System.Int32)">
            <summary>
            Convert supplied file to pbf, and return InMemoryLcMsRun reading from the pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="singleScanNum"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetLcMsRunScanRange(System.String,System.Int32,System.Int32,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert supplied file to pbf, and return InMemoryLcMsRun reading from the pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="scanStart"></param>
            <param name="scanEnd"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetLcMsRun(System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert supplied file to pbf, and return InMemoryLcMsRun reading from the pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetLcMsRun(System.String,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert supplied file to pbf, and return InMemoryLcMsRun reading from the pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetLcMsRun(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Int32,System.Int32)">
            <summary>
            Convert supplied file to pbf, and return InMemoryLcMsRun reading from the pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="specReader"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <param name="scanStart"></param>
            <param name="scanEnd"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.ConvertToPbf(System.String,System.Double,System.Double,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert supplied file to pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="pbfFilePath"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.ConvertToPbf(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.Double,System.Double,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert supplied file to pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="specReader"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="pbfFilePath">If supplied, file will be written to this path; otherwise the file will be written to the same directory as specFilePath, or to the temp directory if the user does not have write permissions</param>
            <param name="progress">Progress data, as a percentage</param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.#ctor(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor - read the source file into memory
            </summary>
            <param name="massSpecDataReader">data reader; will be closed when reading is done unless otherwise specified</param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <param name="scanStart"></param>
            <param name="scanEnd"></param>
            <param name="keepDataReaderOpen">if true, massSpecDataReader will be left open; otherwise it will be closed</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.Dispose">
            <summary>
            Properly dispose of all unmanaged resources (specifically, file handles)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.Ms1PeakList">
            <summary>
            List of all MS1 peaks
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.MinMs1Mz">
            <summary>
            The smallest MS1 m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.MaxMs1Mz">
            <summary>
            The largest MS1 m/z
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Gets the spectrum of the specified scan number
            </summary>
            <param name="scanNum">scan number</param>
            <param name="includePeaks">Whether to include peak data</param>
            <returns>spectrum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetMs1Spectrum(System.Int32,System.Int32@)">
            <summary>
            If <paramref name="scanNum"/> is a MS1 scan, return it; otherwise, return null.
            </summary>
            <param name="scanNum"></param>
            <param name="ms1ScanIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetIsolationWindow(System.Int32)">
            <summary>
            Return the isolation window for the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetPrecursorChromatogramRange(System.Double,System.Double)">
            <summary>
            Returns all precursor peaks between minMz and maxMz, including multiple peaks per scan
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetFullProductExtractedIonChromatogram(System.Double,System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetProductExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <param name="minScanNum">minimum scan number (inclusive)</param>
            <param name="maxScanNum">maximum scan number (inclusive)</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetProductExtractedIonChromatogram(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <param name="minScanNum">minimum scan number (inclusive)</param>
            <param name="maxScanNum">maximum scan number (inclusive)</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.GetProductExtractedIonChromatogram(System.Double,System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Int32,System.Int32)">
            <summary>
            Get an extracted ion chromatogram using the specified limits
            </summary>
            <param name="productIonMz"></param>
            <param name="precursorIonMz"></param>
            <param name="tolerance"></param>
            <param name="minScanNum"></param>
            <param name="maxScanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.WriteAsPbf(System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Old PBF creation workflow
            </summary>
            <param name="outputFilePath"></param>
            <param name="progress"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun.WriteAsPbf(InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun,System.IO.BinaryWriter,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Old PBF creation workflow
            </summary>
            <param name="imlr"></param>
            <param name="writer"></param>
            <param name="progress"></param>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader">
            <summary>
            Interface for objects that can supply mass spectrometry data, usually from a file
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.ReadAllSpectra">
            <summary>
            Gets all spectra
            </summary>
            <returns>all spectra</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number.
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.) - lower case, hex characters only (no dashes)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.MassSpecDataType">
            <summary>
            Enum of distinctly handled file types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.MassSpecDataType.XCaliburRun">
            <summary>
            Thermo Finnigan .RAW data, read with XCaliburReader if DLLs are available
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.MassSpecDataType.MzMLFile">
            <summary>
            mzML file, read with MzMLReader usually
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.MassSpecDataType.PbfFile">
            <summary>
            PBF file, read with PbfLcMsRun
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.MassSpecDataType.DeconvolutedPbfFile">
            <summary>
            Deconvoluted PBF file, read with DPbfLcMsRun
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.MassSpecDataType.Unknown">
            <summary>
            Other source file, read with ProteoWizard if DLLs are available
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ProteoWizardReader">
            <summary>
            ProteoWizard Reader, using the ProteoWizard pwiz_bindings_cli to utilize the ProteoWizard suite of vendor readers.
            </summary>
            <remarks>This class uses a custom AssemblyResolver to find an installation of ProteoWizard, specified in ProteoWizardReaderImplementation.
            This class is a wrapper around ProteoWizardReaderImplementation to encapsulate the usage of the custom AssemblyResolver, which must be
            added to the AppDomain.CurrentDomain.AssemblyResolve event before the class is instantiated.</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.PwizPath">
            <summary>
            The path to the most recent 64-bit ProteoWizard install
            If this is not null/empty, we can usually make a safe assumption that the ProteoWizard dlls are available.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.FindPwizPath">
            <summary>
            Finds the path to the most recent 64-bit ProteoWizard install
            PwizPath is populated from this, but only causes a single search.
            Paths searched, in order: "%ProteoWizard%" environment variable data, "C:\DMS_Programs\ProteoWizard", "%ProgramFiles%\ProteoWizard\(highest sorted)"
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.ReadAllSpectra">
            <summary>
            Gets all spectra
            </summary>
            <returns>all spectra</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.NativeFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number.
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.Dispose">
            <summary>
            Close the file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.ProteoWizardFilterString">
            <summary>
            Filter string designed to be used in a file browser
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.SupportedFilesFilterList">
            <summary>
            All files that ProteoWizard supports, either directly, or as part of a folder dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.SupportedDirectoryTypes">
            <summary>
            List of "folder extensions" that ProteoWizard can read. This does not include all folder type datasets - some require directory listings.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.BrukerFiles">
            <summary>
            List of files that are produced by Bruker instruments that ProteoWizard can read.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.DirectlySupportedFilesFilterList">
            <summary>
            All file extensions that ProteoWizard directly reads - i.e., we don't need to back out of a folder
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReader.CheckForDirectoryDataset(System.String)">
            <summary>
            Check the file path to see if it is to files in a directory dataset type (.raw folder, or .d folder)
            </summary>
            <param name="filePath"></param>
            <returns>Path to directory, if a directory, otherwise returns filePath</returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation">
            <summary>
            ProteoWizardReaderImplementation, using the ProteoWizard pwiz_bindings_cli to utilize the ProteoWizard suite of vendor readers.
            </summary>
            <remarks>This class uses a custom AssemblyResolver to find an installation of ProteoWizard. If there are DLL resolving
            problems when trying to use it, add the ProteoWizardAssemblyResolver to the AppDomain.CurrentDomain.AssemblyResolve
            event before first instantiating the class.</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.AddAssemblyResolver">
            <summary>
            Add the Assembly Resolver to the system assembly resolver chain
            </summary>
            <remarks>This should be called early in the program, so that the ProteoWizard Assembly Resolver will
            already be in the resolver chain before any other use of ProteoWizardWrapper.
            Also, DependencyLoader.ValidateLoader() should be used to make sure a meaningful error message is thrown if ProteoWizard is not available.</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.ProteoWizardAssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            On a missing DLL event, searches a path specified by FindPwizPath for the ProteoWizard dlls, and loads them
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.TargetDllName">
            <summary>
            Name of the DLL we are checking for
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.PwizPath">
            <summary>
            The path to the most recent 64-bit ProteoWizard install
            If this is not null/empty, we can usually make a safe assumption that the ProteoWizard dlls are available.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.FindPwizPath">
            <summary>
            Finds the path to the most recent 64-bit ProteoWizard install
            PwizPath is populated from this, but only causes a single search.
            </summary>
            <returns></returns>
            <remarks>Paths searched, in order:
            "%ProteoWizard%" or "%ProteoWizard%_x86" environment variable data,
            "C:\DMS_Programs\ProteoWizard" or "C:\DMS_Programs\ProteoWizard_x86",
            "%ProgramFiles%\ProteoWizard\(highest sorted)"</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.ValidateLoader">
            <summary>
            Checks to make sure the path to ProteoWizard files is set. If not, throws an exception.
            </summary>
            <remarks>This function should generally only be called inside of a conditional statement to prevent the
            exception from being thrown when the ProteoWizard dlls will not be needed.</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filePath"></param>
            <remarks>To avoid assembly resolving errors, the ProteoWizardAssemblyResolver should be added as an AssemblyResolve event handler, as follows:
            <code>AppDomain.CurrentDomain.AssemblyResolve += ProteoWizardReader.ProteoWizardAssemblyResolver;</code>
            </remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.ReadAllSpectra">
            <summary>
            Gets all spectra
            </summary>
            <returns>all spectra</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number.
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.ReadSpectrum(System.Int32,System.Boolean)">
            <summary>
            Internal spectrum reader to eliminate excess calls to LoadPwizReader() when called from ReadAllSpectra()
            </summary>
            <param name="scanIndex"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.Close">
            <summary>
            Close the file
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.Dispose">
            <summary>
            Close the file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ProteoWizardReaderImplementation.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.PbfLcMsRun">
            <summary>
            A file-backed object for accessing mass spec data. Data is read from the vendor format
            to a binary PBF file, and that file is used for fast access to spectra and extracted ion chromatograms
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileExtensionConst">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileExtensionVirtual">
            <summary>
            File extension used for this type
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileExtension">
            <summary>
            File extension - overrideable. Returns <see cref="F:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileExtensionConst"/> for current type. See <see cref="F:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileExtensionConst"/> for static access.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.ContainsChromatograms">
            <summary>
            True if the file contains precursor or product chromatograms
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileFormatId">
            <summary>
            The current FileFormatId, which is written to the file, and checked before a file is read
            </summary>
            <remarks>This constant should be incremented by 1 if the binary file format is changed</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetPbfFileName(System.String)">
            <summary>
            Function to convert a spectra file name/path to a *.pbf name, even when it has multiple extensions (i.e., .mzML.gz)
            </summary>
            <param name="specFileName"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetLcMsRun(System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert a spec file to pbf, and return an LcMsRun that uses the pbf file
            </summary>
            <param name="specFilePath"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetLcMsRun(System.String,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert a spec file to pbf, and return an LcMsRun that uses the pbf file
            </summary>
            <param name="specFilePath"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetLcMsRun(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert a spec file to pbf, and return an LcMsRun that uses the pbf file
            </summary>
            <param name="specFilePath"></param>
            <param name="specReader">Data reader; if not a PbfLcMsRun, it will be closed when pbf file creation is finished</param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.ConvertToPbf(System.String,System.Double,System.Double,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert a spec file to pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="pbfFilePath"></param>
            <param name="progress"></param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.ConvertToPbf(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.Double,System.Double,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Convert a spec file to pbf
            </summary>
            <param name="specFilePath"></param>
            <param name="specReader"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="pbfFilePath">If supplied, file will be written to this path; otherwise the file will be written to the same directory as specFilePath, or to the temp directory if the user does not have write permissions</param>
            <param name="progress">Progress data, as a percentage</param>
            <returns></returns>
            <remarks>It is recommended that "MassSpecDataReaderFactory.NormalizeDatasetPath" be called prior to calling this function, and that the returned string be used instead of the original path</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetCheckPbfFilePath(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Gets valid possible pbf file paths
            </summary>
            <param name="specFilePath">Path to the spectra file</param>
            <param name="pbfPath">Path to the default pbf file (in the same folder as the spectra file dataset)</param>
            <param name="fileName"></param>
            <param name="tempPath"></param>
            <returns>The default path to the pbf file, unless a valid pbf file exists at the temp path</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetCheckPbfFilePath(System.String,System.String@,System.String@,System.String@,System.String)">
            <summary>
            Gets valid possible pbf file paths
            </summary>
            <param name="specFilePath">Path to the spectra file</param>
            <param name="pbfPath">Path to the default pbf file (in the same folder as the spectra file dataset)</param>
            <param name="fileName"></param>
            <param name="tempPath"></param>
            <param name="extension">The extension expected for the pbf file</param>
            <returns>The default path to the pbf file, unless a valid pbf file exists at the temp path</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Constructor for opening a PBF file
            </summary>
            <param name="specFileName"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.#ctor(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.String,System.Double,System.Double,System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Boolean)">
            <summary>
            Constructor for creating and/or opening a PBF file
            </summary>
            <param name="specFileName"></param>
            <param name="msdr"></param>
            <param name="pbfFileName"></param>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
            <param name="progress"></param>
            <param name="keepDataReaderOpen">use 'true' if the data reader should not be closed when finished creating the PBF file</param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for creating and/or opening a PBF file
            </summary>
            <param name="precursorSignalToNoiseRatioThreshold"></param>
            <param name="productSignalToNoiseRatioThreshold"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetPbfFile(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Boolean)">
            <summary>
            Given a spec file path and other information, either open an existing pbf corresponding to the spec file path, or create a new one
            </summary>
            <param name="specFileName"></param>
            <param name="msdr"></param>
            <param name="pbfFileName"></param>
            <param name="progress"></param>
            <param name="keepDataReaderOpen"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.BuildPbfFile(System.String,InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.String,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Boolean)">
            <summary>
            Code for writing a PBF file. Should only be called from a constructor.
            </summary>
            <param name="specFileName"></param>
            <param name="msdr"></param>
            <param name="pbfPath"></param>
            <param name="tempPath"></param>
            <param name="progress"></param>
            <param name="keepDataReaderOpen"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.OpenPbfFile(System.String)">
            <summary>
            Code for opening a PBF file. Should only be called from the constructors.
            </summary>
            <param name="specFileName"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.CheckFileFormatVersion(System.String,System.Boolean@)">
            <summary>
            Check the file format version of the specified file to see if it is readable with the current version.
            </summary>
            <param name="filePath">path to the file to check</param>
            <param name="isCurrent">true if the format is the same as the current format</param>
            <returns>True if the format is readable</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.PbfFilePath">
            <summary>
            The path to this pbf file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.RawFilePath">
            <summary>
            Raw file path (as of when/where the file was created)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.PbfFileChecksum">
            <summary>
            SHA-1 Checksum of the pbf file, calculated on first access to this property - lowercase, hex only
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.NativeIdLength">
            <summary>
            The length of the Native ID field in the binary file
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.Dispose">
            <summary>
            Properly dispose of all unmanaged resources (specifically, file handles)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.MinMs1Mz">
            <summary>
            The smallest MS1 m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.MaxMs1Mz">
            <summary>
            The largest MS1 m/z
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Read the specified spectrum from the file, optionally reading only the metadata
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetIsolationWindow(System.Int32)">
            <summary>
            Read and return the isolation window for the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetFullProductExtractedIonChromatogram(System.Double,System.Double,System.Double)">
            <summary>
            Returns a xic for the chosen range that covers the entire run.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <param name="precursorMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Returns selected peaks between minMz and maxMz. The biggest peak per scan is selected.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetPrecursorChromatogramRange(System.Double,System.Double)">
            <summary>
            Returns all peaks between minMz and maxMz, including multiple peaks per scan
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetMs1Spectrum(System.Int32,System.Int32@)">
            <summary>
            If <paramref name="scanNum"/> is a MS1 scan, return it; otherwise, return null.
            </summary>
            <param name="scanNum"></param>
            <param name="ms1ScanIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.ReadSpectrum(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Read a spectrum from the current position in <paramref name="reader"/>, with the option to only read the metadata.
            </summary>
            <param name="reader"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.WriteSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum,System.IO.BinaryWriter)">
            <summary>
            Write the supplied spectrum to the current position in <paramref name="writer"/>
            </summary>
            <param name="spec"></param>
            <param name="writer"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.WriteAsPbf(InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun,System.String,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Old PBF file creation workflow
            </summary>
            <param name="imlr"></param>
            <param name="outputFilePath"></param>
            <param name="progress"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.WriteAsPbf(InformedProteomics.Backend.MassSpecData.InMemoryLcMsRun,System.IO.BinaryWriter,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Old PBF file creation workflow
            </summary>
            <param name="imlr"></param>
            <param name="writer"></param>
            <param name="progress"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.WriteToPbf(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,System.IO.BinaryWriter,System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Bulk of code to write a PBF file. Protected internal to support DPbfLcMsRun.
            </summary>
            <param name="msdr"></param>
            <param name="writer"></param>
            <param name="progress"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.PbfLcMsRun.GetMzBinIndex(System.Double)">
            <summary>
            Get the MzBin index for the supplied m/z
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.XCaliburReader">
            <summary>
            Class for reading spectra from Thermo .RAW files, using an installed MSFileReader DLL
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.XCaliburReader.PeakToBackgroundRatio">
            <summary>
            Parameters for centroiding spectra
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.#ctor(System.String)">
            <summary>
            Constructor - open the file, and prepare to read
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.ReadAllSpectra">
            <summary>
            Reads all spectra
            </summary>
            <returns>all spectra</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.TryMakeRandomAccessCapable">
            <summary>
            Always random-access capable.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.XCaliburReader.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.XCaliburReader.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.XCaliburReader.FilePath">
            <summary>
            Path to the file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.XCaliburReader.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the raw file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.XCaliburReader.FileFormatVersion">
            <summary>
            Version of the file format
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Reads the mass spectrum with the specified scanNum from the raw file
            </summary>
            <param name="scanNum">scan number</param>
            <param name="includePeaks">whether to include peak data</param>
            <returns>mass spectrum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.ReadPrecursorInfo(System.Int32)">
            <summary>
            Reads the precursor information of the specified scan
            </summary>
            <param name="scanNum">scan number</param>
            <returns>precursor information</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.GetMaxScanNum">
            <summary>
            Get the maximum scan number in the file
            </summary>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.XCaliburReader.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.GetMinScanNum">
            <summary>
            Get the minimum scan number in the file
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.ReadMsLevel(System.Int32)">
            <summary>
            Read the MS Level of the specified scan number from the file
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.RtFromScanNum(System.Int32)">
            <summary>
            Get the retention time for the scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.ReadIsolationWindowTargetMz(System.Int32)">
            <summary>
            Reads the isolation window target m/z
            </summary>
            <param name="scanNum">scan number</param>
            <returns>isolation window target m/z</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.GetActivationMethod(System.Int32)">
            <summary>
            Gets the activation method
            </summary>
            <param name="scanNum">scan number</param>
            <returns>activation method</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.XCaliburReader.Dispose">
            <summary>
            Clean up - close the file handle
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Results.DatabaseSearchResultData">
            <summary>
            Container with utilities for reading/writing/storing database search results.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.ScanNum">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Pre">
            <summary>
            Pre residue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Sequence">
            <summary>
            Peptide sequence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Post">
            <summary>
            Post residue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Modifications">
            <summary>
            Name and location of modifications
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Composition">
            <summary>
            Match elemental composition (including modifications)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.ProteinName">
            <summary>
            Name of Protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.ProteinDescription">
            <summary>
            Protein Description
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.ProteinLength">
            <summary>
            Length of protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Start">
            <summary>
            Start index of sequence in protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.End">
            <summary>
            End index of sequence in protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Charge">
            <summary>
            Charge
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.MostAbundantIsotopeMz">
            <summary>
            m/z of most abundant isotope
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Mass">
            <summary>
            Calculated mass (monoisotopic m/z)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.NumMatchedFragments">
            <summary>
            Number of matched fragments
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.Probability">
            <summary>
            Match Probability
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.SpecEValue">
            <summary>
            SpecEValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.EValue">
            <summary>
            EValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.QValue">
            <summary>
            QValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.PepQValue">
            <summary>
            PepQValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.HasTdaScores">
            <summary>
            If the FDR scores (QValue and PepQValue) have been set
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Results.DatabaseSearchResultData.SequenceWithEnds">
            <summary>
            The sequence, with the pre and post residues
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.#ctor(System.String)">
            <summary>
            Construct using a string from a tsv file input
            </summary>
            <param name="line"></param>
        </member>
        <member name="F:InformedProteomics.Backend.Results.DatabaseSearchResultData.TsvHeaderString">
            <summary>
            Header string for default TSV output, without FDR scores
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Results.DatabaseSearchResultData.TsvFormatString">
            <summary>
            Format string for default TSV output, without FDR scores
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Results.DatabaseSearchResultData.TdaTsvHeaderString">
            <summary>
            Header string for default TSV output, with FDR scores
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Results.DatabaseSearchResultData.TdaTsvFormatString">
            <summary>
            Format string for default TSV output, with FDR scores
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.GetHeaderString(System.Boolean)">
            <summary>
            Get the header string for default TSV output, with columns added for FDR scores if addTdaScores is true
            </summary>
            <param name="addTdaScores"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.TsvFormattedString(System.Boolean)">
            <summary>
            Create a TSV format string from this object
            </summary>
            <param name="addTdaScores">True to add FDR results (QValue and PepQValue) to the output</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.SetInputFileHeader(System.String)">
            <summary>
            Set the file header string for a file that will be read in
            </summary>
            <param name="headerLine"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.ParseTsvLine(System.String,System.String)">
            <summary>
            Parse a string from a tsv file input
            </summary>
            <param name="line"></param>
            <param name="headerLine"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.WriteResultsToFile(System.String,System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Results.DatabaseSearchResultData},System.Boolean)">
            <summary>
            Write the resultData in TSV format to the specified path, possibly including FDR scores
            </summary>
            <param name="filePath"></param>
            <param name="resultData"></param>
            <param name="includeTdaScores">If FDR scores should be output also</param>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.ReadResultsFromFile(System.String)">
            <summary>
            Read in result data from the specified TSV format file.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Results.DatabaseSearchResultData.ReadResultsFromFileToMzIdData(System.String)">
            <summary>
            Read results from tsv file into group of objects from PSI_Interface
            </summary>
            <param name="idFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Results.IdentificationExtensions">
            <summary>
            Extension functions for working with identification data.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Results.IdentificationExtensions.GetIpSequence(PSI_Interface.IdentData.SimpleMZIdentMLReader.PeptideRef)">
            <summary>
            Convert the sequence information from the external types to the internal types
            </summary>
            <param name="peptide"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Results.ResultFileReader">
            <summary>
            Reader factory for result files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Results.ResultFileReader.SupportedResultsFiles">
            <summary>
            File extensions supported by the results reader.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Results.ResultFileReader.ReadResultFile(System.String)">
            <summary>
            Read the file at path <paramref name="filePath"/>.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.AnonymousComparer`1">
            <summary>
            Class used for helping create an IComparer class for binary search.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.AnonymousComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Constructor that requires the Comparison be passed in.
            </summary>
            <param name="comparison">The Comparison to be used for the binary search.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.AnonymousComparer`1.Compare(`0,`0)">
            <summary>
            Compares 2 objects using the Comparison passed in when creating the AnonymousComparer class.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>
            Less than zero if the first object precedes the second.
            Zero if the objects occur in the same position.
            Greater than zero if the first object follows the second.
            </returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ArrayUtil.ToString``1(``0[],System.String,System.String)">
            <summary>
            Create a string to display the array values.
            </summary>
            <param name="array">The array</param>
            <param name="delimiter">Delimiter character</param>
            <param name="format">Optional. A string to use to format each value. Must contain the colon, so something like ':0.000'</param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.Centroider">
            <summary>
            Centroid spectra (copied from Skyline)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.CubicSpline">
            <summary>
            Cubic spline interpolation.
            Call Fit (or use the corrector constructor) to compute spline coefficients, then Eval to evaluate the spline at other X coordinates.
            </summary>
            <remarks>
            <para>
            This is implemented based on the wikipedia article:
            http://en.wikipedia.org/wiki/Spline_interpolation
            I'm not sure I have the right to include a copy of the article so the equation numbers referenced in
            comments will end up being wrong at some point.
            </para>
            <para>
            This is not optimized, and is not MT safe.
            This can extrapolate off the ends of the splines.
            You must provide points in X sort order.
            </para>
            </remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.#ctor(System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Construct and call Fit.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.CheckAlreadyFitted">
            <summary>
            Throws if Fit has not been called.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.GetNextXIndex(System.Single)">
            <summary>
            Find where in xOrig the specified x falls, by simultaneous traverse.
            This allows xs to be less than x[0] and/or greater than x[n-1]. So allows extrapolation.
            This keeps state, so requires that x be sorted and xs called in ascending order, and is not multi-thread safe.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.EvalSpline(System.Single,System.Int32,System.Boolean)">
            <summary>
            Evaluate the specified x value using the specified spline.
            </summary>
            <param name="x">The x value.</param>
            <param name="j">Which spline to use.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The y value.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.FitAndEval(System.Single[],System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Fit x,y and then eval at points xs and return the corresponding y's.
            This does the "natural spline" style for ends.
            This can extrapolate off the ends of the splines.
            You must provide points in X sort order.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="xs">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each xs.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.Fit(System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Compute spline coefficients for the specified x,y points.
            This does the "natural spline" style for ends.
            This can extrapolate off the ends of the splines.
            You must provide points in X sort order.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.Eval(System.Single[],System.Boolean)">
            <summary>
            Evaluate the spline at the specified x coordinates.
            This can extrapolate off the ends of the splines.
            You must provide X's in ascending order.
            The spline must already be computed before calling this, meaning you must have already called Fit() or FitAndEval().
            </summary>
            <param name="x">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each x.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.EvalSlope(System.Single[],System.Boolean)">
            <summary>
            Evaluate (compute) the slope of the spline at the specified x coordinates.
            This can extrapolate off the ends of the splines.
            You must provide X's in ascending order.
            The spline must already be computed before calling this, meaning you must have already called Fit() or FitAndEval().
            </summary>
            <param name="x">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each x.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.Compute(System.Single[],System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Static all-in-one method to fit the splines and evaluate at X coordinates.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="xs">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each xs.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.CubicSpline.FitGeometric(System.Single[],System.Single[],System.Int32,System.Single[]@,System.Single[]@)">
            <summary>
            Fit the input x,y points using a 'geometric' strategy so that y does not have to be a single-valued
            function of x.
            </summary>
            <param name="x">Input x coordinates.</param>
            <param name="y">Input y coordinates, do not need to be a single-valued function of x.</param>
            <param name="nOutputPoints">How many output points to create.</param>
            <param name="xs">Output (interpolated) x values.</param>
            <param name="ys">Output (interpolated) y values.</param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.FdrCalculator">
            <summary>
            Computes the False Decoy Ratio and scores for the supplied target and decoy hits
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.FdrCalculator.NumPsms">
            <summary>
            Number of PSMs with a QValue &lt; 0.01
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.FdrCalculator.NumPeptides">
            <summary>
            Number of peptides with a PepQValue &lt; 0.01
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.FdrCalculator.ErrorMessage">
            <summary>
            Error message, if FDR calculation fails
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.FdrCalculator.FilteredResults">
            <summary>
            The full list of filtered results, with FDR scores added
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.FdrCalculator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiate the FDR calculator
            </summary>
            <param name="targetResultFilePath"></param>
            <param name="decoyResultFilePath"></param>
            <param name="multiplePeptidesPerScan"></param>
            <remarks>If an error occurs, ErrorMessage will be non-null</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.FdrCalculator.#ctor(System.Collections.Generic.List{InformedProteomics.Backend.Results.DatabaseSearchResultData},System.Collections.Generic.List{InformedProteomics.Backend.Results.DatabaseSearchResultData},System.Boolean)">
            <summary>
            Instantiate the FDR calculator
            </summary>
            <param name="targetResults"></param>
            <param name="decoyResults"></param>
            <param name="multiplePeptidesPerScan"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.FdrCalculator.HasError">
            <summary>
            True if there was an error calculating the FDR scores
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.FdrCalculator.WriteTo(System.String,System.Boolean)">
            <summary>
            Write the results with the FDR data to the specified file
            </summary>
            <param name="outputFilePath"></param>
            <param name="includeDecoy"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner">
            <summary>
            Class attempts to find ideal concentration of particular isotope by comparing it to an
            observed isotopic profile.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner" /> class.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Element">
            <summary>
            Gets or sets the element to manipulte isotope proportions for.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeIndex">
            <summary>
            Gets or sets the index of the isotope to manipulate, relative to the monoisotope.
            </summary>
            <remarks>Monoisotope is index 0.</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Tolerance">
            <summary>
            Gets the peak tolerance for matching observed peaks to theoretical peaks.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.ObservedPeaks">
            <summary>
            Gets or sets the list of observed peaks to compare to the theoretical isotope profile.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Mass">
            <summary>
            Gets or sets the monoisotopic mass of the ion to calculate isotope peaks for.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Charge">
            <summary>
            Gets or sets the charge of the ion to calculate isotope peaks for.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.StepSize">
            <summary>
            Gets or sets the amount to increase the concentration of the selected isotope index for each iteration.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.MaxConcentration">
            <summary>
            Gets or sets the maximum concentration of the selected isotope to consider.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.RelativeIntensityThreshold">
            <summary>
            Gets or sets the least abundant theoretical isotope peak to consider, relative to the highest theoretical isotope peak.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Tune(System.IProgress{InformedProteomics.Backend.Utils.ProgressData})">
            <summary>
            Try to find the best concentration of the selected isotope
            by stepping through the concentrations and fitting a theoretical
            isotopic profile to the provided observed peaks.
            </summary>
            <param name="progress">The progress reporter.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.GetTheoreticalIsotopeProfile(System.Double[])">
            <summary>
            Gets the theoretical isotope profile calculated using Averagine with the provided
            isotope proportions.
            </summary>
            <param name="proportions">The proportions of each isotope.</param>
            <returns>The theoretical isotope profile peaks.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.AlignObservedPeaks(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Aligns observed peak list to theoretical peak list.
            </summary>
            <param name="observedPeaks"></param>
            <param name="theoreticalPeaks"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.GetDefaultProportions(InformedProteomics.Backend.Data.Biology.Atom)">
            <summary>
            Get the default isotope proportions for the given element.
            </summary>
            <param name="element">The element to get the default proportions for.</param>
            <returns>An array where each index is the </returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.ValidateParameters">
            <summary>
            Checks to make sure that the selected element is one that is possible to manipulate.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve">
            <summary>
            Class representing a the results of the isotope concentration tuning.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve" />.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.DataPoints">
            <summary>
            Gets or sets the curve showing isotope concentration vs pearson correlation with fit to observed peaks.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.BestConcentration">
            <summary>
            The concentration with the best fit with observed peaks.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint">
            <summary>
            Class representing a single point in the curve showing concentration vs correlation.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint.IsotopeConcentration">
            <summary>
            Gets the concentration of selected isotope.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint.MonoisotopeConcentration">
            <summary>
            Gets the concentration of monoisotope..
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint.PearsonCorrelation">
            <summary>
            Gets pearson correlation of the isotope concentration fit to the observed peaks.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.Misc">
            <summary>
            Miscellaneous utilities
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateFromVersion">
            <summary>
            Parse the assembly's version to try to get a build date
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateFromVersion(System.Version)">
            <summary>
            Parse the supplied version to try to get a build date
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateTextFromVersion">
            <summary>
            Parse the assembly's version to try to get a build date
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateTextFromVersion(System.Version)">
            <summary>
            Parse the supplied version to try to get a build date
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.ParallelizationUtils">
            <summary>
            Helper class for determining what resources the system has that we can use, and for trying to not overload the system.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.NumPhysicalCores">
            <summary>
            Number of physical cores in the system
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.NumPhysicalProcessors">
            <summary>
            Number of physical processors (sockets used) in the system
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.PhysCoreCountFromWmi">
            <summary>
            If the physical core count was retrieved via WMI, and is thereby guaranteed to be correct
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.NumLogicalCores">
            <summary>
            The number of logical cores in the system (includes hyperthreading cores)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.ProgressData">
            <summary>
            Add functionality to progress reporting using <see cref="T:System.IProgress`1"/>
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.Status">
            <summary>
            Status string - for reporting textual information about the current task
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.StatusInternal">
            <summary>
            Internal status string - for tracking nested progress status
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.ProgressObj">
            <summary>
            Referenced <see cref="T:System.IProgress`1"/> object, that all updates are pushed out to.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.ThrowExceptionOnBackwardsProgress">
            <summary>
            When true, anything that will cause progress to go backwards will cause an exception; otherwise, such changes are silently handled to prevent backwards progress. Should not be true in general release code.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.PreventBackwardsProgress">
            <summary>
            When set to true, logic is used that will prevent progress from jumping backwards (errors are silently ignored; see <see cref="P:InformedProteomics.Backend.Utils.ProgressData.ThrowExceptionOnBackwardsProgress"/> to trigger exceptions instead)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.Percent">
            <summary>
            The current percent progress of the task. Updated using <see cref="M:InformedProteomics.Backend.Utils.ProgressData.Report(System.Double,System.String)"/> or variants
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.IsPartialRange">
            <summary>
            If the progress reporting will be blocked into ranges
            Setting this to "true" will reset MinPercentage and MaxPercentage to 0.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.MinPercentage">
            <summary>
            Must be less than current MaxPercentage
            </summary>
            <remarks>Will set IsPartialRange to true</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.MaxPercentage">
            <summary>
            Must be greater than current MinPercentage
            </summary>
            <remarks>Will set IsPartialRange to true</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.UpdateFrequencySeconds">
            <summary>
            Throttling for console output - used with ShouldUpdate() to provide a simple throttle to reduce the console output
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.LastUpdated">
            <summary>
            Last output time, for throttling updates for console output
            </summary>
            <remarks>static for the case of multiple ProgressData objects being fed to "Progress.Report()"</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ProgressData.HasUsedPartialRange">
            <summary>
            Track if a partial range (not 0-100%) has been set previously. This should never be set to false outside of object construction.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Utils.ProgressData._hasUsedPartialRangeWithAReallyLongAndNastyNameSoThatNoOneEverWantsToUseUtBesidesWhereItIsSupposedToBeUsed">
            <summary>
            Backing variable for HasUsedPartialRange. ONLY USE INSIDE OF HasUsedPartialRange GETTER/SETTER.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.#ctor(System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="progress">The progress object that "ProgressData.Report" should call "Report" on</param>
            <param name="preventBackwardsProgress">Set to false to disable the logic preventing reverse progress</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.StepRange(System.Double,System.String)">
            <summary>
            Change to a new range block
            </summary>
            <param name="newMaxPercentage">New max percent for range, must be greater than current max percent.</param>
            <param name="newStatus">Updated status string, null for no update</param>
            <remarks>Will set IsPartialRange to true</remarks>
            <remarks>If current max percent is 100, the new max percent can be any value between 0 and 100</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.CheckSetMinMaxRange(System.Double,System.Double)">
            <summary>
            Perform validity checks on new min/max percent values, and then set them accordingly
            </summary>
            <param name="newMin"></param>
            <param name="newMax"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.UpdatePercent(System.Double)">
            <summary>
            Update percent, and return object. For single-lining a progress update and report with <see cref="M:System.IProgress`1.Report(`0)"/>
            </summary>
            <param name="pct"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.ShouldUpdate">
            <summary>
            Check function to limit output frequency, when outputting to console.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.Report(System.String)">
            <summary>
            Updates the status, then calls the stored progress object's "Report"
            </summary>
            <param name="newStatus">Updated status string</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.Report(System.Double,System.String)">
            <summary>
            Updates the percent, then calls the stored progress object's "Report"
            </summary>
            <param name="pct">percent progress, 0 to 100</param>
            <param name="newStatus">Updated status string, null for no update</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.ReportDecimal(System.Double,System.String)">
            <summary>
            Updates the percent, then calls the stored progress object's "Report"
            </summary>
            <param name="pct">percent progress, 0 to 1</param>
            <param name="newStatus">Updated status string, null for no update</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.Report(System.Double,System.Double,System.String)">
            <summary>
            Updates the percent, then calls the stored progress object's "Report"
            </summary>
            <param name="count">The count progress, or numerator</param>
            <param name="total">The total number of objects to be counted, or denominator</param>
            <param name="newStatus">Updated status string, null for no update</param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.TriDiagonalMatrixF">
            <summary>
            A tri-diagonal matrix has non-zero entries only on the main diagonal, the diagonal above the main (super), and the
            diagonal below the main (sub).
            </summary>
            <remarks>
            <para>
            This is based on the wikipedia article: http://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm
            </para>
            <para>
            The entries in the matrix on a particular row are A[i], B[i], and C[i] where i is the row index.
            B is the main diagonal, and so for an NxN matrix B is length N and all elements are used.
            So for row 0, the first two values are B[0] and C[0].
            And for row N-1, the last two values are A[N-1] and B[N-1].
            That means that A[0] is not actually on the matrix and is therefore never used, and same with C[N-1].
            </para>
            </remarks>
        </member>
        <member name="F:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.A">
            <summary>
            The values for the sub-diagonal. A[0] is never used.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.B">
            <summary>
            The values for the main diagonal.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.C">
            <summary>
            The values for the super-diagonal. C[C.Length-1] is never used.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.N">
            <summary>
            The width and height of this matrix.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.Item(System.Int32,System.Int32)">
            <summary>
            Indexer. Setter throws an exception if you try to set any not on the super, main, or sub diagonals.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.#ctor(System.Int32)">
            <summary>
            Construct an NxN matrix.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.ToDisplayString(System.String,System.String)">
            <summary>
            Produce a string representation of the contents of this matrix.
            </summary>
            <param name="fmt">Optional. For String.Format. Must include the colon. Examples are ':0.000' and ',5:0.00' </param>
            <param name="prefix">Optional. Per-line indentation prefix.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TriDiagonalMatrixF.Solve(System.Single[])">
            <summary>
            Solve the system of equations this*x=d given the specified d.
            </summary>
            <remarks>
            Uses the Thomas algorithm described in the wikipedia article: http://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm
            Not optimized. Not destructive.
            </remarks>
            <param name="d">Right side of the equation.</param>
        </member>
    </members>
</doc>
