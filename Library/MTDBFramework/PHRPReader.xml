<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PHRPReader</name>
    </assembly>
    <members>
        <member name="T:PHRPReader.clsAminoAcidModInfo">
            <summary>
            Tracks modifications on a residue
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.N_TERMINAL_PEPTIDE_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the N-terminus of a peptide
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.C_TERMINAL_PEPTIDE_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the C-terminus of a peptide
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.N_TERMINAL_PROTEIN_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the N-terminus of a protein
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.C_TERMINAL_PROTEIN_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the C-terminus of a protein
            </summary>
        </member>
        <member name="T:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants">
            <summary>
            Terminus state enum
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants.None">
            <summary>
            The residue is in the middle of the peptide
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants.PeptideNTerminus">
            <summary>
            The residue is located at the peptide's N-terminus; superseded by ProteinNTerminus if applicable
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants.PeptideCTerminus">
            <summary>
            The residue is located at the peptide's C-terminus; superseded by ProteinCTerminus if applicable
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants.ProteinNTerminus">
            <summary>
            The residue is located at the protein's N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants.ProteinCTerminus">
            <summary>
            The residue is located at the protein's C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants.ProteinNandCCTerminus">
            <summary>
            The protein only has one residue
            </summary>
        </member>
        <member name="P:PHRPReader.clsAminoAcidModInfo.AmbiguousMod">
            <summary>
            True if the location of the modification is ambiguous
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsAminoAcidModInfo.EndResidueLocInPeptide">
            <summary>
            For ambiguous mods, indicates the last residue on which the mod could appear.  For non-ambiguous mods, whill be the same as ResidueLocInPeptide
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsAminoAcidModInfo.ModDefinition">
            <summary>
            Modification definition
            </summary>
        </member>
        <member name="P:PHRPReader.clsAminoAcidModInfo.Residue">
            <summary>
            Amino acid residue symbol
            </summary>
        </member>
        <member name="P:PHRPReader.clsAminoAcidModInfo.ResidueLocInPeptide">
            <summary>
            Indicates the residue number modified; the first residue is at position 1
            </summary>
            <value></value>
            <returns></returns>
            <remarks>For ambiguous mods, indicates the first residue on which the mod could appear</remarks>
        </member>
        <member name="P:PHRPReader.clsAminoAcidModInfo.ResidueTerminusState">
            <summary>
            Residue terminus state
            </summary>
        </member>
        <member name="M:PHRPReader.clsAminoAcidModInfo.#ctor(System.Char,System.Int32,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,PHRPReader.clsModificationDefinition)">
            <summary>
            Constructor
            </summary>
            <param name="residue"></param>
            <param name="residueLocInPeptide"></param>
            <param name="residueTerminusState"></param>
            <param name="modDefinition"></param>
        </member>
        <member name="M:PHRPReader.clsAminoAcidModInfo.#ctor(System.Char,System.Int32,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,PHRPReader.clsModificationDefinition,System.Int32)">
            <summary>
            Constructor with endResidueLocInPeptide
            </summary>
            <param name="residue"></param>
            <param name="residueLocInPeptide"></param>
            <param name="residueTerminusState"></param>
            <param name="modDefinition"></param>
            <param name="endResidueLocInPeptide"></param>
        </member>
        <member name="T:PHRPReader.clsEmpiricalFormula">
            <summary>
            Empirical formula
            </summary>
        </member>
        <member name="P:PHRPReader.clsEmpiricalFormula.ElementCounts">
            <summary>
            Elements in the empirical formula
            Keys are element symbols, values are element counts
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Constructor, initialized with an existing dictionary of element symbols and counts
            </summary>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor, initialized with a list of element symbols
            </summary>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary>
            Constructor, initialized with a list of KeyValuePairs of element symbol and element count
            </summary>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.AddElement(System.String,System.Int32)">
            <summary>
            Add a new element to the empirical formula
            </summary>
            <param name="elementSymbol"></param>
            <param name="elementCount"></param>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.AddElements(PHRPReader.clsEmpiricalFormula)">
            <summary>
            Adds all of the elements from the given empirical formula
            </summary>
            <param name="empiricalFormula"></param>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.GetElementCount(System.Char)">
            <summary>
            Return the number of atoms of the given element in the empirical formula
            </summary>
            <param name="elementSymbol"></param>
            <returns>Element Count, or 0 if the element is not in ElementCounts</returns>
        </member>
        <member name="M:PHRPReader.clsEmpiricalFormula.ToString">
            <summary>
            String representation of the empirical formula
            </summary>
            <returns></returns>
        </member>
        <member name="T:PHRPReader.clsModificationDefinition">
            <summary>
            This class describes an amino acid modification
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.LAST_RESORT_MODIFICATION_SYMBOL">
            <summary>
            Modification symbol used after all of the DEFAULT_MODIFICATION_SYMBOLS have been used
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.NO_SYMBOL_MODIFICATION_SYMBOL">
            <summary>
            Symbol to indicate a modification does not have a mod symbol
            </summary>
            <remarks>Used with isotopic mods and protein terminus static mods</remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.UNKNOWN_MOD_BASE_NAME">
            <summary>
            Unknown mod base name
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.INITIAL_UNKNOWN_MASS_CORRECTION_TAG_NAME">
            <summary>
            Initial unknown mass correction tag name
            </summary>
        </member>
        <member name="T:PHRPReader.clsModificationDefinition.eModificationTypeConstants">
            <summary>
            Modification types
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.UnknownType">
            <summary>
            Unknown mod type on a residue; essentially treated as a dynamic mod
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.DynamicMod">
            <summary>
            Dynamic mod on a residue or peptide terminus; supported by Sequest and notated via a modification symbol; this mod is explicitly notated by X!Tandem; if a terminus mod, the mod symbol is associated with the first or last residue in the peptide
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.StaticMod">
            <summary>
            Static mod on a residue or peptide terminus; supported by Sequest but not explicitly notated; this mod is explicitly notated by X!Tandem; if a terminus mod, the mod symbol is associated with the first or last residue in the peptide
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.TerminalPeptideStaticMod">
            <summary>
            Peptide terminus static mod (DMS Symbol is T); used by Sequest and MSGFDB; note that terminal mods are always dynamic in X!Tandem
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.IsotopicMod">
            <summary>
            Isotopic mod, e.g. N15, or C13; supported by Sequest; most likely not supported by XTandem
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.eModificationTypeConstants.ProteinTerminusStaticMod">
            <summary>
            Protein terminus static mod; supported by Sequest; this mod is also supported by X!Tandem but modified residues are not explicitly notated; instead, all peptides have their mass implicitly modified by this amount
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.mModificationSymbol">
            <summary>
            One letter symbol for this modification; use NO_SYMBOL_MODIFICATION_SYMBOL if no symbol (necessary for isotopic mods or protein terminus static mods)
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.mModificationMass">
            <summary>
            Monoisotopic modification mass
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.mTargetResidues">
            <summary>
            Target residues, tracked as a space-free, comma-free list of one letter amino acid residue symbols that this mod can apply to
            Use the *_SYMBOL_DMS constants for the peptide and protein terminii symbols (&lt; and &gt; for the peptide terminii; [ and ] for the protein terminii)
            </summary>
            <remarks>
            If this is empty, the given modification can apply to any residue or terminus
            </remarks>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.mMassCorrectionTag">
            <summary>
            Name associated with the given ModificationMass; maximum length is 8 characters
            Cannot contain a colon, comma, or space
            </summary>
        </member>
        <member name="F:PHRPReader.clsModificationDefinition.mAffectedAtom">
            <summary>
            Set to Nothing or to clsPeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL for positional modifications (including terminus modifications)
            For Isotopic modifications, indicate the atom affected (e.g. C, H, N, O, or S)
            </summary>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.ModificationSymbol">
            <summary>
            One letter symbol for this modification
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            Use NO_SYMBOL_MODIFICATION_SYMBOL (a dash) if no symbol
            (necessary for isotopic mods or protein terminus static mods)
            </remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.ModificationMass">
            <summary>
            Monoisotopic modification mass
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.ModificationMassAsText">
            <summary>
            Modification mass, stored as text
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Represents the original string value read from the data file</remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.TargetResidues">
            <summary>
            Residues that this modification can apply to
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            If an empty string, the modification can apply to any residue or terminus;
            Otherwise, should contain a space-free, comma-free list of one letter amino acid residue symbols that this mod can apply to.
            Use the *_SYMBOL_DMS constants for the peptide and protein terminii symbols
            (less than and greater than signs for the peptide terminii; [ and ] for the protein terminii)
            </remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.ModificationType">
            <summary>
            Modification type
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.MassCorrectionTag">
            <summary>
            Modification name, for example Phosph, IodoAcet, Plus1Oxy, or Methyl
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Maximum length is 8 characters; cannot contain a colon, comma, or space</remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.AffectedAtom">
            <summary>
            Only used with Isotopic modifications, indicating the atom affected (e.g. C, H, N, O, or S)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            Set to Nothing or to clsPeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL (a dash) for positional modifications
            (including terminus modifications)
            </remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.OccurrenceCount">
            <summary>
            Number of times this modification was observed in the given dataset
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsModificationDefinition.UnknownModAutoDefined">
            <summary>
            True if this was an unknown mass that was auto defined
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.#ctor(System.Char,System.Double)">
            <summary>
            Constructor that takes a mod symbol and mod mass
            </summary>
            <param name="modificationSymbol"></param>
            <param name="modificationMass"></param>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.#ctor(System.Double,System.String,PHRPReader.clsModificationDefinition.eModificationTypeConstants)">
            <summary>
            Constructor that takes a mod mass, target residues, and modification tye
            </summary>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.#ctor(System.Char,System.Double,System.String,PHRPReader.clsModificationDefinition.eModificationTypeConstants,System.String)">
            <summary>
            Constructor that takes a mod symbol, mod mass, target residues, modification type, and mass correction tag
            </summary>
            <param name="modificationSymbol"></param>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
            <param name="massCorrectionTag"></param>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.#ctor(System.Char,System.Double,System.String,PHRPReader.clsModificationDefinition.eModificationTypeConstants,System.String,System.Char,System.Boolean)">
            <summary>
            Constructor that takes a mod symbol, mod mass, target residues, modification type, mass correction tag, and affected atom
            </summary>
            <param name="modificationSymbol"></param>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
            <param name="massCorrectionTag"></param>
            <param name="chAffectedAtom"></param>
            <param name="unknownModAutoDefined"></param>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.Clear">
            <summary>
            Initialize the modification definition
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAndAtom(PHRPReader.clsModificationDefinition)">
            <summary>
            Compares b to this object, ignoring .ModificationSymbol and ignoring .AffectedResidues
            </summary>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAndAtom(PHRPReader.clsModificationDefinition,PHRPReader.clsModificationDefinition)">
            <summary>
            Compare a to b but ignore .ModificationSymbol and .AffectedResidues
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAtomAndResidues(PHRPReader.clsModificationDefinition)">
            <summary>
            Compares b to this object, ignoring .ModificationSymbol
            </summary>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.EquivalentMassTypeTagAtomAndResidues(PHRPReader.clsModificationDefinition,PHRPReader.clsModificationDefinition)">
            <summary>
            Compares b to this object
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.EquivalentTargetResidues(System.String,System.String,System.Boolean)">
            <summary>
            Compare the residue lists (ignoring order)
            </summary>
            <param name="residues1"></param>
            <param name="residues2"></param>
            <param name="allowResidues2ToBeSubsetOfResidues1"></param>
            <returns>True if they contain the same residues</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.CanAffectPeptideOrProteinTerminus">
            <summary>
            Returns True if this modification can affect the peptide or protein terminus
            Note that some modifications can affect either peptide terminii or internal residues
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.CanAffectPeptideResidues">
            <summary>
            Returns true if this modification can affect peptide residues
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.GetTerminalSymbols">
            <summary>
            Retrieve the protein and peptide terminus symbols
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.ModificationSymbolToModificationType(System.Char)">
            <summary>
            Retrieve the modification type for the given modification type symbol
            </summary>
            <param name="modificationTypeSymbol">D, S, T, I, or P</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.ModificationTypeToModificationSymbol(PHRPReader.clsModificationDefinition.eModificationTypeConstants)">
            <summary>
            Retrieve the modification type symbol for the given modification Type
            </summary>
            <param name="eModificationType"></param>
            <returns>D, S, T, I, or P</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.TargetResiduesContain(System.Char)">
            <summary>
            Check whether the target residues contain the given residue
            </summary>
            <param name="chComparisonResidue"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsModificationDefinition.ToString">
            <summary>
            Description of this modification definition
            </summary>
            <returns></returns>
        </member>
        <member name="T:PHRPReader.clsMSGFPlusParamFileModExtractor">
            <summary>
            This class reads a DMS-based parameter file for MS-GF+ or MSPathFinder to extract the dynamic and static modification information
            </summary>
            <remarks>See above for an example parameter file</remarks>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.UNKNOWN_MSGFPlus_MOD_SYMBOL">
            <summary>
            Unknown MS-GF+ mod symbols
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.PARAM_TAG_MOD_STATIC">
            <summary>
            Static mod parameter file keyword
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.PARAM_TAG_MOD_DYNAMIC">
            <summary>
            Dynamic mod parameter file keyword
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.PARAM_TAG_CUSTOM_AA">
            <summary>
            Custom amino acid definition parameter file keyword
            </summary>
        </member>
        <member name="T:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType">
            <summary>
            MS-GF+ modification type
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.DynamicMod">
            <summary>
            Dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.StaticMod">
            <summary>
            Static
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.DynNTermPeptide">
            <summary>
            N-terminal peptide dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.DynCTermPeptide">
            <summary>
            C-terminal peptide dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.DynNTermProtein">
            <summary>
            N-terminal protein dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.DynCTermProtein">
            <summary>
            C-terminal protein dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType.CustomAA">
            <summary>
            Custom amino acid definition
            </summary>
        </member>
        <member name="T:PHRPReader.clsMSGFPlusParamFileModExtractor.ModSpecFormats">
            <summary>
            Modification specification formats
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.ModSpecFormats.MSGFPlusAndMSPathFinder">
            <summary>
            MS-GF+ or MSPathFinder
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.ModSpecFormats.TopPIC">
            <summary>
            TopPIC
            </summary>
        </member>
        <member name="T:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType">
            <summary>
            Tracks dynamic and static modification details
            Also tracks Custom amino acids
            </summary>
            <remarks>
            Notes when tracking information for custom amino acids
              ModName:    Name associated with the custom amino acid
              ModMass:    Composition string, for example C5H7N1O2S0 for Hydroxyproline
              ModMassVal: Computed mass of the composition string
              Residues:   Single letter abbreviation for the custom amino acid, for example J or X
              ModType:    eMSGFPlusModType.CustomAA
              ModSymbol:  ?   (a question mark; not used)
            </remarks>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.ModName">
            <summary>
            Mod name (read from the parameter file) isn't used by MS-GF+, but it is used by MSPathFinder
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.ModMass">
            <summary>
            Mod mass, stored as a string since reading from a text file and writing to a text file.  Also, can be a mass or an empirical formula
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.ModMassVal">
            <summary>
            Modification mass
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.Residues">
            <summary>
            Affected residues
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.ModType">
            <summary>
            Modification type
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.ModSymbol">
            <summary>
            Modification symbol: *, #, @, ... ; dash if a static mod
            </summary>
        </member>
        <member name="M:PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType.ToString">
            <summary>
            Mod type, name, mass, residues
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsMSGFPlusParamFileModExtractor.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.clsMSGFPlusParamFileModExtractor.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="toolName">
            Search engine name, typically MS-GF+
            This name is only used in log messages
            </param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsMSGFPlusParamFileModExtractor.ExtractModInfoFromParamFile(System.String,PHRPReader.clsMSGFPlusParamFileModExtractor.ModSpecFormats,System.Collections.Generic.List{PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType}@)">
            <summary>
            Extracts mod info from a MS-GF+ or MSPathFinder param file, or from a MSGFPlus_Mods.txt file (previously MSGFDB_Mods.txt)
            </summary>
            <param name="paramFilePath"></param>
            <param name="modSpecFormat"></param>
            <param name="modInfo"></param>
            <returns>True if success; false if a problem</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsMSGFPlusParamFileModExtractor.ParseModSpecMSGFPlus(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Int32@,PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType@)">
            <summary>
            Parse the mod spec definition from a MS-GF+ or MSPathFinder parameter file
            </summary>
            <param name="paramFilePath"></param>
            <param name="splitLine"></param>
            <param name="unnamedModID"></param>
            <param name="udtModInfo"></param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PHRPReader.clsMSGFPlusParamFileModExtractor.ParseModSpecTopPIC(System.String,System.Collections.Generic.IReadOnlyList{System.String},PHRPReader.clsMSGFPlusParamFileModExtractor.eMSGFPlusModType,System.Int32@,PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType@)">
            <summary>
            Parse the mod spec definition from a TopPIC parameter file
            </summary>
            <param name="paramFilePath"></param>
            <param name="splitLine"></param>
            <param name="modType">eMSGFPlusModType.DynamicMod or eMSGFPlusModType.StaticMod</param>
            <param name="unnamedModID"></param>
            <param name="udtModInfo"></param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PHRPReader.clsMSGFPlusParamFileModExtractor.ResolveMSGFPlusModsWithModDefinitions(System.Collections.Generic.List{PHRPReader.clsMSGFPlusParamFileModExtractor.udtModInfoType},PHRPReader.clsPeptideModificationContainer)">
            <summary>
            Resolve MS-GF+, MSPathFinder, or TopPIC mods with mod definitions
            </summary>
            <param name="modInfo"></param>
            <param name="peptideMods"></param>
        </member>
        <member name="T:PHRPReader.clsMSGFResultsReader">
            <summary>
            This class reads MSGF scores from a tab-delimited _msgf.txt file
            </summary>
        </member>
        <member name="F:PHRPReader.clsMSGFResultsReader.mColumnHeaders">
            <summary>
            Column headers
            </summary>
        </member>
        <member name="P:PHRPReader.clsMSGFResultsReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.clsMSGFResultsReader.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsMSGFResultsReader.DefineColumnHeaders">
            <summary>
            Define header names for MSGF result files
            </summary>
        </member>
        <member name="M:PHRPReader.clsMSGFResultsReader.ReadMSGFData(System.String)">
            <summary>
            Open a tab-delimited MSGF results file and read the data
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>A Dictionary where keys are ResultID and values are MSGF_SpecProb values (stored as strings)</returns>
        </member>
        <member name="T:PHRPReader.clsPeptideCleavageStateCalculator">
             <summary>
             This class will compute the cleavage state and terminus state of a given peptide sequence.
             It can also be used to remove modification symbols from a sequence using ExtractCleanSequenceFromSequenceWithMods
             </summary>
             <remarks>
             The sequence can simply contain single-letter amino acid symbols (capital letters) or a mix
             of amino acid symbols and modification symbols, for example:
               A.BCDEFGHIJK.L
               A.B*CDEFGHIJK.L
               A.BCDEFGHIJK*.L
               A.BCDEFGHIJK.L
            
             Function ComputeCleavageState is overloaded to either except the peptide sequence with
             prefix and suffix letters (e.g. A.BCDEFGHIJK.L) or accept the primary peptide sequence,
             the prefix residue(s), and the suffix residue(s).
            
             Use EnzymeMatchSpec to specify the residues to match for cleavage
            
             The default cleavage specification is for trypsin: [KR]|[^P]
            
             Note: Function SplitPrefixAndSuffixFromSequence will change peptides that look like:
                  E.TGMLTQKFARSLGMLAVDNQARV..   to   E.TGMLTQKFARSLGMLAVDNQARV.
               or ..TGMLTQKFARSLGMLAVDNQARV.R   to   .TGMLTQKFARSLGMLAVDNQARV.R
             </remarks>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.GENERIC_RESIDUE_SYMBOL">
            <summary>
            Generic residue symbol
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.TERMINUS_SYMBOL_SEQUEST">
            <summary>
            Peptide terminus symbol for SEQUEST
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.TERMINUS_SYMBOL_XTANDEM_NTerminus">
            <summary>
            Peptide N-terminus symbol for X!Tandem
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.TERMINUS_SYMBOL_XTANDEM_CTerminus">
            <summary>
            /// Peptide C-terminus symbol for X!Tandem
            </summary>
        </member>
        <member name="T:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants">
            <summary>
            Peptide cleavage state
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants.Unknown">
            <summary>
            Unknown cleavage specificity
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants.NonSpecific">
            <summary>
            E.g., non-tryptic
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants.Partial">
            <summary>
            E.g., partially tryptic
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants.Full">
            <summary>
            E.g., fully tryptic
            </summary>
        </member>
        <member name="T:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants">
            <summary>
            Peptide terminus state
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants.None">
            <summary>
            The peptide is located in the middle of the protein
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants.ProteinNTerminus">
            <summary>
            The peptide is located at the protein's N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants.ProteinCTerminus">
            <summary>
            The peptide is located at the protein's C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants.ProteinNandCCTerminus">
            <summary>
            The peptide spans the entire length of the protein
            </summary>
        </member>
        <member name="T:PHRPReader.clsPeptideCleavageStateCalculator.eStandardCleavageAgentConstants">
            <summary>
            Standard enzymes
            </summary>
        </member>
        <member name="T:PHRPReader.clsPeptideCleavageStateCalculator.udtEnzymeMatchSpecType">
            <summary>
            Example RegEx match strings for udtEnzymeMatchSpecType:
            [KR] means to match K or R
            [^P] means the residue cannot be P
            [A-Z] means to match anything; empty string also means match anything
            </summary>
            <remarks>Note, this class will automatically change [X] to [A-Z] (provided GENERIC_RESIDUE_SYMBOL = "X")</remarks>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.udtEnzymeMatchSpecType.LeftResidueRegEx">
            <summary>
            RegEx match string for matching the residue to the left of the cleavage point
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.udtEnzymeMatchSpecType.RightResidueRegEx">
            <summary>
            RegEx match string for matching the residue to the right of the cleavage point
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.udtEnzymeMatchSpecType.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="leftResidueRegEx"></param>
            <param name="rightResidueRegEx"></param>
        </member>
        <member name="F:PHRPReader.clsPeptideCleavageStateCalculator.mTerminusSymbols">
            <summary>
            This array holds TERMINUS_SYMBOL_SEQUEST, TERMINUS_SYMBOL_XTANDEM_NTerminus, and TERMINUS_SYMBOL_XTANDEM_CTerminus
            and is useful for quickly checking for the presence of a terminus symbol using a binary search
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideCleavageStateCalculator.EnzymeMatchSpec">
            <summary>
            RegEx patterns for matching cleavage site residues
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideCleavageStateCalculator.TerminusSymbols">
            <summary>
            Array of peptide terminus symbols
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.CleavageStateToShort(PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants)">
            <summary>
            Converts Cleavage State to 0, 1, or 2
            </summary>
            <param name="eCleavageState"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeCleavageState(System.String)">
            <summary>
            Determines the cleavage state of the specified peptide
            </summary>
            <param name="sequenceWithPrefixAndSuffix"></param>
            <returns></returns>
            <remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeCleavageState(System.String,System.String,System.String)">
            <summary>
            Determine the cleavage state of cleanSequence utilizing the rules specified in mEnzymeMatchSpec
            </summary>
            <param name="cleanSequence"></param>
            <param name="prefixResidues"></param>
            <param name="suffixResidues"></param>
            <returns></returns>
            <remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeNumberOfMissedCleavages(System.String)">
            <summary>
            Count the number of missed cleavages in the peptide
            </summary>
            <param name="sequenceWithPrefixAndSuffix"></param>
            <returns></returns>
            <remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.String)">
            <summary>
            Determine the terminus state of the peptide
            </summary>
            <param name="sequenceWithPrefixAndSuffix"></param>
            <returns></returns>
            <remarks>Peptide must have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.Char,System.Char)">
            <summary>
            Determine the terminus state given the prefix and suffix characters
            </summary>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
            <remarks>For example, if the peptide is -.PEPTIDE.G, pass prefix="-" and suffix="G"</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.String,System.String,System.String)">
            <summary>
            Determine the terminus state of the peptide
            </summary>
            <param name="cleanSequence"></param>
            <param name="prefixResidues"></param>
            <param name="suffixResidues"></param>
            <returns></returns>
            <remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ExtractCleanSequenceFromSequenceWithMods(System.String,System.Boolean)">
            <summary>
            Removes all modification symbols (*, #, +, 8, etc.) from the peptide; optionally removes prefix and suffix letters
            </summary>
            <param name="sequenceWithMods"></param>
            <param name="checkForPrefixAndSuffixResidues"></param>
            <returns>Clean peptide sequence</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.GetDefaultEnzymeMatchSpec">
            <summary>
            Returns the default enzyme RegEx match specifications
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SetEnzymeMatchSpec(System.String,System.String)">
            <summary>
            Define custom enzyme match rules using RegEx strings
            </summary>
            <param name="leftResidueRegEx"></param>
            <param name="rightResidueRegEx"></param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SetStandardEnzymeMatchSpec(PHRPReader.clsPeptideCleavageStateCalculator.eStandardCleavageAgentConstants)">
            <summary>
            Select a standard enzyme match rule
            </summary>
            <param name="eStandardCleavageAgent"></param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SplitPrefixAndSuffixFromSequence(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Examines sequenceIn and splits apart into prefix, primary sequence, and suffix
            </summary>
            <param name="sequenceIn">Peptide sequence to examine</param>
            <param name="primarySequence">Primary sequence (output)</param>
            <param name="prefix">Prefix residue (output)</param>
            <param name="suffix">Suffix residue (output)</param>
            <returns> Returns True if success, False if prefix and suffix residues were not found</returns>
            <remarks>If more than one character is present before the first period or after the last period, all characters are returned
            If the peptide starts with ".." it is auto-changed to start with "."
            If the peptide ends with ".." it is auto-changed to end with "."
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideCleavageStateCalculator.TestCleavageRule(System.Char,System.Char)">
            <summary>
            Examines the two residues to see if they represent an expected cleavage point
            </summary>
            <param name="chLeftChar"></param>
            <param name="chRightChar"></param>
            <returns>True if the characters match the currently defined cleavage rule</returns>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPeptideMassCalculator">
            <summary>
            This class will compute the mass of a given peptide sequence.  The sequence
            must consist of only capital letters, though if RemovePrefixAndSuffixIfPresent = True,
            characters up to the first . and after the last . in the sequence will be removed.
            Residue modification information can be supplied by passing an array of modifications
            using the structure udtPeptideSequenceModInfoType
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL">
            <summary>
            Symbol used when the modification is not an isotopic modification
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.MASS_HYDROGEN">
            <summary>
            Monoisotopic mass of hydrogen
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.MASS_OXYGEN">
            <summary>
            Monoisotopic mass of oxygen
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.MASS_PROTON">
            <summary>
            Monoisotopic mass of a proton
            </summary>
            <remarks>This is the mass of hydrogen minus the mass of one electron</remarks>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.MASS_ELECTRON">
            <summary>
            Monoisotopic mass of hydrogen
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.DEFAULT_N_TERMINUS_MASS_CHANGE">
            <summary>
            Default N-terminal mass change (+1.007276)
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.DEFAULT_C_TERMINUS_MASS_CHANGE">
            <summary>
            Default C-terminal mass change (+15.9949)
            </summary>
        </member>
        <member name="T:PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType">
            <summary>
            Peptide sequence mod info
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType.ResidueLocInPeptide">
            <summary>
            Position that the modification occurs; not used by clsPeptideMassCalculator
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType.ModificationMass">
            <summary>
            Modification mass
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType.AffectedAtom">
            <summary>
            Affected atom
            </summary>
            <remarks>
            Set to Nothing or to NO_AFFECTED_ATOM_SYMBOL for positional modifications (including terminus modifications)
            For Isotopic modifications, indicate the atom affected (e.g. C, H, N, O, or S)
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType.ToString">
            <summary>
            Modification mass and residue number
            </summary>
            <returns></returns>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.mAtomicFormulaRegEx">
            <summary>
            Regular expression for parsing an empirical formula
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideMassCalculator.mElementMonoMasses">
            <summary>
            This dictionary tracks element symbols and monoisotopic masses
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideMassCalculator.ChargeCarrierMass">
            <summary>
            Charge carrier mass
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideMassCalculator.ErrorMessage">
            <summary>
            Most recent error message
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPeptideMassCalculator.PeptideCTerminusMass">
            <summary>
            Peptide C-terminus mass
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideMassCalculator.PeptideNTerminusMass">
            <summary>
            Peptide N-terminus mass
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideMassCalculator.RemovePrefixAndSuffixIfPresent">
            <summary>
            If true, look for and remove prefix and suffix residues
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.#cctor">
            <summary>
            Constructor for shared (static) variables
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeMonoistopicMass(PHRPReader.clsEmpiricalFormula)">
            <summary>
            Compute the monoisotopic mass of the given empirical formula
            </summary>
            <param name="empiricalFormula"></param>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeMonoisotopicMass(PHRPReader.clsEmpiricalFormula)">
            <summary>
            Compute the monoisotopic mass of the given empirical formula
            </summary>
            <param name="empiricalFormula"></param>
            <returns></returns>
            <remarks>Throws an exception if an unknown symbol is encountered</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeMonoistopicMass(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String}@)">
            <summary>
            Compute the monoisotopic mass of the compound represented by elementalComposition
            </summary>
            <param name="elementalComposition"></param>
            <param name="unknownSymbols"></param>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeMonoisotopicMass(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String}@)">
            <summary>
            Compute the monoisotopic mass of the compound represented by elementalComposition
            </summary>
            <param name="elementalComposition"></param>
            <param name="unknownSymbols"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String)">
            <summary>
            Compute the mass of peptide sequence sequence (it cannot contain modification symbols)
            </summary>
            <param name="sequence">One letter amino acid symbols (no modification symbols or numbers); can have prefix and suffix letters</param>
            <returns>Monoisotopic mass, or -1 if an error</returns>
            <remarks>
            Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True
            If modification symbols are present, returns -1</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String,System.Int32,PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType[]@)">
            <summary>
            Compute the mass of peptide sequence sequence; uses the information in udtResidueModificationInfo() to determine modification masses
            </summary>
            <param name="sequence"></param>
            <param name="modCount"></param>
            <param name="udtResidueModificationInfo">Array of modified residues; index 0 to modCount-1</param>
            <returns>The computed mass, or -1 if an error</returns>
            <remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String,System.Collections.Generic.List{PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType})">
            <summary>
            Compute the mass of peptide sequence sequence; uses the information in udtResidueModificationInfo() to determine modification masses
            </summary>
            <param name="sequence">One letter amino acid symbols (no modification symbols or numbers)</param>
            <param name="modifiedResidues">List of modified residues</param>
            <returns>The computed mass, or -1 if an error</returns>
            <remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMassNumericMods(System.String)">
            <summary>
            Compute the mass of peptide sequence sequence.  Supports peptide sequences with with numeric mod masses
            Examples of numeric mods:
             R.A+144.102063AS+79.9663PQDLAGGYTSSLAC+57.0215HR.A
             K.Q-17.0265QIEESTSDYDKEK.L
            </summary>
            <param name="sequence"></param>
            <returns></returns>
            <remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ConvoluteMass(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts the m/z value from one charge state to another charge state.  Either charge state can be 0, which means an uncharged peptide
            </summary>
            <param name="massMZ"></param>
            <param name="currentCharge"></param>
            <param name="desiredCharge"></param>
            <returns></returns>
            <remarks>Uses the charge carrier mass defined by ChargeCarrierMass</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ConvoluteMass(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Converts the m/z value from one charge state to another charge state.  Either charge state can be 0, which means an uncharged peptide
            </summary>
            <param name="massMZ">m/z</param>
            <param name="currentCharge">Current charge; if 0, assumes massMZ is the neutral, monoisotopic mass</param>
            <param name="desiredCharge">Desired charge</param>
            <param name="chargeCarrierMass">Charge carrier mass (Default is the mass of a proton)</param>
            <returns></returns>
            <remarks>To return the neutral mass, set desiredCharge to 0</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ConvertAminoAcidSequenceToEmpiricalFormula(System.String)">
            <summary>
            Convert an amino acid sequence into an empirical formula
            </summary>
            <param name="sequence">One letter amino acid symbols (no modification symbols or numbers)</param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidMass(System.Char)">
            <summary>
            Returns the mass of the specified amino acid
            </summary>
            <param name="chAminoAcidSymbol"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidEmpiricalFormula(System.Char)">
            <summary>
            Returns a List with the number of atoms of C, H, N, O, and S in the specified amino acid
            </summary>
            <param name="chAminoAcidSymbol"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidEmpiricalFormula(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new clsEmpiricalFormula instance with the specified number of atoms
            </summary>
            <param name="countC"></param>
            <param name="countH"></param>
            <param name="countN"></param>
            <param name="countO"></param>
            <param name="countS"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.GetAtomicFormulaRegEx(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Create a regex for parsing an empirical formula that optionally contains element counts and optionally contains plus or minus signs
            Examples of supported empirical formulas:
             CHNOS
             C3H3NOS4
             CH23NO-5S+4
            </summary>
            <param name="elementMonoMasses"></param>
            <returns>RegEx with named capture groups ElementSymbol and ElementCount</returns>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.GetElementMonoMasses">
            <summary>
            Return a dictionary of element symbols and element masses
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.GetEmpiricalFormulaComponents(System.String)">
            <summary>
            Parse the given empirical formula to return a dictionary of the elements
            Examples of supported empirical formulas:
             CHNOS
             C3H3NOS4
             CH23NO-5S+4
            </summary>
            <param name="empiricalFormula"></param>
            <returns>EmpiricalFormula instance tracking the element symbols and counts</returns>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.MassToPPM(System.Double,System.Double)">
            <summary>
            Converts massToConvert to ppm, based on the value of currentMZ
            </summary>
            <param name="massToConvert"></param>
            <param name="currentMZ"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.MHToMonoisotopicMass(System.Double)">
            <summary>
            Converts and MH mass to the uncharged (neutral) mass
            </summary>
            <param name="mH"></param>
            <returns></returns>
            <remarks>Equivalent to ConvoluteMass(mH, 1, 0)</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.MonoisotopicMassToMZ(System.Double,System.Int32)">
            <summary>
            Converts an uncharged (neutral) mass to the m/z value for the specified charge
            </summary>
            <param name="monoisotopicMass"></param>
            <param name="desiredCharge"></param>
            <returns></returns>
            <remarks>Equivalent to ConvoluteMass(monoisotopicMass, 0, desiredCharge)</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.PPMToMass(System.Double,System.Double)">
            <summary>
            Converts from a ppm value to a mass value, using the specified m/z as a reference point
            </summary>
            <param name="ppmToConvert"></param>
            <param name="currentMZ"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ResetAminoAcidMasses">
            <summary>
            Reset all of the amino acid masses and atom counts to default values
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ResetAminoAcidToDefault(System.Char)">
            <summary>
            Reset the mass and atom counts of the given amino acid to use default values
            </summary>
            <param name="aminoAcidSymbol">Letter between A and Z</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.ResetTerminusMasses">
            <summary>
            Reset the N and C terminus default mass values
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidAtomCounts(System.Char,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Defines the number of C, H, N, O, S, etc. elements in an amino acid
            </summary>
            <param name="chAminoAcidSymbol">Amino acid symbol</param>
            <param name="elementalComposition">Dictionary where keys are element symbols and values are the element counts</param>
            <returns>True if success, False if an invalid amino acid symbol</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidAtomCounts(System.Char,PHRPReader.clsEmpiricalFormula)">
            <summary>
            Defines the number of C, H, N, O, S, etc. elements in an amino acid
            </summary>
            <param name="chAminoAcidSymbol">>Amino acid symbol</param>
            <param name="empiricalFormula">Empirical formula class</param>
            <returns>True if success, False if an invalid amino acid symbol</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidMass(System.Char,System.Double)">
            <summary>
            Defines a custom mass for an amino acid
            </summary>
            <param name="chAminoAcidSymbol"></param>
            <param name="mass"></param>
            <returns>True if success, False if an invalid amino acid symbol</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideMassCalculator.UpdateAminoAcidStatEntry(System.Byte)">
            <summary>
            Updates an entry in parallel arrays AminoAcidMasses and AminoAcidSymbols
            </summary>
            <param name="aminoAcidIndex"></param>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPeptideModificationContainer">
            <summary>
            This class is used to track modifications that can be applied to peptides
            It handles both residue level modifications and static, peptide-wide modifications
            </summary>
            <remarks>
            Use ReadMassCorrectionTagsFile() and ReadModificationDefinitionsFile() to customize
            the default mass correction tag and modification definition lists
            </remarks>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.DEFAULT_MODIFICATION_SYMBOLS">
            <summary>
            Default modification symbols
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.MASS_DIGITS_OF_PRECISION">
            <summary>
            Digits of precision to round masses to when finding mass correction tags by mass
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.N_TERMINAL_PEPTIDE_MOD_SYMBOL_XTANDEM">
            <summary>
            Symbol used by X!Tandem for tracking a modification at the peptide N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.C_TERMINAL_PEPTIDE_MOD_SYMBOL_XTANDEM">
            <summary>
            Symbol used by X!Tandem for tracking a modification at the peptide C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.N_TERMINAL_PEPTIDE_MOD_SYMBOL_INSPECT">
            <summary>
            Symbol used by Inspect for tracking a modification at the peptide N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.C_TERMINAL_PEPTIDE_MOD_SYMBOL_INSPECT">
            <summary>
            Symbol used by Inspect for tracking a modification at the peptide C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.mDefaultModificationSymbols">
            <summary>
            List of available modification symbols
            </summary>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.mMassCorrectionTags">
            <summary>
            List of known mass correction tags
            </summary>
            <remarks>Keys are mod names, values are mod masses</remarks>
        </member>
        <member name="F:PHRPReader.clsPeptideModificationContainer.mStandardRefinementModifications">
            <summary>
            This array holds modifications that Sequest or XTandem will often use but for
            which the auto-addition method sometimes incorrectly notes
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideModificationContainer.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideModificationContainer.ModificationCount">
            <summary>
            Modification count
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideModificationContainer.Modifications">
            <summary>
            Modification list
            </summary>
        </member>
        <member name="P:PHRPReader.clsPeptideModificationContainer.ConsiderModSymbolWhenFindingIdenticalMods">
            <summary>
            When true, take the mod symbol into account when finding identical mods
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.AddModification(PHRPReader.clsModificationDefinition,System.Boolean)">
            <summary>
            Add modificationDefinition to mModifications
            However, do not add if a duplicate modification
            Furthermore, if everything matches except for .TargetResidues, add the new target residues to the existing, matching mod
            </summary>
            <param name="modificationDefinition"></param>
            <param name="useNextAvailableModificationSymbol"></param>
            <returns>The index of the newly added modification, or the the index of the modification that modificationDefinition matches </returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.AppendStandardRefinementModifications">
            <summary>
            Append standard refinement modifications
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.ClearModifications">
            <summary>
            Clear modifications
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.GenerateGenericModMassName(System.Double)">
            <summary>
            Converts a modification mass to a generic 8 character name
            The name will always start with + or - then will have the modification mass, rounded as necessary to give an 8 character name
            </summary>
            <param name="modificationMass"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.GetBestIntegerBasedMassCorrectionTag(System.Double)">
            <summary>
            Looks for the best match in mIntegerMassCorrectionTagLookup for modificationMass (which should be close to a integer value)
            </summary>
            <param name="modificationMass"></param>
            <returns>The mass correction tag name if a match, otherwise nothing</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.GetModificationByIndex(System.Int32)">
            <summary>
            Get a modification, by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.GetModificationTypeByIndex(System.Int32)">
            <summary>
            Get the modification type, by modification index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not found
            </summary>
            <param name="modificationMass"></param>
            <returns>Mod name, or empty string if no match</returns>
            <remarks>
            Searches known mods using 3 digits of precision, then 2 digits, then 1 digit
            If no match, adds as a new, unknown modification
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double,System.Byte)">
            <summary>
             Find the mass correction tag with the given mass, adding to the unknown modification list if not  found
            </summary>
            <param name="modificationMass"></param>
            <param name="massDigitsOfPrecision"></param>
            <returns>Mod name, or empty string if no match</returns>
            <remarks>
            Searches known mods using massDigitsOfPrecision digits of precision, then massDigitsOfPrecision-1 digits, ... 1 digit
            If no match, adds as a new, unknown modification
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double,System.Byte,System.Boolean)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not found and addToModificationListIfUnknown is true
            </summary>
            <param name="modificationMass"></param>
            <param name="massDigitsOfPrecision"></param>
            <param name="addToModificationListIfUnknown"></param>
            <returns>Mod name, or empty string if no match</returns>
            <remarks>
            Searches known mods using massDigitsOfPrecision digits of precision, then massDigitsOfPrecision-1 digits, ... 1 digit
            If no match, adds as a new, unknown modification
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double,System.Byte,System.Boolean,System.Byte)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not found and addToModificationListIfUnknown is true
            </summary>
            <param name="modificationMass"></param>
            <param name="massDigitsOfPrecision"></param>
            <param name="addToModificationListIfUnknown"></param>
            <param name="massDigitsOfPrecisionLoose"></param>
            <returns>Mod name, or empty string if no match</returns>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupDynamicModificationDefinitionByTargetInfo(System.Char,System.Char,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,System.Boolean@)">
            <summary>
            Looks for a modification of type .DynamicMod or type .UnknownType in mModifications having .ModificationSymbol = modificationSymbol and chTargetResidue in .TargetResidues
            </summary>
            <param name="modificationSymbol"></param>
            <param name="chTargetResidue"></param>
            <param name="eResidueTerminusState"></param>
            <param name="existingModFound"></param>
            <returns>Modification details</returns>
            <remarks>If modificationSymbol does not match any of the mods, a modification with a mass of 0 is returned</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupModificationDefinitionByMass(System.Double,System.Char,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,System.Boolean@,System.Boolean,System.Byte)">
            <summary>
            Looks for an existing modification with the given modification mass and target residues
            </summary>
            <param name="modificationMass"></param>
            <param name="chTargetResidue">
            If defined, returns the first modification with the given mass and containing the residue in .TargetResidues;
            if no match, looks for the first modification with the given mass and no defined .TargetResidues
            </param>
            <param name="eResidueTerminusState"></param>
            <param name="existingModFound"></param>
            <param name="addToModificationListIfUnknown"></param>
            <param name="massDigitsOfPrecision"></param>
            <returns>The best matched modification; if no match is found, returns a newly created modification definition, adding it to mModifications if addToModificationListIfUnknown is True</returns>
            <remarks>If chTargetResidue is nothing, follows similar matching logic, but skips defined modifications with defined .TargetResidues</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupModificationMassByName(System.String,System.Double@)">
            <summary>
            Resolve a modification name to a modification mass
            Checks both selected UniMod names and the names in mMassCorrectionTags
            </summary>
            <param name="modName">Modification name</param>
            <param name="modMass">Monoisotopic mass</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.LookupModificationDefinitionByMassAndModType(System.Double,PHRPReader.clsModificationDefinition.eModificationTypeConstants,System.Char,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,System.Boolean@,System.Boolean,System.Byte)">
            <summary>
            Looks for an existing modification with the given modification mass, modification type, and target residues
            </summary>
            <param name="modificationMass"></param>
            <param name="eModType"></param>
            <param name="chTargetResidue">
            If defined, returns the first modification with the given mass and containing the residue in .TargetResidues;
            if no match, looks for the first modification with the given mass and no defined .TargetResidues</param>
            <param name="eResidueTerminusState"></param>
            <param name="existingModFound"></param>
            <param name="addToModificationListIfUnknown"></param>
            <param name="massDigitsOfPrecision"></param>
            <returns>The best matched modification; if no match is found, returns a newly created modification definition, adding it to mModifications if addToModificationListIfUnknown = True</returns>
            <remarks>If chTargetResidue is nothing, follows similar matching logic, but skips defined modifications with defined .TargetResidues</remarks>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.ReadMassCorrectionTagsFile(System.String,System.Boolean@)">
            <summary>
            Load the mass correction tags file
            </summary>
            <param name="filePath"></param>
            <param name="fileNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.ReadModificationDefinitionsFile(System.String,System.Boolean@)">
            <summary>
            Read a modification definitions file (_ModDefs.txt)
            </summary>
            <param name="filePath"></param>
            <param name="fileNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.ResetOccurrenceCountStats">
            <summary>
            Reset mod occurrence count stats
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.SetDefaultMassCorrectionTags">
            <summary>
            Define the default mass correction tags
            </summary>
        </member>
        <member name="M:PHRPReader.clsPeptideModificationContainer.VerifyModificationPresent(System.Double,System.String,PHRPReader.clsModificationDefinition.eModificationTypeConstants,System.Int32)">
            <summary>
            Verify that a modification is present, adding it if missing
            </summary>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
            <param name="massDigitsOfPrecision"></param>
            <returns>True if the modification was matched or was added; false if an error</returns>
        </member>
        <member name="T:PHRPReader.clsPepToProteinMapInfo">
            <summary>
            Track location of a given peptide in one or more proteins
            </summary>
        </member>
        <member name="T:PHRPReader.clsPepToProteinMapInfo.udtProteinLocationInfo">
            <summary>
            Start and end residue locations in a protein
            </summary>
        </member>
        <member name="F:PHRPReader.clsPepToProteinMapInfo.udtProteinLocationInfo.ResidueStart">
            <summary>
            Start residue (first residue is 1)
            </summary>
        </member>
        <member name="F:PHRPReader.clsPepToProteinMapInfo.udtProteinLocationInfo.ResidueEnd">
            <summary>
            End residue
            </summary>
        </member>
        <member name="F:PHRPReader.clsPepToProteinMapInfo.mProteinMapInfo">
            <summary>
            Dictionary of protein names and residue start/end positions for a given peptide
            </summary>
        </member>
        <member name="P:PHRPReader.clsPepToProteinMapInfo.ProteinCount">
            <summary>
            Number of proteins that contain a given peptide
            </summary>
        </member>
        <member name="P:PHRPReader.clsPepToProteinMapInfo.ProteinMapInfo">
            <summary>
            Dictionary of protein names and residue start/end positions for a given peptide
            </summary>
        </member>
        <member name="M:PHRPReader.clsPepToProteinMapInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName">Protein name</param>
            <param name="residueStart">Location that a peptide starts in the protein</param>
            <param name="residueEnd">Location that a peptide ends in the protein</param>
        </member>
        <member name="M:PHRPReader.clsPepToProteinMapInfo.AddProtein(System.String,System.Int32,System.Int32)">
            <summary>
            Add another peptide to protein mapping for a given peptide
            </summary>
            <param name="proteinName">Protein name</param>
            <param name="residueStart">Location that a peptide starts in the protein</param>
            <param name="residueEnd">Location that a peptide ends in the protein</param>
            <remarks>If an entry already exists for a protein at a given start position, the end position will be updated</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPModSummaryReader">
            <summary>
            ModSummary file reader
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPModSummaryReader.ModificationDefs">
            <summary>
            Modification list
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPModSummaryReader.Success">
            <summary>
            True if the mod summary was successfully loaded
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPModSummaryReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="modSummaryFilePath"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPModSummaryReader.GetModificationMassAsText(System.String)">
            <summary>
            Returns the mass value associated with the given mass correction tag
            </summary>
            <param name="massCorrectionTag"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParser">
            <summary>
            PHRP parser base class
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParser.udtAmbiguousModInfo">
            <summary>
            Tracks ambiguous modifications
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.udtAmbiguousModInfo.ResidueStart">
            <summary>
            First residue the mod could apply to
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.udtAmbiguousModInfo.ResidueEnd">
            <summary>
            Last residue the mod could apply to
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.udtAmbiguousModInfo.ModMassString">
            <summary>
            Modification mass (as a string)
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mDatasetName">
            <summary>
            Dataset name
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mInitialized">
            <summary>
            True if initialized
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mColumnHeaders">
            <summary>
            Column headers in the synopsis file and first hits file
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mCleavageStateCalculator">
            <summary>
            Cleavage state calculator
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mPeptideMassCalculator">
            <summary>
            Peptide mass calculator
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mPeptideHitResultType">
            <summary>
            PHRP result type
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mModInfo">
            <summary>
            Modification info
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPParser.mResultIDToProteins">
            <summary>
            Protein Names for each ResultID
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.ErrorMessages">
            <summary>
            Cached error messages
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.InputFilePath">
            <summary>
            Input file path
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.InputDirectoryPath">
            <summary>
            Input directory path
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.InputFolderPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.MaxProteinsPerPSM">
            <summary>
            Maximum number of proteins to associate with each PSM
            </summary>
            <value></value>
            <returns></returns>
            <remarks>0 means to load all proteins</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PeptideHitResultType">
            <summary>
            Peptide hit result type; Sequest, XTandem, Inspect, or MSGFDB
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PepToProteinMap">
            <summary>
            Peptide to protein map file name
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.ResultToSeqMap">
            <summary>
            Returns the cached mapping between ResultID and SeqID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.SeqInfo">
            <summary>
            Returns the cached sequence info, where key is SeqID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.SeqToProteinMap">
            <summary>
            Returns the cached sequence to protein map information
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.WarningMessages">
            <summary>
            Cached warning messages
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParser.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean)">
            <summary>
            Initialize the parser for the given dataset, input file, and result type
            </summary>
            <param name="datasetName">Dataset Name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="ePeptideHitResultType">Peptide Hit Results file type</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks>If inputFilePath is an empty string, the functions that solely depend on dataset name will be callable, but data related functions will not be callable</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Initialize the parser for the given dataset, input file, and result type
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="ePeptideHitResultType"></param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks>If inputFilePath is an empty string, the functions that solely depend on dataset name will be callable, but data related functions will not be callable</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.InitializeParser(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Initialize the parser for the given dataset and input file
            </summary>
            <param name="datasetName">Dataset Name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="ePeptideHitResultType">Peptide Hit Results file type</param>
            <param name="startupOptions">Startup options</param>
            <remarks>
            If inputFilePath is an empty string,  the functions that solely depend on dataset name will be callable, but data related functions will not be callable
            startupOptions.LoadModsAndSeqInfo controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read
            Setting startupOptions.MaxProteinsPerPSM to a non-zero value will limit the number of proteins that are tracked
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.GetParser(System.String)">
            <summary>
            Returns the appropriate PHRPParser class based on the input file name; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="inputFilePath">Input file path</param>
            <remarks>Throws an exception if unable to auto-determine the input file type or dataset name from inputFilePath</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.GetParser(System.String,System.Boolean)">
            <summary>
            Returns the appropriate PHRPParser class based on the input file name
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks>Throws an exception if unable to auto-determine the input file type or dataset name from inputFilePath</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.GetParser(System.String,System.String,System.Boolean)">
            <summary>
            Returns the appropriate PHRPParser class based on the input file name
            </summary>
            <param name="inputFilePath">Input file path</param>
            ''' <param name="datasetName">Dataset Name</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks>Throws an exception if unable to auto-determine the input file type from inputFilePath</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.GetParser(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean)">
            <summary>
            Returns the appropriate PHRPParser class based on ePeptideHitResultType
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="datasetName">Dataset Name</param>
            <param name="ePeptideHitResultType">Peptide Hit Results file type</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.DefineColumnHeaders">
            <summary>
            Define header names for the PHRP synopsis or first hits file for the given tool
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.GetColumnHeaderNames">
            <summary>
            List of header names for the PHRP synopsis or first hits file for the given tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified parameter file
            Also reads the Tool_Version_Info file in the same directory (if present)
            </summary>
            <param name="searchEngineParamFileName">Name of the parameter file to parse (must reside in InputDirectoryPath)</param>
            <param name="searchEngineParams">Search engine parameters class (output)</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.AddHeaderColumn(System.String)">
            <summary>
            Add a PHRP synopsis or first hits header column to mColumnHeaders
            </summary>
            <param name="columnName"></param>
            <remarks>
            The column index will be set to mColumnHeaders.Count
            That value will be updated by ParseColumnHeaders
            </remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.AddScore(PHRPReader.clsPSM,System.String[],System.String)">
            <summary>
            Add a score to a PSM
            </summary>
            <param name="psm"></param>
            <param name="columns"></param>
            <param name="scoreColumnName"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ClearErrors">
            <summary>
            Clear any cached error messages
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ClearWarnings">
            <summary>
            Clear any cached warning messages
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ExtractAmbiguousMods(System.String)">
            <summary>
            Look for ambiguous mods in sequenceWithMods
            For example, -30.09 in I.(TIIQ)[-30.09]APQGVSLQYTSR.Q
            </summary>
            <param name="sequenceWithMods"></param>
            <returns></returns>
            <remarks>List of ambiguous mods, where the keys are the start residues and the values are the ambiguous mod info</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.FinalizePSM(PHRPReader.clsPSM)">
            <summary>
            Finalize the PSM by updating the clean sequence, updating mod info, and updating the sequence info
            </summary>
            <param name="psm"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.GetColumnMapFromHeaderLine``1(System.Collections.Generic.List{System.String},System.Collections.Generic.SortedDictionary{System.String,``0})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by headerColumnInfo
            Populates a dictionary mapping a PHRPReader enum to the 0-based index in columnNames
            </summary>
            <param name="headerNames">List of column names from the header line of a data file</param>
            <param name="headerColumnInfo">Dictionary mapping standard header column names to a PHRPReader enum (e.g. MSGFPlusSynFileColumns)</param>
            <returns>Dictionary mapping the PHRPReader enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.HandleException(System.String,System.Exception)">
            <summary>
            Report an exception as an error
            </summary>
            <param name="baseMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.IsNumber(System.String)">
            <summary>
            Examines the string to determine if it is numeric
            </summary>
            <param name="data"></param>
            <returns>True if a number, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.LoadModSummary">
            <summary>
            Reads the data in modSummaryFilePath.  Populates mModInfo with the modification names, masses, and affected residues
            </summary>
            <returns>True if success; false if an error</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.NumToStringPlusMinus(System.Double,System.Int32)">
            <summary>
            Formats a number so that it begins with a + sign if positive or a - sign if negative
            Rounds the number to the specified number of digits, trimming off trailing zeros
            Example output: +79.9663 or -17.016
            </summary>
            <param name="value"></param>
            <param name="digitsOfPrecision"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ParseColumnHeaders(System.String[])">
            <summary>
            Parse the column names in splitLine and update the local column header mapping
            </summary>
            <param name="splitLine"></param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ParseKeyValueSetting(System.String,System.Char)">
            <summary>
            Splits text on text, returning a KeyValuePair object where the key is the text to the left of the delimiter and the value is the text to the right
            </summary>
            <param name="text"></param>
            <param name="chDelimiter"></param>
            <returns>KeyValuePair with key and value from text; key and value will be empty if chDelimiter was not found</returns>
            <remarks>Automatically trims whitespace</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ParseKeyValueSetting(System.String,System.Char,System.String)">
            <summary>
            Splits text on text, returning a KeyValuePair object where the key is the text to the left of the delimiter and the value is the text to the right
            </summary>
            <param name="text"></param>
            <param name="chDelimiter"></param>
            <param name="commentChar">If defined, looks for this character in the value portion of the setting and removes that character plus any text after it</param>
            <returns>KeyValuePair with key and value from text; key and value will be empty if chDelimiter was not found</returns>
            <remarks>Automatically trims whitespace</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ReadKeyValuePairSearchEngineParamFile(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsSearchEngineParameters)">
            <summary>
            Read a Search Engine parameter file where settings are stored as key/value pairs
            </summary>
            <param name="searchEngineName">Search engine name (e.g. MS-GF+)</param>
            <param name="searchEngineParamFileName">Search engine parameter file name (must exist in InputDirectoryPath)</param>
            <param name="ePeptideHitResultType">PeptideHitResultType (only important if reading a ModA parameter file</param>
            <param name="searchEngineParams">SearchEngineParams container class (must be initialized by the calling function)</param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ReadKeyValuePairSearchEngineParamFile(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsSearchEngineParameters,System.String@,System.String@)">
            <summary>
            Read a Search Engine parameter file where settings are stored as key/value pairs
            </summary>
            <param name="searchEngineName">Search engine name (e.g. MS-GF+)</param>
            <param name="paramFilePath">Search engine parameter file path</param>
            <param name="ePeptideHitResultType">PeptideHitResultType (only important if reading a ModA parameter file</param>
            <param name="searchEngineParams">SearchEngineParams container class (must be initialized by the calling function)</param>
            <param name="errorMessage">Output: error message</param>
            <param name="warningMessage">Output: warning message</param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ReadSearchEngineVersion(PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsSearchEngineParameters)">
            <summary>
            Determine the search engine version using a Tool_Version_Info file
            </summary>
            <param name="ePeptideHitResultType"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ReportError(System.String)">
            <summary>
            Report an error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ReportWarning(System.String)">
            <summary>
            Report a warning
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.ShowMessage(System.String)">
            <summary>
            Report a status message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPParser.UpdatePSMUsingSeqInfo(PHRPReader.clsPSM)">
            <summary>
            Updates the theoretical (computed) monoisotopic mass of currentPSM using mResultToSeqMap and mSeqInfo
            Also updates the modification info
            Also updates SeqID
            </summary>
            <param name="currentPSM"></param>
            <returns>True if success, False if currentPSM.ResultID is not found in mResultToSeqMap</returns>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserInspect">
            <summary>
            PHRP parser for Inspect
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserInspect.InspectSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsInspectResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserInspect.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum InspectSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified Inspect parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserInspect.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMODa">
            <summary>
            PHRP parser for MODa
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMODa.MODaSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsMODaResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODa.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MODaSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified MODa parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODa.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMODPlus">
            <summary>
            PHRP parser for MOD+
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMODPlus.MODPlusSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsMODPlusResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMODPlus.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MODPlusSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified MODp parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMODPlus.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSAlign">
            <summary>
            PHRP parser for MSAlign
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSAlign.MSAlignSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsMSAlignResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSAlign.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MSAlignSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified MSAlign parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSAlign.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSGFDB">
            <summary>
            Old PHRP parser for MS-GF+
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSGFPlus">
            <summary>
            PHRP parser for MS-GF+
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSGFPlus.MSGFPlusSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsMSGFPlusResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSGFPlus.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
            <summary>
            Determines the precursor mass tolerance for either MS-GF+, MSPathFinder, or TopPIC
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <param name="resultType"></param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetCustomChargeCarrierMass(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Look for MS-GF+ parameter ChargeCarrierMass
            If defined, update chargeCarrierMass with the associated mass value and return True
            Otherwise return false
            </summary>
            <param name="searchEngineParams"></param>
            <param name="chargeCarrierMass"></param>
            <returns></returns>
            <remarks>This function is used by clsPHRPMassErrorValidator in the Analysis Manager</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
            <remarks>This includes headers for synopsis files from both MSGFDB and MS-GF+</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MSGFPlusSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified MSGFDB (aka MS-GF+) parameter file
            </summary>
            <param name="searchEngineParamFilePath"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSGFPlus.UpdateMassCalculatorMasses(System.String,PHRPReader.clsMSGFPlusParamFileModExtractor,PHRPReader.clsPeptideMassCalculator,System.String@)">
            <summary>
            Look for custom amino acid definitions in the MS-GF+ parameter file
            If any are found, update the amino acid mass values in the PeptideMassCalculator instance
            </summary>
            <param name="searchEngineParamFilePath"></param>
            <param name="modFileProcessor"></param>
            <param name="peptideMassCalculator"></param>
            <param name="errorMessage"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSPathFinder">
            <summary>
            PHRP parser for MSPathfinder
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserMSPathFinder.MSPathFinderSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsMSPathFinderResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserMSPathFinder.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MSPathFinderSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Empty string, since MSPathFinder does not have a first-hits file; just the _syn.txt file</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified MSPathFinder parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserMSPathFinder.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserSequest">
            <summary>
            PHRP parser for SEQUEST
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserSequest.SequestSynopsisFileColumns">
            <summary>
            These columns correspond to the tab-delimited file created directly by SEQUEST
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserSequest.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.DefineColumnHeaders">
            <summary>
            Define column header names for SEQUEST synopsis and first hits files
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum SequestSynopsisFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified Sequest parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserSequest.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserTopPIC">
            <summary>
            PHRP parser for TopPIC
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserTopPIC.TopPICSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsTopPICResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserTopPIC.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum TopPICSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified TopPIC parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserTopPIC.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPParserXTandem">
            <summary>
            PHRP parser for X!Tandem
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPParserXTandem.XTandemSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by clsXTandemResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPParserXTandem.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.DeterminePrecursorMassTolerance(PHRPReader.clsSearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum XTandemSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Empty string, since X!Tandem does not have a first-hits file; just the _xt.txt file</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetAdditionalSearchEngineParamFileNames(System.String)">
            <summary>
            Additional search engine parameter file names
            </summary>
            <param name="searchEngineParamFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.LoadSearchEngineParameters(System.String,PHRPReader.clsSearchEngineParameters@)">
            <summary>
            Parses the specified X!Tandem parameter file
            Note that the file specified by parameter "list path, default parameters" will also be auto-parsed (if found in directory mInputDirectoryPath)
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.ParseXTandemParamFile(System.String,PHRPReader.clsSearchEngineParameters,System.Boolean,System.Boolean)">
            <summary>
            Parse an X!Tandem parameter file
            </summary>
            <param name="paramFileName"></param>
            <param name="searchEngineParams"></param>
            <param name="lookForDefaultParamsFileName"></param>
            <param name="determineFastaFileNameUsingTaxonomyFile"></param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPParserXTandem.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">clsPSM object (output)</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if success, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPReader">
             <summary>
              This class reads a tab-delimited text file (created by the Peptide File Extractor or by PHRP)
              and returns the data for each peptide hit search result
            
              It also integrates MSGF results with the peptide hit search results
              And, it integrates scan stats values (to determine elution time)
             </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.PROTEIN_TERMINUS_SYMBOL_PHRP">
            <summary>
            Symbol used by PHRP to indicate a protein terminus
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPReader.ePeptideHitResultType">
            <summary>
            Peptide hit results type
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPReader.ePHRPReaderErrorCodes">
            <summary>
            PHRP Reader error codes
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.mFastReadMode">
            <summary>
            When set to true, calls to MoveNext will read the next data line, but will skip several additional processing steps for performance reasons
            </summary>
            <remarks>If the peptide is a peptide of interest, you must call FinalizeCurrentPSM after calling .MoveNext()</remarks>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.mFindParentIonOnlyNonMsx">
            <summary>
            RegEx to extract parent ions from filter strings that do not have Full msx
            </summary>
            <remarks>Shared (aka static) only to speed up unit tests</remarks>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.mFindParentIonOnlyMsx">
            <summary>
            RegEx to extract parent ions from filter strings that have Full msx
            </summary>
            <remarks>Shared (aka static) only to speed up unit tests</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.CanRead">
            <summary>
            Returns True if the input file was successfully opened and data remains to be read
            </summary>
            <value></value>
            <returns>True if the file is readable</returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.CurrentPSM">
            <summary>
            Returns the most recently loaded PSM
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.CurrentPSMSeqInfo">
            <summary>
            Returns the most recently loaded PSM's sequence info (if available)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.DatasetName">
            <summary>
            Dataset name (auto-determined based on the input filename)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.EchoMessagesToConsole">
            <summary>
            If True, will display messages at the console
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ErrorMessages">
            <summary>
            Cached error messages
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ErrorMessage">
            <summary>
            Current error message
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.FastReadMode">
            <summary>
            Used to enable fast read mode when calling MoveNext
            When FastReadMode is True, you should call FinalizeCurrentPSM after calling MoveNext to populate the remaining fields if the peptide is a peptide of interest
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Once FastReadMode is enabled it cannot be turned off (this is a safety measure due to how data is cached)</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.LoadModsAndSeqInfo">
            <summary>
            If True, looks for and loads the modification definitions from the _ModSummary.txt file associated with the input file
            Also reads the SeqInfo and related files
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.LoadMSGFResults">
            <summary>
            If true, loads the MSGF SpecProb values from the _MSGF.txt file associated with the input file
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.LoadScanStatsData">
            <summary>
            If True, loads the MASIC _ScanStats.txt file
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.MaxProteinsPerPSM">
            <summary>
            The maximum number of proteins that will be tracked for each PSM
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ModSummaryFileLoaded">
            <summary>
            Returns True if the ModSummary file was successfully loaded
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.PeptideHitResultType">
            <summary>
            Peptide hit result type; Sequest, XTandem, Inspect, or MSGFPlus (aka MS-GF+)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.PercentComplete">
            <summary>
            Returns a number between 0 and 100 indicating the percentage of the source file that has been read
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.PHRPParser">
            <summary>
            Returns the PHRP Parser object
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ResultToSeqMap">
            <summary>
            Returns the cached mapping between ResultID and SeqID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.SeqInfo">
            <summary>
            Returns the cached sequence info, where key is SeqID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.SeqToProteinMap">
            <summary>
            Returns the cached sequence to protein map information
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.SkipDuplicatePSMs">
            <summary>
            When True, skips near-duplicate lines in the PHRP data file (lines with the same peptide in the same scan, but different protein names)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.WarningMessages">
            <summary>
            Cached warning messages
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="eResultType">Source file PeptideHit result type</param>
            <remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <param name="loadScanStats">If True, looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="startupOptions">Startup options</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean,System.Boolean)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            ''' <param name="eResultType">Source file PeptideHit result type</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="eResultType">Source file PeptideHit result type</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <param name="loadScanStats">If True, looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="eResultType">Source file PeptideHit result type</param>
            <param name="startupOptions">Startup options</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoSwitchToFHTIfRequired(System.String,System.String)">
            <summary>
            Updates filePath to have _fht instead of _syn if filePath contains_syn yet basePHRPFileName contains _fht
            </summary>
            <param name="filePath"></param>
            <param name="basePHRPFileName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoSwitchToLegacyMSGFDBIfRequired(System.String,System.String)">
            <summary>
            Updates filePath to have _msgfdb instead of _msgfplus if basePHRPFileName contains _msgfdb
            </summary>
            <param name="filePath"></param>
            <param name="basePHRPFileName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ClearErrors">
            <summary>
            Clear any cached error messages
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ClearWarnings">
            <summary>
            Clear any cached warning messages
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.InitializeClass(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
            <summary>
            Initialize the class
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="eResultType">Source file PeptideHit result type</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AddFileToFind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType}},PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Func{System.String,System.String},System.String)">
            <summary>
            Add a PHRP file to find when auto-determining the input file type
            </summary>
            <param name="filesToFind"></param>
            <param name="resultType"></param>
            <param name="getPhrpFilenameMethod"></param>
            <param name="datasetName"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AddFileToFind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType}},PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Add a PHRP file to find when auto-determining the input file type
            </summary>
            <param name="filesToFind"></param>
            <param name="resultType"></param>
            <param name="phrpFilename"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AddSuffixToCheck(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType}},PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Add a filename suffix to check when auto-determining the input file type
            </summary>
            <param name="suffixesToCheck"></param>
            <param name="resultType"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="eMatchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.String)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetName">Dataset name</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetName">Dataset name</param>
            <param name="eMatchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.Collections.Generic.List{System.String},PHRPReader.clsPHRPReader.ePeptideHitResultType@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the given list of datasets in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetNames">List of dataset names to search for</param>
            <param name="eMatchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String)">
            <summary>
            Auto-determine the dataset name using the input file path
            </summary>
            <param name="filePath"></param>
            <returns>Dataset name</returns>
            <remarks>Returns an empty string if unable to determine the dataset name</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
            <summary>
            Auto-determine the dataset name using the input file path and specified PeptideHit result type
            </summary>
            <param name="filePath"></param>
            <param name="eResultType"></param>
            <returns>Dataset name</returns>
            <remarks>Returns an empty string if unable to determine the dataset name</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineResultType(System.String)">
            <summary>
            Determine the PeptideHit result type given the input file path
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ConvertModsToNumericMods(System.String,System.String@,System.Collections.Generic.List{PHRPReader.clsAminoAcidModInfo}@)">
            <summary>
            Look for dynamic mod symbols in the peptide sequence; replace with the corresponding mod masses
            Note that if the _SeqInfo.txt file is available, this function will not be used
            </summary>
            <param name="peptide"></param>
            <param name="peptideWithNumericMods">Peptide with numeric mods (output)</param>
            <param name="peptideMods">List of modified amino acids (output)</param>
            <returns>True if success, false if an error</returns>
            <remarks>peptideWithNumericMods will look like R.TDM+15.9949ESALPVTVLSAEDIAK.T</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindModSummaryFile(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ModSummary file for the given input file
            </summary>
            <param name="peptideHitResultType">PHRP Result Type of the input file</param>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="modSummaryFileNamePreferred">Output: preferred mod summary filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindModSummaryFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ModSummary file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="modSummaryFileName">Expected mod summary filename</param>
            <param name="modSummaryFileNamePreferred">Output: preferred mod summary filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindResultToSeqMapFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ResultToSeqMap file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="resultToSeqMapFileName">Expected ResultToSeqMap filename</param>
            <param name="resultToSeqMapFileNamePreferred">Output: preferred ResultToSeqMap filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindPHRPFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the given PHRP result file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="fileNameToFind">Expected PHRP result filename</param>
            <param name="preferredName">Output: preferred PHRP result filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetCollisionMode(System.String)">
            <summary>
            Determines the collision mode using the Scan Type name
            </summary>
            <param name="scanTypeName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetMSGFFileName(System.String)">
            <summary>
            Returns the filename of the MSGF file that corresponds to synopsisOrFirstHitsFileName
            </summary>
            <param name="synopsisOrFirstHitsFileName">Filename (or full path) to the synopsis or first-hits file</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPeptideHitResultType(System.String)">
            <summary>
            Get the peptide hit result type for the given result type name
            </summary>
            <param name="ResultTypeName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPAuxiliaryFileSuffixes">
            <summary>
            Get the list of auxiliary file suffixes
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPFirstHitsFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default first-hits file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPModSummaryFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default ModSummary file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPPepToProteinMapFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default PepToProtMap file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPProteinModsFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default ProteinMods file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPSynopsisFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default Synopsis file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPResultToSeqMapFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default ResultToSeq Map file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPSeqInfoFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default SeqInfo file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPSeqToProteinMapFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Returns the default SeqToProtein Map file name for the given PeptideHit result type
            </summary>
            <param name="eResultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetScanStatsFilename(System.String)">
            <summary>
            Get the ScanStats filename for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetExtendedScanStatsFilename(System.String)">
            <summary>
            Get the extended ScanStats filename for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetToolVersionInfoFilename(PHRPReader.clsPHRPReader.ePeptideHitResultType)">
            <summary>
            Get the tool version info filename for the given analysis tool
            </summary>
            <param name="eResultType"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.IsLetterAtoZ(System.Char)">
            <summary>
            Returns true if the character is a letter between A and Z or a and z
            </summary>
            <param name="chChar">Character to examine</param>
            <returns></returns>
            <remarks>The Char.IsLetter() function returns True for "º" and various other Unicode ModifierLetter characters; use this function to only return True for normal letters between A and Z</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.IsNumber(System.String)">
            <summary>
            Examines the string to determine if it is numeric
            </summary>
            <param name="data"></param>
            <returns>True if a number, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnIndex(System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Returns the index of the indicated column, as tracked by columnHeaders
            </summary>
            <param name="columnName"></param>
            <param name="columnHeaders"></param>
            <returns>Column index, or -1 if not found</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnIndex(System.Enum,System.Collections.Generic.SortedDictionary{System.Enum,System.Int32})">
            <summary>
            Returns the index of the indicated column, as tracked by columnHeaders
            </summary>
            <param name="columnEnum"></param>
            <param name="columnHeaders"></param>
            <returns>Column index, or -1 if not found</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; an empty string if the specific column name is not recognized</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.String)">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; valueIfMissing if the specific column name is not recognized</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.Enum,System.Collections.Generic.SortedDictionary{System.Enum,System.Int32},System.String)">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; valueIfMissing if the specific column name is not recognized</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Returns the value stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Double)">
            <summary>
            Returns the value stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ParseColumnHeaders(System.String[],System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Updates the column name to column index mapping in columnHeaders
            </summary>
            <param name="dataColumns">Column names read from the input file</param>
            <param name="columnHeaders">Column mapping dictionary object to update</param>
            <remarks>The SortedDictionary object should be instantiated using a case-insensitive comparer, i.e. (StringComparer.OrdinalIgnoreCase)</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.MoveNext">
            <summary>
            Reads the next line from a synopsis file or first hits file
            </summary>
            <returns>True if a line was read, false if not more data is available</returns>
            <remarks>When FastReadMode is True, you should call FinalizeCurrentPSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ExtractParentIonMzFromFilterText(System.String,System.Double@)">
            <summary>
            This function extracts the Parent Ion m/z from the filter string
            </summary>
            <param name="filterText"></param>
            <param name="parentIonMz"></param>
            <returns>True if parsing successful</returns>
            <remarks>The original version of this code is in ThermoRawFileReader.XRawFileIO.ExtractParentIonMZFromFilterText(string, out double)</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FinalizeCurrentPSM">
            <summary>
            When FastReadMode is True, first call MoveNext to read the peptide scores.
            Then, if the peptide is a peptide of interest, call this function to finalize any processing steps that were skipped.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ReadModSummaryFile(System.String,System.Collections.Generic.IDictionary{System.Char,PHRPReader.clsModificationDefinition},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{PHRPReader.clsModificationDefinition}})">
            <summary>
            Reads the data in modSummaryFilePath.  Populates dynamicMods and staticMods with the modification definitions
            </summary>
            <param name="modSummaryFilePath">Path to the PHRP Mod Summary file to read</param>
            <param name="dynamicMods">List with mod symbols as the key and the corresponding mod mass</param>
            <param name="staticMods">List with amino acid names as the key and the corresponding mod mass</param>
            <returns>True if success; false if an error</returns>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.disposedValue">
            <summary>
            Used to detect redundant calls
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.Dispose(System.Boolean)">
            <summary>
            Dispose of this class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.Dispose">
            <summary>
            This code added by Visual Studio to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPSeqMapReader">
            <summary>
            PHRP SeqMap reader
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.DatasetName">
            <summary>
            Dataset name
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.InputDirectoryPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.InputFolderPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.MaxProteinsPerSeqID">
            <summary>
            Max proteins to track for each SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.PeptideHitResultType">
            <summary>
            PHRP result type
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.PepToProteinMapFilename">
            <summary>
            PepToProtMap filename
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.ResultToSeqMapFilename">
            <summary>
            ResultToSeqMap filename
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPSeqMapReader.SeqToProteinMapFilename">
            <summary>
            SeqToProteinMap filename
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input file path</param>
            <param name="ePeptideHitResultType">Peptide Hit result type</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.#ctor(System.String,System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input file path</param>
            <param name="ePeptideHitResultType">Peptide Hit result type</param>
            <param name="phrpDataFileName">The base PHRP data file name; used when calling AutoSwitchToLegacyMSGFDBIfRequired and AutoSwitchToFHTIfRequired</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="resultToSeqMapFilename">ResultToSeqMap filename</param>
            <param name="seqToProteinMapFilename"></param>
            <param name="seqInfoFilename">SeqInfo filename</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.GetProteinMapping(System.Collections.Generic.SortedList{System.Int32,System.Int32},System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.clsProteinInfo}},System.Collections.Generic.SortedList{System.Int32,PHRPReader.clsSeqInfo})">
            <summary>
            Load the mapping between ResultID and Protein Name
            </summary>
            <param name="resultToSeqMap">ResultToSeqMap list (output); keys are ResultID, Values as SeqID</param>
            <param name="seqToProteinMap">SeqToProteinMap list (output); keys are SeqID, Values are list of clsProteinInfo objects</param>
            <param name="seqInfo">SeqInfo list (output); keys are SeqID, Values are seq details stored in clsSeqInfo objects</param>
            <returns>True if success, false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.GetProteinMapping(System.Collections.Generic.SortedList{System.Int32,System.Int32},System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.clsProteinInfo}},System.Collections.Generic.SortedList{System.Int32,PHRPReader.clsSeqInfo},System.Collections.Generic.Dictionary{System.String,PHRPReader.clsPepToProteinMapInfo})">
            <summary>
            Load the mapping between ResultID and Protein Name
            </summary>
            <param name="resultToSeqMap">ResultToSeqMap list (output); keys are ResultID, Values as SeqID</param>
            <param name="seqToProteinMap">SeqToProteinMap list (output); keys are SeqID, Values are list of clsProteinInfo objects</param>
            <param name="seqInfo">SeqInfo list (output); keys are SeqID, Values are seq details stored in clsSeqInfo objects</param>
            <param name="pepToProteinMap">PepToProteinMap list (output); keys are clean peptide sequences (no mods), Values are Protein name and residue start/end locations for the peptide</param>
            <returns>True if success, false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.LoadPepToProtMapData(System.String,System.Collections.Generic.IDictionary{System.String,PHRPReader.clsPepToProteinMapInfo})">
            <summary>
            Load the Peptide to Protein mapping using the specified PHRP result file
            </summary>
            <param name="filePath"></param>
            <param name="pepToProteinMap">Peptide to protein mapping</param>
            <returns></returns>
            <remarks>The PepToProtMap file contains Residue_Start and Residue_End columns</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.LoadResultToSeqMapping(System.String,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Load the Result to Seq mapping using the specified PHRP result file
            </summary>
            <param name="filePath"></param>
            <param name="resultToSeqMap">Result to sequence mapping</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.LoadSeqInfo(System.String,System.Collections.Generic.IDictionary{System.Int32,PHRPReader.clsSeqInfo})">
            <summary>
            Load the sequence info
            </summary>
            <param name="filePath"></param>
            <param name="seqInfo">Sequences</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPSeqMapReader.LoadSeqToProteinMapping(System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.List{PHRPReader.clsProteinInfo}})">
            <summary>
            Load the Sequence to Protein mapping using the specified PHRP result file
            </summary>
            <param name="filePath"></param>
            <param name="seqToProteinMap">Sequence to protein map</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsPHRPStartupOptions">
            <summary>
            PHRP Startup options
            </summary>
            <remarks>Use these options to define load behavior to be used when instantiating PHRP reader</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.LoadModsAndSeqInfo">
            <summary>
            If true, load the modification and SeqInfo data
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.LoadMSGFResults">
            <summary>
            If true, load MSGF results (not MS-GF+)
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.LoadScanStatsData">
            <summary>
            If true, load ScanStats data
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.MaxProteinsPerPSM">
            <summary>
            Maximum number of proteins to associate with each PSM
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Set to 0 to load all proteins</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.PeptideMassCalculator">
            <summary>
            Use this to override the default peptide mass calculator class;
            this is useful if custom amino acids are in use
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPStartupOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PHRPReader.clsProteinInfo">
            <summary>
            Protein (or peptide) metadata
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.ProteinName">
            <summary>
            Protein name
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.Description">
            <summary>
            Protein description
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.CleavageState">
            <summary>
            Cleavage state of a protein fragment
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.ResidueStart">
            <summary>
            Residue number in the protein at which this sequence starts
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.ResidueEnd">
            <summary>
            Residue number in the protein at which this sequence ends
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.SeqID">
            <summary>
            Sequence ID
            </summary>
        </member>
        <member name="P:PHRPReader.clsProteinInfo.TerminusState">
            <summary>
            Terminus state of a protein fragment
            </summary>
        </member>
        <member name="M:PHRPReader.clsProteinInfo.#ctor(System.String,System.Int32,PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants,PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName"></param>
            <param name="seqID"></param>
            <param name="cleavageState"></param>
            <param name="terminusState"></param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsProteinInfo.#ctor(System.String,System.String,System.Int32,PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants,PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName"></param>
            <param name="proteinDescription"></param>
            <param name="seqID"></param>
            <param name="cleavageState"></param>
            <param name="terminusState"></param>
        </member>
        <member name="M:PHRPReader.clsProteinInfo.#ctor(System.String,System.String,System.Int32,PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants,PHRPReader.clsPeptideCleavageStateCalculator.ePeptideTerminusStateConstants,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName"></param>
            <param name="proteinDescription"></param>
            <param name="seqID"></param>
            <param name="cleavageState"></param>
            <param name="terminusState"></param>
            <param name="proteinResidueStart"></param>
            <param name="proteinResidueEnd"></param>
        </member>
        <member name="M:PHRPReader.clsProteinInfo.UpdateLocationInProtein(System.Int32,System.Int32)">
            <summary>
            Update the start/end residues for this protein (or peptide)
            </summary>
            <param name="proteinResidueStart"></param>
            <param name="proteinResidueEnd"></param>
        </member>
        <member name="M:PHRPReader.clsProteinInfo.ToString">
            <summary>
            Protein name
            </summary>
            <returns></returns>
        </member>
        <member name="T:PHRPReader.clsPSM">
            <summary>
            This class tracks the details for a peptide hit search result
            (typically loaded from a tab-delimited text file created by the Peptide File Extractor or by PHRP)
            </summary>
        </member>
        <member name="F:PHRPReader.clsPSM.UNKNOWN_COLLISION_MODE">
            <summary>
            Unknown collision mode
            </summary>
        </member>
        <member name="F:PHRPReader.clsPSM.mPeptideWithNumericMods">
            <summary>
            Peptide sequence where modified residues have the modification mass indicated as a number
            Example: R.N+144.102063SNPVIAELSQAINSGTLLSK+144.102063PS+79.9663PPLPPK+144.102063.R
            </summary>
        </member>
        <member name="F:PHRPReader.clsPSM.mProteins">
            <summary>
            Protein names
            </summary>
            <remarks>Note that names are case-sensitive</remarks>
        </member>
        <member name="F:PHRPReader.clsPSM.mProteinDetails">
            <summary>
            Dictionary with info on each protein, including name, description, cleavage state, terminus state, residue start, and residue end
            </summary>
        </member>
        <member name="F:PHRPReader.clsPSM.mAdditionalScores">
            <summary>
            Dictionary tracking additional, tool-specific scores
            </summary>
        </member>
        <member name="P:PHRPReader.clsPSM.AdditionalScores">
            <summary>
            Returns a dictionary with additional search engine scores stored as key/value pairs
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Update scores using SetScore</remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.Charge">
            <summary>
            Assumed charge of the spectrum in which this peptide was identified
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.CleavageState">
            <summary>
            Peptide cleavage state (with regards to ProteinFirst)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            CleavageState, NumMissedCleavages, and NumTrypticTerminii are typically populated using UpdateCleavageInfo
            </remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.CollisionMode">
            <summary>
            Collision mode (CID, ETD, HCD)
            PepXML allows this to be CID, ETD, ECD, ETD/CID, or HCD
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.DataLineText">
            <summary>
            Single line of data read from a PHRP data file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPSM.ElutionTimeMinutes">
            <summary>
            Elution time (in minutes) of the spectrum
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.MassErrorDa">
            <summary>
            Mass difference, in daltons, between the monoisotopic mass of the precursor ion and the calculated (theoretical) monoisotopic mass of the peptide
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.MassErrorPPM">
            <summary>
            Mass difference, in ppm, between the monoisotopic mass of the precursor ion and the calculated (theoretical) monoisotopic mass of the peptide
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.ModifiedResidues">
            <summary>
            List of modified residues
            </summary>
            <value></value>
            <returns></returns>
            <remarks>A given residue is allowed to have more than one modification</remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.MSGFSpecEValue">
            <summary>
            MSGF Spectral E-Value associated with this peptide (aka SpecEValue or SpecProb)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            Ranges from 0 to 1, where 0 is the best score and 1 is the worse score
            Stored as a string to preserve formatting
            </remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.MSGFSpecProb">
            <summary>
            MSGF Spectral E-Value associated with this peptide (aka SpecEValue or SpecProb)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            Ranges from 0 to 1, where 0 is the best score and 1 is the worse score
            Stored as a string to preserve formatting
            </remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.NumMissedCleavages">
            <summary>
            Number of missed cleavages (internal K or R)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            CleavageState, NumMissedCleavages, and NumTrypticTerminii are typically populated using UpdateCleavageInfo
            </remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.NumTrypticTerminii">
            <summary>
            Number of tryptic terminii (or similar if not using trypsin)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            2 means fully tryptic, 1 means partially tryptic, 0 means non-tryptic
            CleavageState, NumMissedCleavages, and NumTrypticTerminii are typically populated using UpdateCleavageInfo
            </remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.Peptide">
            <summary>
            Peptide sequence, including any modification symbols that were assigned by the search engine
            Peptide sequence, with or without prefix and suffix residues; may contain mod symbols
            Example, R.AAS*PQDLAGGYTSSLACHR.A
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.PeptideCleanSequence">
            <summary>
            Peptide residues without any modification symbols or flanking residues
            For example, AASPQDLAGGYTSSLACHR
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.PeptideMonoisotopicMass">
            <summary>
            Computed monoisotopic mass (uncharged, theoretical mass, including mods)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>This mass is computed by PHRP using the PrecursorNeutralMass plus any modification masses associated with the peptide's residues</remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.PeptideWithNumericMods">
            <summary>
            Peptide sequence where all modified residues have the modification masses displayed as numeric values
            For example, R.A+144.102063AS+79.9663PQDLAGGYTSSLAC+57.0215HR.A
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.ProteinFirst">
            <summary>
            First protein associated with this peptide
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Retrieve full list of proteins using the Proteins property</remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.PrecursorNeutralMass">
            <summary>
            Uncharged monoisotopic mass of the precursor (observed mass based on m/z and charge)
            </summary>
            <value></value>
            <returns></returns>
            <remarks>This mass is based on the mass or m/z value reported by the search engine</remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.Proteins">
            <summary>
            List of proteins associated with this peptide
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.ProteinDetails">
            <summary>
            Dictionary with info on each protein, including name, description, cleavage state, terminus state, residue start, and residue end
            </summary>
        </member>
        <member name="P:PHRPReader.clsPSM.ResultID">
            <summary>
            ResultID of this peptide (typically assigned by the search engine)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.ScanList">
            <summary>
            List of scans that were combined prior to identifying this peptide
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.ScanNumber">
            <summary>
            Scan number of the mass spectrum in which this peptide was identified
            Will automatically update ScanList if it does not yet contain this scan number
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.ScanNumberStart">
            <summary>
            First scan number
            </summary>
        </member>
        <member name="P:PHRPReader.clsPSM.ScanNumberEnd">
            <summary>
            Last scan number
            </summary>
        </member>
        <member name="P:PHRPReader.clsPSM.ScoreRank">
            <summary>
            Rank of this peptide in the given spectrum
            </summary>
            <value></value>
            <returns></returns>
            <remarks>Top scoring peptide is rank 1, next lowest score is rank 2, etc.</remarks>
        </member>
        <member name="P:PHRPReader.clsPSM.SeqID">
            <summary>
            Sequence ID value assigned by PHRP
            Required for looking up information from the SeqInfo files
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.#ctor">
            <summary>
            Constructor; auto-calls Clear()
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.AddCombinedScan(System.Int32)">
            <summary>
            Add an additional scan number to associate with this PSM
            </summary>
            <param name="scanNumber"></param>
        </member>
        <member name="M:PHRPReader.clsPSM.AddModifiedResidue(PHRPReader.clsAminoAcidModInfo)">
            <summary>
            Add the details for a modified residue
            </summary>
            <param name="modInfo">Modification info class</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.AddModifiedResidue(System.Char,System.Int32,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,PHRPReader.clsModificationDefinition)">
            <summary>
            Add the details for a modified residue
            </summary>
            <param name="residue">Amino acid letter; use angle brackets or square brackets for peptide or protein terminii (see the SYMBOL_DMS constants in clsAminoAcidModInfo)</param>
            <param name="residueLocInPeptide">Location of the residue in the peptide; use 1 for an N-terminal mod</param>
            <param name="residueTerminusState">Terminus state of residue</param>
            <param name="modDefinition">Modification details</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.AddModifiedResidue(System.Char,System.Int32,PHRPReader.clsAminoAcidModInfo.eResidueTerminusStateConstants,PHRPReader.clsModificationDefinition,System.Int32)">
            <summary>
            Add the details for a modified residue
            </summary>
            <param name="residue">Amino acid letter; use angle brackets or square brackets for peptide or protein terminii (see the SYMBOL_DMS constants in clsAminoAcidModInfo)</param>
            <param name="residueLocInPeptide">Location of the residue in the peptide; use 1 for an N-terminal mod</param>
            <param name="residueTerminusState">Terminus state of residue</param>
            <param name="modDefinition">Modification details</param>
            <param name="endResidueLocInPeptide">For ambiguous mods, the residue number of the last residue that could have this modification</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.AddProtein(System.String)">
            <summary>
            Add a new protein to associate with this peptide
            </summary>
            <param name="proteinName"></param>
            <remarks>Does not update the ProteinDetails dictionary</remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.AddProtein(PHRPReader.clsProteinInfo)">
            <summary>
            Add detailed info of a protein associated with this peptide
            </summary>
            <param name="proteinInfo"></param>
            <remarks>Updates both the Protein list and the ProteinDetails dictionary</remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.AddProteinDetail(PHRPReader.clsProteinInfo)">
            <summary>
            Add detailed info of a protein associated with this peptide
            </summary>
            <param name="proteinInfo"></param>
            <remarks>Updates both the Protein list and the ProteinDetails dictionary</remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.Clear">
            <summary>
            Reset the peptide to default values (and empty strings)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.ClearModifiedResidues">
            <summary>
            Clear any residue modifications
            </summary>
        </member>
        <member name="M:PHRPReader.clsPSM.Clone">
            <summary>
            Duplicate this PSM object and return a new one
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.UpdateCleanSequence">
            <summary>
            Update the clean sequence
            </summary>
        </member>
        <member name="M:PHRPReader.clsPSM.GetScore(System.String)">
            <summary>
            Returns the value stored for the specified score
            </summary>
            <param name="scoreName">Score name</param>
            <returns>Score if defined, otherwise an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPSM.GetScoreDbl(System.String)">
            <summary>
             Returns the value stored for the specified score (as a double)
            </summary>
            <param name="scoreName">Score name</param>
            <returns>Score if defined, otherwise 0</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.GetScoreDbl(System.String,System.Double)">
            <summary>
             Returns the value stored for the specified score (as a double)
            </summary>
            <param name="scoreName">Score name</param>
            <param name="valueIfMissing">Value to return if the score is not defined</param>
            <returns>Score if defined, otherwise valueIfMissing</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.GetScoreInt(System.String)">
            <summary>
             Returns the value stored for the specified score (as an integer)
            </summary>
            <param name="scoreName">Score name</param>
            <returns>Score if defined, otherwise 0</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.GetScoreInt(System.String,System.Int32)">
            <summary>
             Returns the value stored for the specified score (as an integer)
            </summary>
            <param name="scoreName">Score name</param>
            <param name="valueIfMissing">Value to return if the score is not defined</param>
            <returns>Score if defined, otherwise valueIfMissing</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.SetPeptide(System.String,System.Boolean)">
            <summary>
            Update the peptide sequence, auto-determining the clean sequence if updateCleanSequence is true
            </summary>
            <param name="peptideSequence">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
            <param name="updateCleanSequence"></param>
            <remarks>Does not update the cleavage state info.  If updateCleanSequence is false, call UpdateCleanSequence at a later time to populate mPeptideCleanSequence</remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.SetPeptide(System.String,PHRPReader.clsPeptideCleavageStateCalculator)">
            <summary>
            Update the peptide sequence (auto-determines the clean sequence); also auto-update the the cleavage state info
            </summary>
            <param name="peptide">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
            <param name="cleavageStateCalculator">Cleavage state calculator object</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.SetScore(System.String,System.String)">
            <summary>
            Add/update an additional score to associate with this peptide
            </summary>
            <param name="scoreName"></param>
            <param name="scoreValue"></param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.TryGetScore(System.String,System.String@)">
            <summary>
            Returns the value stored for the specified score
            </summary>
            <param name="scoreName"></param>
            <param name="scoreValue"></param>
            <returns>True if the score is defined, otherwise false</returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsPSM.UpdateCleavageInfo(PHRPReader.clsPeptideCleavageStateCalculator)">
            <summary>
            Auto-determine the number of missed cleavages, cleavage state, and number of tryptic terminii based on the peptide sequence
            </summary>
            <param name="cleavageStateCalculator"></param>
            <remarks></remarks>
        </member>
        <member name="T:PHRPReader.clsScanStatsExInfo">
            <summary>
            Data loaded from a ScanStatsEx file
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ScanNumber">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.IonInjectionTime">
            <summary>
            Ion injection time
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ScanEvent">
            <summary>
            scan event
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.MasterIndex">
            <summary>
            Master index
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ElapsedScanTime">
            <summary>
            Elapsed scan time
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ChargeState">
            <summary>
            charge state
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.MonoisotopicMZ">
            <summary>
            Monoisotopic m/z of the parent ion
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.MS2IsolationWidth">
            <summary>
            MS2 isolation width
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.FTAnalyzerSettings">
            <summary>
            FT analyzer settings
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.FTAnalyzerMessage">
            <summary>
            FT analyzer message
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.FTResolution">
            <summary>
            FT resolution
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ConversionParameterB">
            <summary>
            Conversion parameter B
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ConversionParameterC">
            <summary>
            Conversion parameter C
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ConversionParameterD">
            <summary>
            Conversion parameter D
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ConversionParameterE">
            <summary>
            Conversion parameter E
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.CollisionMode">
            <summary>
            Collision mode
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.ScanFilterText">
            <summary>
            Scan filter
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.SourceVoltage">
            <summary>
            Source voltage
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsExInfo.Source_Current">
            <summary>
            Source current
            </summary>
        </member>
        <member name="M:PHRPReader.clsScanStatsExInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNumber"></param>
        </member>
        <member name="T:PHRPReader.clsExtendedScanStatsReader">
            <summary>
            Extended scan stats reader
            </summary>
        </member>
        <member name="F:PHRPReader.clsExtendedScanStatsReader.mColumnHeaders">
            <summary>
            Column headers
            </summary>
        </member>
        <member name="P:PHRPReader.clsExtendedScanStatsReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.clsExtendedScanStatsReader.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsExtendedScanStatsReader.ReadExtendedScanStatsData(System.String)">
            <summary>
            Open a tab-delimited _ScanStatsEx.txt file and read the data
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>A Dictionary where keys are ScanNumber and values are clsScanStatsInfo objects</returns>
        </member>
        <member name="T:PHRPReader.clsScanStatsInfo">
            <summary>
            Data loaded from a ScanStats file
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.ScanNumber">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.ScanTimeMinutes">
            <summary>
            Scan time, in minutes
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.ScanType">
            <summary>
            Scan type (aka scan level)
            </summary>
            <remarks>1 for MS1, 2 for MS2</remarks>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.TotalIonIntensity">
            <summary>
            Total ion intensity (TIC)
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.BasePeakIntensity">
            <summary>
            Base peak intensity (BPI)
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.BasePeakMZ">
            <summary>
            Base peak m/z
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.BasePeakSignalToNoiseRatio">
            <summary>
            Base peak signal to noise ratio (S/N)
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.IonCount">
            <summary>
            Ion count (after filters)
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.IonCountRaw">
            <summary>
            Ion count (before filtering)
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsInfo.ScanTypeName">
            <summary>
            Scan type name
            </summary>
        </member>
        <member name="M:PHRPReader.clsScanStatsInfo.#ctor(System.Int32,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNumber"></param>
            <param name="scanTimeMinutes"></param>
            <param name="scanType"></param>
        </member>
        <member name="T:PHRPReader.clsScanStatsReader">
            <summary>
            This class reads MASIC ScanStats data from a tab-delimited _ScanStats.txt file
            </summary>
        </member>
        <member name="P:PHRPReader.clsScanStatsReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.clsScanStatsReader.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsScanStatsReader.ReadScanStatsData(System.String)">
            <summary>
            Open a tab-delimited _ScanStats.txt file and read the data
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>A Dictionary where keys are ScanNumber and values are clsScanStatsInfo objects</returns>
        </member>
        <member name="T:PHRPReader.clsSearchEngineParameters">
            <summary>
            Search engine parameters container
            </summary>
        </member>
        <member name="F:PHRPReader.clsSearchEngineParameters.MASS_TYPE_MONOISOTOPIC">
            <summary>
            Monoisotopic mass
            </summary>
        </member>
        <member name="F:PHRPReader.clsSearchEngineParameters.MASS_TYPE_AVERAGE">
            <summary>
            Average mass
            </summary>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.Enzyme">
            <summary>
            Enzyme name
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.FastaFilePath">
            <summary>
            FASTA file path
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.FragmentMassType">
            <summary>
            Fragment mass type
            </summary>
            <returns></returns>
            <remarks>Typically "monoisotopic" or "average"</remarks>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.MaxNumberInternalCleavages">
            <summary>
            Maximum number of internal cleavages (missed cleavage points)
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.MinNumberTermini">
            <summary>
            0 means no-enzyme, 1 means partially tryptic, 2 means fully tryptic
            </summary>
            <returns></returns>
            <remarks>For trypsin, this is NTT or Number of Tryptic Terminii</remarks>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.ModInfo">
            <summary>
            Dynamic and static mods to search for
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.Parameters">
            <summary>
            Parameter dictionary (key/value pairs)
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.PrecursorMassToleranceDa">
            <summary>
            Precursor mass tolerance, in Da; 0 if unknown
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.PrecursorMassTolerancePpm">
            <summary>
            Precursor mass tolerance, in ppm; 0 if unknown
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.PrecursorMassType">
            <summary>
            Precursor mass type
            </summary>
            <returns></returns>
            <remarks>Typically "monoisotopic" or "average"</remarks>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.SearchEngineName">
            <summary>
            Search engine name
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.SearchEngineParamFilePath">
            <summary>
            Search engine parameter file path
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.SearchEngineVersion">
            <summary>
            Search engine version
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHRPReader.clsSearchEngineParameters.SearchDate">
            <summary>
            Search date
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="searchEngineName"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.#ctor(System.String,System.Collections.Generic.List{PHRPReader.clsModificationDefinition})">
            <summary>
            Constructor
            </summary>
            <param name="searchEngineName"></param>
            <param name="modInfo"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.#ctor(System.String,System.Collections.Generic.List{PHRPReader.clsModificationDefinition},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="searchEngineName"></param>
            <param name="modInfo"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.AddModification(PHRPReader.clsModificationDefinition)">
            <summary>
            Add a new dynamic or static modification
            </summary>
            <param name="modInfo"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.AddUpdateParameter(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Add/update a parameter
            </summary>
            <param name="kvSetting"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.AddUpdateParameter(System.String,System.String)">
            <summary>
            Add/update a parameter
            </summary>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.ClearModifications">
            <summary>
            Clear stored dynamic and static modifications
            </summary>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.ClearParameters">
            <summary>
            Clear stored key/value parameters
            </summary>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.UpdateSearchEngineParamFilePath(System.String)">
            <summary>
            Update the search engine parameter file path
            </summary>
            <param name="paramFilePath"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.UpdateSearchEngineVersion(System.String)">
            <summary>
            Update the search engine version
            </summary>
            <param name="searchEngineVersion"></param>
        </member>
        <member name="M:PHRPReader.clsSearchEngineParameters.UpdateSearchDate(System.DateTime)">
            <summary>
            Update the search date
            </summary>
            <param name="searchDate"></param>
        </member>
        <member name="T:PHRPReader.clsSeqInfo">
            <summary>
            This class tracks the sequence information determined by PHRP and stored in a _SeqInfo.txt file
            </summary>
        </member>
        <member name="P:PHRPReader.clsSeqInfo.SeqID">
            <summary>
            Sequence ID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsSeqInfo.ModCount">
            <summary>
            Number of modifications
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsSeqInfo.ModDescription">
            <summary>
            Comma-separated list of modifications, for example "itrac:1,Phosph:3,IodoAcet:15"
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PHRPReader.clsSeqInfo.MonoisotopicMass">
            <summary>
            Theoretical, monoisotopic mass (including the modified residues)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsSeqInfo.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor using Sequence ID and mass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsSeqInfo.#ctor(System.Int32,System.Double,System.Int32,System.String)">
            <summary>
            Constructor using Sequence ID, mass, mod count, and list of modifications
            </summary>
            <param name="seqID">Sequence ID</param>
            <param name="monoisotopicMass">Theoretical, monoisotopic mass (including the modified residues)</param>
            <param name="modCount">Number of modifications</param>
            <param name="modDescription">Comma-separated list of modifications, for example "itrac:1,Phosph:3,IodoAcet:15"</param>
            <remarks></remarks>
        </member>
        <member name="M:PHRPReader.clsSeqInfo.UpdateMonoisotopicMass(System.Double)">
            <summary>
            Update the monoisotopic mass for this sequence
            </summary>
            <param name="monoMass"></param>
            <remarks></remarks>
        </member>
    </members>
</doc>
