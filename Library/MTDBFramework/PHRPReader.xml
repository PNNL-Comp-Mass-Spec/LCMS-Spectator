<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PHRPReader</name>
    </assembly>
    <members>
        <member name="T:PHRPReader.clsPHRPReader">
            <summary>
            Legacy PHRP Reader
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.PROTEIN_TERMINUS_SYMBOL_PHRP">
            <summary>
            Symbol used by PHRP to indicate a protein terminus
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.CanRead">
            <summary>
            Returns True if the input file was successfully opened and data remains to be read
            </summary>
            <returns>True if the file is readable</returns>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.DatasetName">
            <summary>
            Dataset name (auto-determined based on the input filename)
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.EchoMessagesToConsole">
            <summary>
            If True, will display messages at the console
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ErrorMessages">
            <summary>
            Cached error messages
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ErrorMessage">
            <summary>
            Current error message
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.FastReadMode">
            <summary>
            Used to enable fast read mode when calling MoveNext
            When FastReadMode is True, you should call FinalizeCurrentPSM after calling MoveNext to populate the remaining fields if the peptide is a peptide of interest
            </summary>
            <remarks>Once FastReadMode is enabled it cannot be turned off (this is a safety measure due to how data is cached)</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.LoadModsAndSeqInfo">
            <summary>
            If True, looks for and loads the modification definitions from the _ModSummary.txt file associated with the input file
            Also reads the SeqInfo and related files
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.LoadMSGFResults">
            <summary>
            If true, loads the MSGF SpecProb values from the _MSGF.txt file associated with the input file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.LoadScanStatsData">
            <summary>
            If True, loads the MASIC _ScanStats.txt file
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.MaxProteinsPerPSM">
            <summary>
            The maximum number of proteins that will be tracked for each PSM
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ModSummaryFileLoaded">
            <summary>
            Returns True if the ModSummary file was successfully loaded
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.PeptideHitResultType">
            <summary>
            Peptide hit result type; Sequest, XTandem, Inspect, MSGFPlus, etc.
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.PercentComplete">
            <summary>
            Returns a number between 0 and 100 indicating the percentage of the source file that has been read
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.ResultToSeqMap">
            <summary>
            Returns the cached mapping between ResultID and SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.SkipDuplicatePSMs">
            <summary>
            When True, skips near-duplicate lines in the PHRP data file (lines with the same peptide in the same scan, but different protein names)
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPReader.WarningMessages">
            <summary>
            Cached warning messages
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <param name="loadScanStats">If True, looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="startupOptions">Startup options</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.PeptideHitResultTypes,System.Boolean,System.Boolean)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.PeptideHitResultTypes,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <param name="loadScanStats">If True, looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.PeptideHitResultTypes,PHRPReader.clsPHRPStartupOptions)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <param name="startupOptions">Startup options</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoSwitchToLegacyMSGFDBIfRequired(System.String,System.String)">
            <summary>
            Updates filePath to have _msgfdb instead of _msgfplus if basePHRPFileName contains _msgfdb
            </summary>
            <param name="filePath"></param>
            <param name="basePHRPFileName"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ClearErrors">
            <summary>
            Clear any cached error messages
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ClearWarnings">
            <summary>
            Clear any cached warning messages
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,PHRPReader.PeptideHitResultTypes@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="matchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.String)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetName">Dataset name</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.String,PHRPReader.PeptideHitResultTypes@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetName">Dataset name</param>
            <param name="matchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineBestInputFile(System.String,System.Collections.Generic.List{System.String},PHRPReader.PeptideHitResultTypes@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the given list of datasets in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetNames">List of dataset names to search for</param>
            <param name="matchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String)">
            <summary>
            Auto-determine the dataset name using the input file path
            </summary>
            <param name="filePath"></param>
            <returns>Dataset name</returns>
            <remarks>Returns an empty string if unable to determine the dataset name</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Auto-determine the dataset name using the input file path and specified PeptideHit result type
            </summary>
            <param name="filePath"></param>
            <param name="resultType"></param>
            <returns>Dataset name</returns>
            <remarks>Returns an empty string if unable to determine the dataset name</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.AutoDetermineResultType(System.String)">
            <summary>
            Determine the PeptideHit result type given the input file path
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindModSummaryFile(PHRPReader.PeptideHitResultTypes,System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ModSummary file for the given input file
            </summary>
            <param name="peptideHitResultType">PHRP Result Type of the input file</param>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="modSummaryFileNamePreferred">Output: preferred mod summary filename (based on whether a _syn.txt or _fht.txt file is present)</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindModSummaryFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ModSummary file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="modSummaryFileName">Expected mod summary filename</param>
            <param name="modSummaryFileNamePreferred">Output: preferred mod summary filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindResultToSeqMapFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ResultToSeqMap file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="resultToSeqMapFileName">Expected ResultToSeqMap filename</param>
            <param name="resultToSeqMapFileNamePreferred">Output: preferred ResultToSeqMap filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FindPHRPFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the given PHRP result file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="fileNameToFind">Expected PHRP result filename</param>
            <param name="preferredName">Output: preferred PHRP result filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetMSGFFileName(System.String)">
            <summary>
            Returns the filename of the MSGF file that corresponds to synopsisOrFirstHitsFileName
            </summary>
            <param name="synopsisOrFirstHitsFileName">Filename (or full path) to the synopsis or first-hits file</param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPeptideHitResultType(System.String)">
            <summary>
            Get the peptide hit result type for the given result type name
            </summary>
            <param name="resultTypeName"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPAuxiliaryFileSuffixes">
            <summary>
            Get the list of auxiliary file suffixes
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPFirstHitsFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default first-hits file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPModSummaryFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default ModSummary file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPPepToProteinMapFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default PepToProtMap file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPProteinModsFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default ProteinMods file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPSynopsisFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default Synopsis file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPResultToSeqMapFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default ResultToSeq Map file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPSeqInfoFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default SeqInfo file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetPHRPSeqToProteinMapFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default SeqToProtein Map file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetScanStatsFilename(System.String)">
            <summary>
            Get the ScanStats filename for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetExtendedScanStatsFilename(System.String)">
            <summary>
            Get the extended ScanStats filename for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.GetToolVersionInfoFilename(PHRPReader.PeptideHitResultTypes)">
            <summary>
            Get the tool version info filename for the given analysis tool
            </summary>
            <param name="resultType"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.IsLetterAtoZ(System.Char)">
            <summary>
            Returns true if the character is a letter between A and Z or a and z
            </summary>
            <param name="chChar">Character to examine</param>
            <remarks>The Char.IsLetter() function returns True for "º" and various other Unicode ModifierLetter characters; use this function to only return True for normal letters between A and Z</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.IsNumber(System.String)">
            <summary>
            Examines the string to determine if it is numeric
            </summary>
            <param name="data"></param>
            <returns>True if a number, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnIndex(System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Returns the index of the indicated column, as tracked by columnHeaders
            </summary>
            <param name="columnName"></param>
            <param name="columnHeaders"></param>
            <returns>Column index, or -1 if not found</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnIndex(System.Enum,System.Collections.Generic.SortedDictionary{System.Enum,System.Int32})">
            <summary>
            Returns the index of the indicated column, as tracked by columnHeaders
            </summary>
            <param name="columnEnum"></param>
            <param name="columnHeaders"></param>
            <returns>Column index, or -1 if not found</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; an empty string if the specific column name is not recognized</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.String)">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; valueIfMissing if the specific column name is not recognized</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.Enum,System.Collections.Generic.SortedDictionary{System.Enum,System.Int32},System.String)">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; valueIfMissing if the specific column name is not recognized</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Returns the value stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Double)">
            <summary>
            Returns the value stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.ParseColumnHeaders(System.String[],System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Updates the column name to column index mapping in columnHeaders
            </summary>
            <param name="dataColumns">Column names read from the input file</param>
            <param name="columnHeaders">Column mapping dictionary object to update</param>
            <remarks>The SortedDictionary object should be instantiated using a case-insensitive comparer, i.e. (StringComparer.OrdinalIgnoreCase)</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.MoveNext">
            <summary>
            Reads the next line from a synopsis file or first hits file
            </summary>
            <returns>True if a line was read, false if not more data is available</returns>
            <remarks>When FastReadMode is True, you should call FinalizeCurrentPSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.FinalizeCurrentPSM">
            <summary>
            When FastReadMode is True, first call MoveNext to read the peptide scores.
            Then, if the peptide is a peptide of interest, call this function to finalize any processing steps that were skipped.
            </summary>
        </member>
        <member name="F:PHRPReader.clsPHRPReader.mDisposedValue">
            <summary>
            Used to detect redundant calls
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.Dispose(System.Boolean)">
            <summary>
            Dispose of this class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PHRPReader.clsPHRPReader.Dispose">
            <summary>
            This code added by Visual Studio to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:PHRPReader.clsPHRPStartupOptions">
            <summary>
            Legacy PHRP startup options
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.LoadModsAndSeqInfo">
            <summary>
            If true, load the modification and SeqInfo data
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.LoadMSGFResults">
            <summary>
            If true, load MSGF results (not MS-GF+)
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.LoadScanStatsData">
            <summary>
            If true, load ScanStats data
            </summary>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.MaxProteinsPerPSM">
            <summary>
            Maximum number of proteins to associate with each PSM
            </summary>
            <remarks>Set to 0 to load all proteins</remarks>
        </member>
        <member name="P:PHRPReader.clsPHRPStartupOptions.PeptideMassCalculator">
            <summary>
            Use this to override the default peptide mass calculator class;
            this is useful if custom amino acids are in use
            </summary>
        </member>
        <member name="M:PHRPReader.clsPHRPStartupOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PHRPReader.Data.MSGFPlusSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by MSGFPlusResultsProcessor
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.ResultID">
            <summary>
            Result ID
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.Scan">
            <summary>
            Scan
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.FragMethod">
            <summary>
            Fragmentation method
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.SpecIndex">
            <summary>
            Spectrum index
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.Charge">
            <summary>
            Charge
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.PrecursorMZ">
            <summary>
            Precursor m/z
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.DelM">
            <summary>
            Precursor error, in Daltons
            </summary>
            <remarks>
            If the search used a tolerance less than 0.5 Da or less than 500 ppm,
            this value is computed from the DelMPPM value
            </remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.DelMPPM">
            <summary>
            Precursor error, in ppm; corrected for isotope selection errors
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.MH">
            <summary>
            Theoretical monoisotopic peptide mass (computed by PHRP)
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.Peptide">
            <summary>
            Peptide sequence with prefix and suffix residues, plus also with modification symbols
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.Protein">
            <summary>
            Protein Name (no description)
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.NTT">
            <summary>
            Number of tryptic termini
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.DeNovoScore">
            <summary>
            De-novo score
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.MSGFScore">
            <summary>
            MSGF Score
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.SpecProb_EValue">
            <summary>
            SpecProb E-Value
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.RankSpecProb">
            <summary>
            Rank SpecProb
            </summary>
            <remarks>Rank 1 means lowest SpecEValue, 2 means next higher score, etc. (ties get the same rank)</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.PValue_EValue">
            <summary>
            P-Value or E-Value
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.FDR_QValue">
            <summary>
            FDR or Q-Value
            </summary>
            <remarks>Only present if searched using -tda 1</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.PepFDR_PepQValue">
            <summary>
            Peptide FDR or Peptide QValue
            </summary>
            <remarks>Only present if searched using -tda 1</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.EFDR">
            <summary>
            EFDR
            </summary>
            <remarks>Only present if did not search using -tda 1</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.IMSScan">
            <summary>
            IMSScan
            </summary>
            <remarks>Only present for MSGFDB_IMS results</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.IMSDriftTime">
            <summary>
            IMSDriftTime
            </summary>
            <remarks>Only present for MSGFDB_IMS results</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSGFPlusSynFileColumns.IsotopeError">
            <summary>
            IsotopeError
            </summary>
        </member>
        <member name="T:PHRPReader.Data.MSPathFinderSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by MSPathFinderResultsProcessor
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.ResultID">
            <summary>
            Result ID
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Scan">
            <summary>
            Scan
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Charge">
            <summary>
            Charge
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.MostAbundantIsotopeMz">
            <summary>
            Most abundant isotope m/z
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Mass">
            <summary>
            Mass
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Sequence">
            <summary>
            Sequence
            </summary>
            <remarks>PrefixLetter.Sequence.SuffixLetter</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Modifications">
            <summary>
            Modifications
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Composition">
            <summary>
            Composition
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.Protein">
            <summary>
            Protein
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.ProteinDesc">
            <summary>
            Protein description
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.ProteinLength">
            <summary>
            Protein length
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.ResidueStart">
            <summary>
            Protein residue number where the sequence starts
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.ResidueEnd">
            <summary>
            Protein residue number where the sequence ends
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.MatchedFragments">
            <summary>
            Count of matched fragments
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.SpecEValue">
            <summary>
            Spec E-Value
            </summary>
            <remarks>Column added 2015-08-25</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.EValue">
            <summary>
            E-Value
            </summary>
            <remarks>Column added 2015-08-25</remarks>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.QValue">
            <summary>
            Q-Value
            </summary>
        </member>
        <member name="F:PHRPReader.Data.MSPathFinderSynFileColumns.PepQValue">
            <summary>
            Peptide Q-Value
            </summary>
        </member>
        <member name="T:PHRPReader.Data.AminoAcidModInfo">
            <summary>
            Tracks modifications on a residue
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.N_TERMINAL_PEPTIDE_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the N-terminus of a peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.C_TERMINAL_PEPTIDE_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the C-terminus of a peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.N_TERMINAL_PROTEIN_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the N-terminus of a protein
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.C_TERMINAL_PROTEIN_SYMBOL_DMS">
            <summary>
            Symbol used by DMS for tracking the C-terminus of a protein
            </summary>
        </member>
        <member name="T:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState">
            <summary>
            Terminus state enum
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState.None">
            <summary>
            The residue is in the middle of the peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState.PeptideNTerminus">
            <summary>
            The residue is located at the peptide's N-terminus; superseded by ProteinNTerminus if applicable
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState.PeptideCTerminus">
            <summary>
            The residue is located at the peptide's C-terminus; superseded by ProteinCTerminus if applicable
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState.ProteinNTerminus">
            <summary>
            The residue is located at the protein's N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState.ProteinCTerminus">
            <summary>
            The residue is located at the protein's C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState.ProteinNandCCTerminus">
            <summary>
            The protein only has one residue
            </summary>
        </member>
        <member name="P:PHRPReader.Data.AminoAcidModInfo.AmbiguousMod">
            <summary>
            True if the location of the modification is ambiguous
            </summary>
        </member>
        <member name="P:PHRPReader.Data.AminoAcidModInfo.EndResidueLocInPeptide">
            <summary>
            For ambiguous mods, indicates the last residue on which the mod could appear.  For non-ambiguous mods, will be the same as ResidueLocInPeptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.AminoAcidModInfo.ModDefinition">
            <summary>
            Modification definition
            </summary>
        </member>
        <member name="P:PHRPReader.Data.AminoAcidModInfo.Residue">
            <summary>
            Amino acid residue symbol
            </summary>
        </member>
        <member name="P:PHRPReader.Data.AminoAcidModInfo.ResidueLocInPeptide">
            <summary>
            Indicates the residue number modified; the first residue is at position 1
            </summary>
            <remarks>For ambiguous mods, indicates the first residue on which the mod could appear</remarks>
        </member>
        <member name="P:PHRPReader.Data.AminoAcidModInfo.TerminusState">
            <summary>
            Residue terminus state
            </summary>
        </member>
        <member name="M:PHRPReader.Data.AminoAcidModInfo.#ctor(System.Char,System.Int32,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,PHRPReader.Data.ModificationDefinition)">
            <summary>
            Constructor
            </summary>
            <param name="residue"></param>
            <param name="residueLocInPeptide"></param>
            <param name="residueTerminusState"></param>
            <param name="modDefinition"></param>
        </member>
        <member name="M:PHRPReader.Data.AminoAcidModInfo.#ctor(System.Char,System.Int32,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,PHRPReader.Data.ModificationDefinition,System.Int32)">
            <summary>
            Constructor with endResidueLocInPeptide
            </summary>
            <param name="residue"></param>
            <param name="residueLocInPeptide"></param>
            <param name="residueTerminusState"></param>
            <param name="modDefinition"></param>
            <param name="endResidueLocInPeptide"></param>
        </member>
        <member name="T:PHRPReader.Data.EmpiricalFormula">
            <summary>
            Empirical formula
            </summary>
        </member>
        <member name="P:PHRPReader.Data.EmpiricalFormula.ElementCounts">
            <summary>
            Elements in the empirical formula
            Keys are element symbols, values are element counts
            </summary>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Constructor, initialized with an existing dictionary of element symbols and counts
            </summary>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor, initialized with a list of element symbols
            </summary>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary>
            Constructor, initialized with a list of KeyValuePairs of element symbol and element count
            </summary>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.AddElement(System.String,System.Int32)">
            <summary>
            Add a new element to the empirical formula
            </summary>
            <param name="elementSymbol"></param>
            <param name="elementCount"></param>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.AddElements(PHRPReader.Data.EmpiricalFormula)">
            <summary>
            Adds all of the elements from the given empirical formula
            </summary>
            <param name="empiricalFormula"></param>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.GetElementCount(System.Char)">
            <summary>
            Return the number of atoms of the given element in the empirical formula
            </summary>
            <param name="elementSymbol"></param>
            <returns>Element Count, or 0 if the element is not in ElementCounts</returns>
        </member>
        <member name="M:PHRPReader.Data.EmpiricalFormula.ToString">
            <summary>
            String representation of the empirical formula
            </summary>
        </member>
        <member name="T:PHRPReader.Data.ModificationDefinition">
            <summary>
            This class describes an amino acid modification
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.LAST_RESORT_MODIFICATION_SYMBOL">
            <summary>
            Modification symbol used after all of the DEFAULT_MODIFICATION_SYMBOLS have been used
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.NO_SYMBOL_MODIFICATION_SYMBOL">
            <summary>
            Symbol to indicate a modification does not have a mod symbol
            </summary>
            <remarks>Used with isotopic mods and protein terminus static mods</remarks>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.UNKNOWN_MOD_BASE_NAME">
            <summary>
            Unknown mod base name
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.INITIAL_UNKNOWN_MASS_CORRECTION_TAG_NAME">
            <summary>
            Initial unknown mass correction tag name
            </summary>
        </member>
        <member name="T:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants">
            <summary>
            Legacy modification type constants
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants.UnknownType">
            <summary>
            Unknown mod type on a residue; essentially treated as a dynamic mod
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants.DynamicMod">
            <summary>
            Dynamic mod on a residue or peptide terminus; supported by Sequest and notated via a modification symbol; this mod is explicitly notated by X!Tandem; if a terminus mod, the mod symbol is associated with the first or last residue in the peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants.StaticMod">
            <summary>
            Static mod on a residue or peptide terminus; supported by Sequest but not explicitly notated; this mod is explicitly notated by X!Tandem; if a terminus mod, the mod symbol is associated with the first or last residue in the peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants.TerminalPeptideStaticMod">
            <summary>
            Peptide terminus static mod (DMS Symbol is T); used by Sequest and MSGFDB; note that terminal mods are always dynamic in X!Tandem
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants.IsotopicMod">
            <summary>
            Isotopic mod, e.g. N15, or C13; supported by Sequest; most likely not supported by XTandem
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ModificationTypeConstants.ProteinTerminusStaticMod">
            <summary>
            Protein terminus static mod; supported by Sequest; this mod is also supported by X!Tandem but modified residues are not explicitly notated; instead, all peptides have their mass implicitly modified by this amount
            </summary>
        </member>
        <member name="T:PHRPReader.Data.ModificationDefinition.ResidueModificationType">
            <summary>
            Modification types
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ResidueModificationType.UnknownType">
            <summary>
            Unknown mod type on a residue; essentially treated as a dynamic mod
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ResidueModificationType.DynamicMod">
            <summary>
            Dynamic mod on a residue or peptide terminus; supported by Sequest and notated via a modification symbol; this mod is explicitly notated by X!Tandem; if a terminus mod, the mod symbol is associated with the first or last residue in the peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ResidueModificationType.StaticMod">
            <summary>
            Static mod on a residue or peptide terminus; supported by Sequest but not explicitly notated; this mod is explicitly notated by X!Tandem; if a terminus mod, the mod symbol is associated with the first or last residue in the peptide
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ResidueModificationType.TerminalPeptideStaticMod">
            <summary>
            Peptide terminus static mod (DMS Symbol is T); used by Sequest and MSGFDB; note that terminal mods are always dynamic in X!Tandem
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ResidueModificationType.IsotopicMod">
            <summary>
            Isotopic mod, e.g. N15, or C13; supported by Sequest; most likely not supported by XTandem
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.ResidueModificationType.ProteinTerminusStaticMod">
            <summary>
            Protein terminus static mod; supported by Sequest; this mod is also supported by X!Tandem but modified residues are not explicitly notated; instead, all peptides have their mass implicitly modified by this amount
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.mModificationSymbol">
            <summary>
            One letter symbol for this modification; use NO_SYMBOL_MODIFICATION_SYMBOL if no symbol (necessary for isotopic mods or protein terminus static mods)
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.mModificationMass">
            <summary>
            Monoisotopic modification mass
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.mTargetResidues">
            <summary>
            Target residues, tracked as a space-free, comma-free list of one letter amino acid residue symbols that this mod can apply to
            Use the *_SYMBOL_DMS constants for the peptide and protein termini symbols (&lt; and &gt; for the peptide termini; [ and ] for the protein termini)
            </summary>
            <remarks>
            If this is empty, the given modification can apply to any residue or terminus
            </remarks>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.mMassCorrectionTag">
            <summary>
            Name associated with the given ModificationMass; maximum length is 8 characters
            Cannot contain a colon, comma, or space
            </summary>
        </member>
        <member name="F:PHRPReader.Data.ModificationDefinition.mAffectedAtom">
            <summary>
            Set to Nothing or to PeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL for positional modifications (including terminus modifications)
            For Isotopic modifications, indicate the atom affected (e.g. C, H, N, O, or S)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.ModificationSymbol">
            <summary>
            One letter symbol for this modification
            </summary>
            <remarks>
            Use NO_SYMBOL_MODIFICATION_SYMBOL (a dash) if no symbol
            (necessary for isotopic mods or protein terminus static mods)
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.ModificationMass">
            <summary>
            Monoisotopic modification mass
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.ModificationMassAsText">
            <summary>
            Modification mass, stored as text
            </summary>
            <remarks>Represents the original string value read from the data file</remarks>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.TargetResidues">
            <summary>
            Residues that this modification can apply to
            </summary>
            <remarks>
            If an empty string, the modification can apply to any residue or terminus;
            Otherwise, should contain a space-free, comma-free list of one letter amino acid residue symbols that this mod can apply to.
            Use the *_SYMBOL_DMS constants for the peptide and protein termini symbols
            (less than and greater than signs for the peptide termini; [ and ] for the protein termini)
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.ModificationType">
            <summary>
            Modification type
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.MassCorrectionTag">
            <summary>
            Modification name, for example Phosph, IodoAcet, Plus1Oxy, or Methyl
            </summary>
            <remarks>Maximum length is 8 characters; cannot contain a colon, comma, or space</remarks>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.AffectedAtom">
            <summary>
            Only used with Isotopic modifications, indicating the atom affected (e.g. C, H, N, O, or S)
            </summary>
            <remarks>
            Set to Nothing or to PeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL (a dash) for positional modifications
            (including terminus modifications)
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.OccurrenceCount">
            <summary>
            Number of times this modification was observed in the given dataset
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ModificationDefinition.UnknownModAutoDefined">
            <summary>
            True if this was an unknown mass that was auto defined
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.#ctor(System.Char,System.Double)">
            <summary>
            Constructor that takes a mod symbol and mod mass
            </summary>
            <param name="modificationSymbol"></param>
            <param name="modificationMass"></param>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.#ctor(System.Double,System.String,PHRPReader.Data.ModificationDefinition.ResidueModificationType)">
            <summary>
            Constructor that takes a mod mass, target residues, and modification type
            </summary>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.#ctor(System.Char,System.Double,System.String,PHRPReader.Data.ModificationDefinition.ResidueModificationType,System.String)">
            <summary>
            Constructor that takes a mod symbol, mod mass, target residues, modification type, and mass correction tag
            </summary>
            <param name="modificationSymbol"></param>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
            <param name="massCorrectionTag"></param>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.#ctor(System.Char,System.Double,System.String,PHRPReader.Data.ModificationDefinition.ResidueModificationType,System.String,System.Char,System.Boolean)">
            <summary>
            Constructor that takes a mod symbol, mod mass, target residues, modification type, mass correction tag, and affected atom
            </summary>
            <param name="modificationSymbol"></param>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
            <param name="massCorrectionTag"></param>
            <param name="chAffectedAtom"></param>
            <param name="unknownModAutoDefined"></param>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.Clear">
            <summary>
            Initialize the modification definition
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.EquivalentMassTypeTagAndAtom(PHRPReader.Data.ModificationDefinition)">
            <summary>
            Compares b to this object, ignoring .ModificationSymbol and ignoring .AffectedResidues
            </summary>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.EquivalentMassTypeTagAndAtom(PHRPReader.Data.ModificationDefinition,PHRPReader.Data.ModificationDefinition)">
            <summary>
            Compare a to b but ignore .ModificationSymbol and .AffectedResidues
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.EquivalentMassTypeTagAtomAndResidues(PHRPReader.Data.ModificationDefinition)">
            <summary>
            Compares b to this object, ignoring .ModificationSymbol
            </summary>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.EquivalentMassTypeTagAtomAndResidues(PHRPReader.Data.ModificationDefinition,PHRPReader.Data.ModificationDefinition)">
            <summary>
            Compares b to this object
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if the items are equivalent</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.EquivalentTargetResidues(System.String,System.String,System.Boolean)">
            <summary>
            Compare the residue lists (ignoring order)
            </summary>
            <param name="residues1"></param>
            <param name="residues2"></param>
            <param name="allowResidues2ToBeSubsetOfResidues1"></param>
            <returns>True if they contain the same residues</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.CanAffectPeptideOrProteinTerminus">
            <summary>
            Returns True if this modification can affect the peptide or protein terminus
            </summary>
            <remarks>Note that some modifications can affect either peptide termini or internal residues</remarks>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.CanAffectPeptideResidues">
            <summary>
            Returns true if this modification can affect peptide residues
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.GetTerminalSymbols">
            <summary>
            Retrieve the protein and peptide terminus symbols
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.ModificationSymbolToModificationType(System.Char)">
            <summary>
            Retrieve the modification type for the given modification type symbol
            </summary>
            <param name="modificationTypeSymbol">D, S, T, I, or P</param>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.ModificationTypeToModificationSymbol(PHRPReader.Data.ModificationDefinition.ResidueModificationType)">
            <summary>
            Retrieve the modification type symbol for the given modification Type
            </summary>
            <param name="modificationType"></param>
            <returns>D, S, T, I, or P</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.TargetResiduesContain(System.Char)">
            <summary>
            Check whether the target residues contain the given residue
            </summary>
            <param name="chComparisonResidue"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Data.ModificationDefinition.ToString">
            <summary>
            Description of this modification definition
            </summary>
        </member>
        <member name="T:PHRPReader.Data.PeptideModificationContainer">
            <summary>
            This class is used to track modifications that can be applied to peptides
            It handles both residue level modifications and static, peptide-wide modifications
            </summary>
            <remarks>
            Use ReadMassCorrectionTagsFile() and ReadModificationDefinitionsFile() to customize
            the default mass correction tag and modification definition lists
            </remarks>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.DEFAULT_MODIFICATION_SYMBOLS">
            <summary>
            Default modification symbols
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.MASS_DIGITS_OF_PRECISION">
            <summary>
            Digits of precision to round masses to when finding mass correction tags by mass
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.N_TERMINAL_PEPTIDE_MOD_SYMBOL_XTANDEM">
            <summary>
            Symbol used by X!Tandem for tracking a modification at the peptide N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.C_TERMINAL_PEPTIDE_MOD_SYMBOL_XTANDEM">
            <summary>
            Symbol used by X!Tandem for tracking a modification at the peptide C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.N_TERMINAL_PEPTIDE_MOD_SYMBOL_INSPECT">
            <summary>
            Symbol used by Inspect for tracking a modification at the peptide N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.C_TERMINAL_PEPTIDE_MOD_SYMBOL_INSPECT">
            <summary>
            Symbol used by Inspect for tracking a modification at the peptide C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.mDefaultModificationSymbols">
            <summary>
            List of available modification symbols
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.mMassCorrectionTags">
            <summary>
            List of known mass correction tags
            </summary>
            <remarks>Keys are mod names, values are mod masses</remarks>
        </member>
        <member name="F:PHRPReader.Data.PeptideModificationContainer.mStandardRefinementModifications">
            <summary>
            This array holds modifications that Sequest or XTandem will often use but for
            which the auto-addition method sometimes incorrectly notes
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PeptideModificationContainer.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PeptideModificationContainer.ModificationCount">
            <summary>
            Modification count
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PeptideModificationContainer.Modifications">
            <summary>
            Modification list
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PeptideModificationContainer.ConsiderModSymbolWhenFindingIdenticalMods">
            <summary>
            When true, take the mod symbol into account when finding identical mods
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.AddModification(PHRPReader.Data.ModificationDefinition,System.Boolean)">
            <summary>
            Add modificationDefinition to mModifications
            However, do not add if a duplicate modification
            Furthermore, if everything matches except for .TargetResidues, add the new target residues to the existing, matching mod
            </summary>
            <param name="modificationDefinition"></param>
            <param name="useNextAvailableModificationSymbol"></param>
            <returns>The index of the newly added modification, or the index of the modification that modificationDefinition matches </returns>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.AppendStandardRefinementModifications">
            <summary>
            Append standard refinement modifications
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.ClearModifications">
            <summary>
            Clear modifications
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.FindClosestMatchedMod(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.Double,PHRPReader.Data.ModificationDefinition}},System.Char,System.Boolean)">
            <summary>
            Find the modification in matchedMods with smallest delta mass value
            </summary>
            <param name="matchedMods">List of modifications where keys are absolute value of delta mass and values are the modification definition</param>
            <param name="chTargetResidue"></param>
            <param name="addTargetResidue">If true, add the target residue to the modification definition's target residues list (if missing)</param>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.GenerateGenericModMassName(System.Double)">
            <summary>
            Converts a modification mass to a generic 8 character name
            The name will always start with + or - then will have the modification mass, rounded as necessary to give an 8 character name
            </summary>
            <param name="modificationMass"></param>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.GetBestIntegerBasedMassCorrectionTag(System.Double)">
            <summary>
            Looks for the best match in mIntegerMassCorrectionTagLookup for modificationMass (which should be close to a integer value)
            </summary>
            <param name="modificationMass"></param>
            <returns>The mass correction tag name if a match, otherwise nothing</returns>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.GetModificationByIndex(System.Int32)">
            <summary>
            Get a modification, by index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.GetModificationTypeByIndex(System.Int32)">
            <summary>
            Get the modification type, by modification index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not found
            </summary>
            <param name="modificationMass"></param>
            <returns>Mod name, or empty string if no match</returns>
            <remarks>
            Searches known mods using 3 digits of precision, then 2 digits, then 1 digit
            If no match, adds as a new, unknown modification
            </remarks>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double,System.Byte)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not  found
            </summary>
            <param name="modificationMass"></param>
            <param name="massDigitsOfPrecision"></param>
            <returns>Mod name, or empty string if no match</returns>
            <remarks>
            Searches known mods using massDigitsOfPrecision digits of precision, then massDigitsOfPrecision-1 digits, ... 1 digit
            If no match, adds as a new, unknown modification
            </remarks>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double,System.Byte,System.Boolean)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not found and addToModificationListIfUnknown is true
            </summary>
            <param name="modificationMass"></param>
            <param name="massDigitsOfPrecision"></param>
            <param name="addToModificationListIfUnknown"></param>
            <returns>Mod name, or empty string if no match</returns>
            <remarks>
            Searches known mods using massDigitsOfPrecision digits of precision, then massDigitsOfPrecision-1 digits, ... 1 digit
            If no match, adds as a new, unknown modification
            </remarks>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupMassCorrectionTagByMass(System.Double,System.Byte,System.Boolean,System.Byte)">
            <summary>
            Find the mass correction tag with the given mass, adding to the unknown modification list if not found and addToModificationListIfUnknown is true
            </summary>
            <param name="modificationMass"></param>
            <param name="massDigitsOfPrecision">Number of digits after the decimal point to round to when comparing mod masses</param>
            <param name="addToModificationListIfUnknown"></param>
            <param name="massDigitsOfPrecisionLoose">Number of digits after the decimal point to round to, for a more lenient match (if no match found using massDigitsOfPrecision)</param>
            <returns>Mod name, or empty string if no match</returns>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupDynamicModificationDefinitionByTargetInfo(System.Char,System.Char,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,System.Boolean@)">
            <summary>
            Looks for a modification of type .DynamicMod or type .UnknownType in mModifications having .ModificationSymbol = modificationSymbol and chTargetResidue in .TargetResidues
            </summary>
            <param name="modificationSymbol"></param>
            <param name="chTargetResidue"></param>
            <param name="residueTerminusState"></param>
            <param name="existingModFound"></param>
            <returns>Modification details</returns>
            <remarks>If modificationSymbol does not match any of the mods, a modification with a mass of 0 is returned</remarks>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupModificationDefinitionByMass(System.Double,System.Char,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,System.Boolean@,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Looks for an existing modification with the given modification mass and target residues
            </summary>
            <param name="modificationMass"></param>
            <param name="chTargetResidue">
            If defined, returns the first modification with the given mass and containing the residue in .TargetResidues;
            if no match, looks for the first modification with the given mass and no defined .TargetResidues
            </param>
            <param name="residueTerminusState"></param>
            <param name="existingModFound"></param>
            <param name="addToModificationListIfUnknown"></param>
            <param name="massDigitsOfPrecision">Number of digits after the decimal point to round to when comparing mod masses</param>
            <param name="massDigitsOfPrecisionLoose">Number of digits after the decimal point to round to, for a more lenient match (if no match found using massDigitsOfPrecision)</param>
            <returns>The best matched modification; if no match is found, returns a newly created modification definition, adding it to mModifications if addToModificationListIfUnknown is True</returns>
            <remarks>If chTargetResidue is nothing, follows similar matching logic, but skips defined modifications with defined .TargetResidues</remarks>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupModificationMassByName(System.String,System.Double@)">
            <summary>
            Resolve a modification name to a modification mass
            Checks both selected UniMod names and the names in mMassCorrectionTags
            </summary>
            <param name="modName">Modification name</param>
            <param name="modMass">Monoisotopic mass</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.LookupModificationDefinitionByMassAndModType(System.Double,PHRPReader.Data.ModificationDefinition.ResidueModificationType,System.Char,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,System.Boolean@,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Looks for an existing modification with the given modification mass, modification type, and target residues
            </summary>
            <param name="modificationMass"></param>
            <param name="modType"></param>
            <param name="chTargetResidue">
            If defined, returns the first modification with the given mass and containing the residue in .TargetResidues;
            if no match, looks for the first modification with the given mass and no defined .TargetResidues</param>
            <param name="residueTerminusState"></param>
            <param name="existingModFound"></param>
            <param name="addToModificationListIfUnknown"></param>
            <param name="massDigitsOfPrecision">Number of digits after the decimal point to round to when comparing mod masses</param>
            <param name="massDigitsOfPrecisionLoose">Number of digits after the decimal point to round to, for a more lenient match (if no match found using massDigitsOfPrecision)</param>
            <returns>The best matched modification; if no match is found, returns a newly created modification definition, adding it to mModifications if addToModificationListIfUnknown = True</returns>
            <remarks>If chTargetResidue is nothing, follows similar matching logic, but skips defined modifications with defined .TargetResidues</remarks>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.ReadMassCorrectionTagsFile(System.String,System.Boolean@)">
            <summary>
            Load the mass correction tags file
            </summary>
            <param name="filePath"></param>
            <param name="fileNotFound"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.ReadModificationDefinitionsFile(System.String,System.Boolean@)">
            <summary>
            Read a modification definitions file (_ModDefs.txt)
            </summary>
            <param name="filePath"></param>
            <param name="fileNotFound"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.ResetOccurrenceCountStats">
            <summary>
            Reset mod occurrence count stats
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.SetDefaultMassCorrectionTags">
            <summary>
            Define the default mass correction tags
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PeptideModificationContainer.VerifyModificationPresent(System.Double,System.String,PHRPReader.Data.ModificationDefinition.ResidueModificationType,System.Int32)">
            <summary>
            Verify that a modification is present, adding it if missing
            </summary>
            <param name="modificationMass"></param>
            <param name="targetResidues"></param>
            <param name="modificationType"></param>
            <param name="massDigitsOfPrecision"></param>
            <returns>True if the modification was matched or was added; false if an error</returns>
        </member>
        <member name="T:PHRPReader.Data.PepToProteinMapInfo">
            <summary>
            Track location of a given peptide in one or more proteins
            </summary>
        </member>
        <member name="T:PHRPReader.Data.PepToProteinMapInfo.ProteinLocationInfo">
            <summary>
            Start and end residue locations in a protein
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PepToProteinMapInfo.ProteinLocationInfo.ResidueStart">
            <summary>
            Start residue (first residue is 1)
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PepToProteinMapInfo.ProteinLocationInfo.ResidueEnd">
            <summary>
            End residue
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PepToProteinMapInfo.mProteinMapInfo">
            <summary>
            Dictionary of protein names and residue start/end positions for a given peptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PepToProteinMapInfo.ProteinCount">
            <summary>
            Number of proteins that contain a given peptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PepToProteinMapInfo.ProteinMapInfo">
            <summary>
            Dictionary of protein names and residue start/end positions for a given peptide
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PepToProteinMapInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName">Protein name</param>
            <param name="residueStart">Location that a peptide starts in the protein</param>
            <param name="residueEnd">Location that a peptide ends in the protein</param>
        </member>
        <member name="M:PHRPReader.Data.PepToProteinMapInfo.AddProtein(System.String,System.Int32,System.Int32)">
            <summary>
            Add another peptide to protein mapping for a given peptide
            </summary>
            <param name="proteinName">Protein name</param>
            <param name="residueStart">Location that a peptide starts in the protein</param>
            <param name="residueEnd">Location that a peptide ends in the protein</param>
            <remarks>If an entry already exists for a protein at a given start position, the end position will be updated</remarks>
        </member>
        <member name="T:PHRPReader.Data.ProteinInfo">
            <summary>
            Protein (or peptide) metadata
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.ProteinName">
            <summary>
            Protein name
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.Description">
            <summary>
            Protein description
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.CleavageState">
            <summary>
            Cleavage state of a protein fragment
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.ResidueStart">
            <summary>
            Residue number in the protein at which this sequence starts
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.ResidueEnd">
            <summary>
            Residue number in the protein at which this sequence ends
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.SeqID">
            <summary>
            Sequence ID
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ProteinInfo.TerminusState">
            <summary>
            Terminus state of a protein fragment
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ProteinInfo.#ctor(System.String,System.Int32,PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState,PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName"></param>
            <param name="seqID"></param>
            <param name="cleavageState"></param>
            <param name="terminusState"></param>
        </member>
        <member name="M:PHRPReader.Data.ProteinInfo.#ctor(System.String,System.String,System.Int32,PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState,PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName"></param>
            <param name="proteinDescription"></param>
            <param name="seqID"></param>
            <param name="cleavageState"></param>
            <param name="terminusState"></param>
        </member>
        <member name="M:PHRPReader.Data.ProteinInfo.#ctor(System.String,System.String,System.Int32,PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState,PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="proteinName"></param>
            <param name="proteinDescription"></param>
            <param name="seqID"></param>
            <param name="cleavageState"></param>
            <param name="terminusState"></param>
            <param name="proteinResidueStart"></param>
            <param name="proteinResidueEnd"></param>
        </member>
        <member name="M:PHRPReader.Data.ProteinInfo.UpdateLocationInProtein(System.Int32,System.Int32)">
            <summary>
            Update the start/end residues for this protein (or peptide)
            </summary>
            <param name="proteinResidueStart"></param>
            <param name="proteinResidueEnd"></param>
        </member>
        <member name="M:PHRPReader.Data.ProteinInfo.ToString">
            <summary>
            Protein name
            </summary>
        </member>
        <member name="T:PHRPReader.Data.PSM">
            <summary>
            This class tracks the details for a peptide hit search result
            (typically loaded from a tab-delimited text file created by the Peptide File Extractor or by PHRP)
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PSM.UNKNOWN_COLLISION_MODE">
            <summary>
            Unknown collision mode
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PSM.mPeptideWithNumericMods">
            <summary>
            Peptide sequence where modified residues have the modification mass indicated as a number
            Example: R.N+144.102063SNPVIAELSQAINSGTLLSK+144.102063PS+79.9663PPLPPK+144.102063.R
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PSM.mProteins">
            <summary>
            Protein names
            </summary>
            <remarks>Note that names are case-sensitive</remarks>
        </member>
        <member name="F:PHRPReader.Data.PSM.mProteinDetails">
            <summary>
            Dictionary with info on each protein, including name, description, cleavage state, terminus state, residue start, and residue end
            </summary>
        </member>
        <member name="F:PHRPReader.Data.PSM.mAdditionalScores">
            <summary>
            Dictionary tracking additional, tool-specific scores
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.AdditionalScores">
            <summary>
            Returns a dictionary with additional search engine scores stored as key/value pairs
            </summary>
            <remarks>Update scores using SetScore</remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.Charge">
            <summary>
            Assumed charge of the spectrum in which this peptide was identified
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.CleavageState">
            <summary>
            Peptide cleavage state (with regards to ProteinFirst)
            </summary>
            <remarks>
            CleavageState, NumMissedCleavages, and NumTrypticTermini are typically populated using UpdateCleavageInfo
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.CollisionMode">
            <summary>
            Collision mode (CID, ETD, HCD)
            PepXML allows this to be CID, ETD, ECD, ETD/CID, or HCD
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.DataLineText">
            <summary>
            Single line of data read from a PHRP data file
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ElutionTimeMinutes">
            <summary>
            Elution time (in minutes) of the spectrum
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.MassErrorDa">
            <summary>
            Mass difference, in daltons, between the monoisotopic mass of the precursor ion and the calculated (theoretical) monoisotopic mass of the peptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.MassErrorPPM">
            <summary>
            Mass difference, in ppm, between the monoisotopic mass of the precursor ion and the calculated (theoretical) monoisotopic mass of the peptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ModifiedResidues">
            <summary>
            List of modified residues
            </summary>
            <remarks>A given residue is allowed to have more than one modification</remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.MSGFSpecEValue">
            <summary>
            MSGF Spectral E-Value associated with this peptide (aka SpecEValue or SpecProb)
            </summary>
            <remarks>
            Ranges from 0 to 1, where 0 is the best score and 1 is the worse score
            Stored as a string to preserve formatting
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.MSGFSpecProb">
            <summary>
            MSGF Spectral E-Value associated with this peptide (aka SpecEValue or SpecProb)
            </summary>
            <remarks>
            Ranges from 0 to 1, where 0 is the best score and 1 is the worse score
            Stored as a string to preserve formatting
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.NumMissedCleavages">
            <summary>
            Number of missed cleavages (internal K or R)
            </summary>
            <remarks>
            CleavageState, NumMissedCleavages, and NumTrypticTermini are typically populated using UpdateCleavageInfo
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.NumTrypticTermini">
            <summary>
            Number of tryptic termini (or similar if not using trypsin)
            </summary>
            <remarks>
            2 means fully tryptic, 1 means partially tryptic, 0 means non-tryptic
            CleavageState, NumMissedCleavages, and NumTrypticTermini are typically populated using UpdateCleavageInfo
            </remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.Peptide">
            <summary>
            Peptide sequence, including any modification symbols that were assigned by the search engine
            Peptide sequence, with or without prefix and suffix residues; may contain mod symbols
            Example, R.AAS*PQDLAGGYTSSLACHR.A
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.PeptideCleanSequence">
            <summary>
            Peptide residues without any modification symbols or flanking residues
            For example, AASPQDLAGGYTSSLACHR
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.PeptideMonoisotopicMass">
            <summary>
            Computed monoisotopic mass (uncharged, theoretical mass, including mods)
            </summary>
            <remarks>This mass is computed by PHRP using the PrecursorNeutralMass plus any modification masses associated with the peptide's residues</remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.PeptideWithNumericMods">
            <summary>
            Peptide sequence where all modified residues have the modification masses displayed as numeric values
            For example, R.A+144.102063AS+79.9663PQDLAGGYTSSLAC+57.0215HR.A
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ProteinFirst">
            <summary>
            First protein associated with this peptide
            </summary>
            <remarks>Retrieve full list of proteins using the Proteins property</remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.PrecursorNeutralMass">
            <summary>
            Uncharged monoisotopic mass of the precursor (observed mass based on m/z and charge)
            </summary>
            <remarks>This mass is based on the mass or m/z value reported by the search engine</remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.Proteins">
            <summary>
            List of proteins associated with this peptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ProteinDetails">
            <summary>
            Dictionary with info on each protein, including name, description, cleavage state, terminus state, residue start, and residue end
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ResultID">
            <summary>
            ResultID of this peptide (typically assigned by the search engine)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ScanList">
            <summary>
            List of scans that were combined prior to identifying this peptide
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ScanNumber">
            <summary>
            Scan number of the mass spectrum in which this peptide was identified
            Will automatically update ScanList if it does not yet contain this scan number
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ScanNumberStart">
            <summary>
            First scan number
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ScanNumberEnd">
            <summary>
            Last scan number
            </summary>
        </member>
        <member name="P:PHRPReader.Data.PSM.ScoreRank">
            <summary>
            Rank of this peptide in the given spectrum
            </summary>
            <remarks>Top scoring peptide is rank 1, next lowest score is rank 2, etc.</remarks>
        </member>
        <member name="P:PHRPReader.Data.PSM.SeqID">
            <summary>
            Sequence ID value assigned by PHRP
            Required for looking up information from the SeqInfo files
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PSM.#ctor">
            <summary>
            Constructor; auto-calls Clear()
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddCombinedScan(System.Int32)">
            <summary>
            Add an additional scan number to associate with this PSM
            </summary>
            <param name="scanNumber"></param>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddModifiedResidue(PHRPReader.Data.AminoAcidModInfo)">
            <summary>
            Add the details for a modified residue
            </summary>
            <param name="modInfo">Modification info class</param>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddModifiedResidue(System.Char,System.Int32,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,PHRPReader.Data.ModificationDefinition)">
            <summary>
            Add the details for a modified residue
            </summary>
            <param name="residue">Amino acid letter; use angle brackets or square brackets for peptide or protein termini (see the SYMBOL_DMS constants in AminoAcidModInfo)</param>
            <param name="residueLocInPeptide">Location of the residue in the peptide; use 1 for an N-terminal mod</param>
            <param name="residueTerminusState">Terminus state of residue</param>
            <param name="modDefinition">Modification details</param>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddModifiedResidue(System.Char,System.Int32,PHRPReader.Data.AminoAcidModInfo.ResidueTerminusState,PHRPReader.Data.ModificationDefinition,System.Int32)">
            <summary>
            Add the details for a modified residue
            </summary>
            <param name="residue">Amino acid letter; use angle brackets or square brackets for peptide or protein termini (see the SYMBOL_DMS constants in AminoAcidModInfo)</param>
            <param name="residueLocInPeptide">Location of the residue in the peptide; use 1 for an N-terminal mod</param>
            <param name="residueTerminusState">Terminus state of residue</param>
            <param name="modDefinition">Modification details</param>
            <param name="endResidueLocInPeptide">For ambiguous mods, the residue number of the last residue that could have this modification</param>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddProtein(System.String)">
            <summary>
            Add a new protein to associate with this peptide
            </summary>
            <param name="proteinName"></param>
            <remarks>Does not update the ProteinDetails dictionary</remarks>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddProtein(PHRPReader.Data.ProteinInfo)">
            <summary>
            Add detailed info of a protein associated with this peptide
            </summary>
            <param name="proteinInfo"></param>
            <remarks>Updates both the Protein list and the ProteinDetails dictionary</remarks>
        </member>
        <member name="M:PHRPReader.Data.PSM.AddProteinDetail(PHRPReader.Data.ProteinInfo)">
            <summary>
            Add detailed info of a protein associated with this peptide
            </summary>
            <param name="proteinInfo"></param>
            <remarks>Updates both the Protein list and the ProteinDetails dictionary</remarks>
        </member>
        <member name="M:PHRPReader.Data.PSM.Clear">
            <summary>
            Reset the peptide to default values (and empty strings)
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PSM.ClearModifiedResidues">
            <summary>
            Clear any residue modifications
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PSM.Clone">
            <summary>
            Duplicate this PSM object and return a new one
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PSM.UpdateCleanSequence">
            <summary>
            Update the clean sequence
            </summary>
        </member>
        <member name="M:PHRPReader.Data.PSM.GetScore(System.String)">
            <summary>
            Returns the value stored for the specified score
            </summary>
            <param name="scoreName">Score name</param>
            <returns>Score if defined, otherwise an empty string</returns>
        </member>
        <member name="M:PHRPReader.Data.PSM.GetScoreDbl(System.String)">
            <summary>
            Returns the value stored for the specified score (as a double)
            </summary>
            <param name="scoreName">Score name</param>
            <returns>Score if defined, otherwise 0</returns>
        </member>
        <member name="M:PHRPReader.Data.PSM.GetScoreDbl(System.String,System.Double)">
            <summary>
            Returns the value stored for the specified score (as a double)
            </summary>
            <param name="scoreName">Score name</param>
            <param name="valueIfMissing">Value to return if the score is not defined</param>
            <returns>Score if defined, otherwise valueIfMissing</returns>
        </member>
        <member name="M:PHRPReader.Data.PSM.GetScoreInt(System.String)">
            <summary>
            Returns the value stored for the specified score (as an integer)
            </summary>
            <param name="scoreName">Score name</param>
            <returns>Score if defined, otherwise 0</returns>
        </member>
        <member name="M:PHRPReader.Data.PSM.GetScoreInt(System.String,System.Int32)">
            <summary>
            Returns the value stored for the specified score (as an integer)
            </summary>
            <param name="scoreName">Score name</param>
            <param name="valueIfMissing">Value to return if the score is not defined</param>
            <returns>Score if defined, otherwise valueIfMissing</returns>
        </member>
        <member name="M:PHRPReader.Data.PSM.SetPeptide(System.String,System.Boolean)">
            <summary>
            Update the peptide sequence, auto-determining the clean sequence if updateCleanSequence is true
            </summary>
            <param name="peptideSequence">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
            <param name="updateCleanSequence"></param>
            <remarks>Does not update the cleavage state info.  If updateCleanSequence is false, call UpdateCleanSequence at a later time to populate mPeptideCleanSequence</remarks>
        </member>
        <member name="M:PHRPReader.Data.PSM.SetPeptide(System.String,PHRPReader.PeptideCleavageStateCalculator)">
            <summary>
            Update the peptide sequence (auto-determines the clean sequence); also auto-update the cleavage state info
            </summary>
            <param name="peptide">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
            <param name="cleavageStateCalculator">Cleavage state calculator object</param>
        </member>
        <member name="M:PHRPReader.Data.PSM.SetScore(System.String,System.String)">
            <summary>
            Add/update an additional score to associate with this peptide
            </summary>
            <param name="scoreName"></param>
            <param name="scoreValue"></param>
        </member>
        <member name="M:PHRPReader.Data.PSM.TryGetScore(System.String,System.String@)">
            <summary>
            Returns the value stored for the specified score
            </summary>
            <param name="scoreName"></param>
            <param name="scoreValue"></param>
            <returns>True if the score is defined, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.Data.PSM.UpdateCleavageInfo(PHRPReader.PeptideCleavageStateCalculator)">
            <summary>
            Auto-determine the number of missed cleavages, cleavage state, and number of tryptic termini based on the peptide sequence
            </summary>
            <param name="cleavageStateCalculator"></param>
        </member>
        <member name="T:PHRPReader.Data.ScanStatsExInfo">
            <summary>
            Data loaded from a ScanStatsEx file
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ScanNumber">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.IonInjectionTime">
            <summary>
            Ion injection time
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ScanEvent">
            <summary>
            scan event
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.MasterIndex">
            <summary>
            Master index
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ElapsedScanTime">
            <summary>
            Elapsed scan time
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ChargeState">
            <summary>
            charge state
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.MonoisotopicMZ">
            <summary>
            Monoisotopic m/z of the parent ion
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.MS2IsolationWidth">
            <summary>
            MS2 isolation width
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.FTAnalyzerSettings">
            <summary>
            FT analyzer settings
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.FTAnalyzerMessage">
            <summary>
            FT analyzer message
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.FTResolution">
            <summary>
            FT resolution
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ConversionParameterB">
            <summary>
            Conversion parameter B
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ConversionParameterC">
            <summary>
            Conversion parameter C
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ConversionParameterD">
            <summary>
            Conversion parameter D
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ConversionParameterE">
            <summary>
            Conversion parameter E
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.CollisionMode">
            <summary>
            Collision mode
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.ScanFilterText">
            <summary>
            Scan filter
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.SourceVoltage">
            <summary>
            Source voltage
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsExInfo.Source_Current">
            <summary>
            Source current
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ScanStatsExInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNumber"></param>
        </member>
        <member name="T:PHRPReader.Data.ScanStatsInfo">
            <summary>
            Data loaded from a ScanStats file
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.ScanNumber">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.ScanTimeMinutes">
            <summary>
            Scan time, in minutes
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.ScanType">
            <summary>
            Scan type (aka scan level)
            </summary>
            <remarks>1 for MS1, 2 for MS2</remarks>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.TotalIonIntensity">
            <summary>
            Total ion intensity (TIC)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.BasePeakIntensity">
            <summary>
            Base peak intensity (BPI)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.BasePeakMZ">
            <summary>
            Base peak m/z
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.BasePeakSignalToNoiseRatio">
            <summary>
            Base peak signal to noise ratio (S/N)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.IonCount">
            <summary>
            Ion count (after filters)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.IonCountRaw">
            <summary>
            Ion count (before filtering)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.ScanStatsInfo.ScanTypeName">
            <summary>
            Scan type name
            </summary>
        </member>
        <member name="M:PHRPReader.Data.ScanStatsInfo.#ctor(System.Int32,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNumber"></param>
            <param name="scanTimeMinutes"></param>
            <param name="scanType"></param>
        </member>
        <member name="T:PHRPReader.Data.SearchEngineParameters">
            <summary>
            Search engine parameters container
            </summary>
        </member>
        <member name="F:PHRPReader.Data.SearchEngineParameters.MASS_TYPE_MONOISOTOPIC">
            <summary>
            Monoisotopic mass
            </summary>
        </member>
        <member name="F:PHRPReader.Data.SearchEngineParameters.MASS_TYPE_AVERAGE">
            <summary>
            Average mass
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.Enzyme">
            <summary>
            Enzyme name
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.FastaFilePath">
            <summary>
            FASTA file path
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.FragmentMassType">
            <summary>
            Fragment mass type
            </summary>
            <remarks>Typically "monoisotopic" or "average"</remarks>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.MaxNumberInternalCleavages">
            <summary>
            Maximum number of internal cleavages (missed cleavage points)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.MinNumberTermini">
            <summary>
            0 means no-enzyme, 1 means partially tryptic, 2 means fully tryptic
            </summary>
            <remarks>For trypsin, this is NTT or Number of Tryptic Termini</remarks>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.ModInfo">
            <summary>
            Dynamic and static mods to search for
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.Parameters">
            <summary>
            Parameter dictionary (key/value pairs)
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.PrecursorMassToleranceDa">
            <summary>
            Precursor mass tolerance, in Daltons; 0 if unknown
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.PrecursorMassTolerancePpm">
            <summary>
            Precursor mass tolerance, in ppm; 0 if unknown
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.PrecursorMassType">
            <summary>
            Precursor mass type
            </summary>
            <remarks>Typically "monoisotopic" or "average"</remarks>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.SearchEngineParamFilePath">
            <summary>
            Search engine parameter file path
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.SearchEngineVersion">
            <summary>
            Search engine version
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SearchEngineParameters.SearchDate">
            <summary>
            Search date
            </summary>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="searchEngineName"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.#ctor(System.String,System.Collections.Generic.List{PHRPReader.Data.ModificationDefinition})">
            <summary>
            Constructor
            </summary>
            <param name="searchEngineName"></param>
            <param name="modInfo"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.#ctor(System.String,System.Collections.Generic.List{PHRPReader.Data.ModificationDefinition},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="searchEngineName"></param>
            <param name="modInfo"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.AddModification(PHRPReader.Data.ModificationDefinition)">
            <summary>
            Add a new dynamic or static modification
            </summary>
            <param name="modInfo"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.AddUpdateParameter(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Add/update a parameter
            </summary>
            <param name="kvSetting"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.AddUpdateParameter(System.String,System.String)">
            <summary>
            Add/update a parameter
            </summary>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.ClearModifications">
            <summary>
            Clear stored dynamic and static modifications
            </summary>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.ClearParameters">
            <summary>
            Clear stored key/value parameters
            </summary>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.UpdateSearchEngineParamFilePath(System.String)">
            <summary>
            Update the search engine parameter file path
            </summary>
            <param name="paramFilePath"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.UpdateSearchEngineVersion(System.String)">
            <summary>
            Update the search engine version
            </summary>
            <param name="searchEngineVersion"></param>
        </member>
        <member name="M:PHRPReader.Data.SearchEngineParameters.UpdateSearchDate(System.DateTime)">
            <summary>
            Update the search date
            </summary>
            <param name="searchDate"></param>
        </member>
        <member name="T:PHRPReader.Data.SequenceInfo">
            <summary>
            This class tracks the sequence information determined by PHRP and stored in a _SeqInfo.txt file
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SequenceInfo.SeqID">
            <summary>
            Sequence ID
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SequenceInfo.ModCount">
            <summary>
            Number of modifications
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SequenceInfo.ModDescription">
            <summary>
            Comma-separated list of modifications, for example "itrac:1,Phosph:3,IodoAcet:15"
            </summary>
        </member>
        <member name="P:PHRPReader.Data.SequenceInfo.MonoisotopicMass">
            <summary>
            Theoretical, monoisotopic mass (including the modified residues)
            </summary>
        </member>
        <member name="M:PHRPReader.Data.SequenceInfo.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor using Sequence ID and mass
            </summary>
        </member>
        <member name="M:PHRPReader.Data.SequenceInfo.#ctor(System.Int32,System.Double,System.Int32,System.String)">
            <summary>
            Constructor using Sequence ID, mass, mod count, and list of modifications
            </summary>
            <param name="seqID">Sequence ID</param>
            <param name="monoisotopicMass">Theoretical, monoisotopic mass (including the modified residues)</param>
            <param name="modCount">Number of modifications</param>
            <param name="modDescription">Comma-separated list of modifications, for example "itrac:1,Phosph:3,IodoAcet:15"</param>
        </member>
        <member name="M:PHRPReader.Data.SequenceInfo.UpdateMonoisotopicMass(System.Double)">
            <summary>
            Update the monoisotopic mass for this sequence
            </summary>
            <param name="monoMass"></param>
        </member>
        <member name="M:PHRPReader.Data.SequenceInfo.ToString">
            <summary>
            Show the sequence ID and monoisotopic mass
            </summary>
        </member>
        <member name="T:PHRPReader.PHRPReaderErrorCodes">
            <summary>
            PHRP Reader error codes
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.NoError">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.InvalidInputFilePath">
            <summary>
            Invalid input file path
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.InputFileFormatNotRecognized">
            <summary>
            Input file format not recognized
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.RequiredInputFileNotFound">
            <summary>
            Required input file not found
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.MissingRawOrMzXmlFile">
            <summary>
            Missing .raw or .mzXML file
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.MSGFProgramNotFound">
            <summary>
            MSGF program not found
            </summary>
        </member>
        <member name="F:PHRPReader.PHRPReaderErrorCodes.UnspecifiedError">
            <summary>
            Unspecified error
            </summary>
        </member>
        <member name="T:PHRPReader.PeptideHitResultTypes">
            <summary>
            Peptide hit results type
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.Unknown">
            <summary>
            Unknown file type
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.Sequest">
            <summary>
            SEQUEST
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.XTandem">
            <summary>
            XTandem
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.Inspect">
            <summary>
            Inspect
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.MSGFPlus">
            <summary>
            MSGFPlus
            </summary>
            <remarks>Aka MS-GF+</remarks>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.MSGFDB">
            <summary>
            MSGFDB
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.MSAlign">
            <summary>
            MSAlign
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.MODa">
            <summary>
            MODa
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.MODPlus">
            <summary>
            MODPlus
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.MSPathFinder">
            <summary>
            MSPathFinder
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideHitResultTypes.TopPIC">
            <summary>
            TopPIC
            </summary>
        </member>
        <member name="T:PHRPReader.MSGFPlusParamFileModExtractor">
            <summary>
            This class reads a DMS-based parameter file for MS-GF+ or MSPathFinder to extract the dynamic and static modification information
            </summary>
            <remarks>See above for an example parameter file</remarks>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.UNKNOWN_MSGFPlus_MOD_SYMBOL">
            <summary>
            Unknown MS-GF+ mod symbols
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.PARAM_TAG_MOD_STATIC">
            <summary>
            Static mod parameter file keyword
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.PARAM_TAG_MOD_DYNAMIC">
            <summary>
            Dynamic mod parameter file keyword
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.PARAM_TAG_CUSTOM_AA">
            <summary>
            Custom amino acid definition parameter file keyword
            </summary>
        </member>
        <member name="T:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType">
            <summary>
            MS-GF+ modification type
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.DynamicMod">
            <summary>
            Dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.StaticMod">
            <summary>
            Static
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.DynNTermPeptide">
            <summary>
            N-terminal peptide dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.DynCTermPeptide">
            <summary>
            C-terminal peptide dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.DynNTermProtein">
            <summary>
            N-terminal protein dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.DynCTermProtein">
            <summary>
            C-terminal protein dynamic
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType.CustomAA">
            <summary>
            Custom amino acid definition
            </summary>
        </member>
        <member name="T:PHRPReader.MSGFPlusParamFileModExtractor.ModSpecFormats">
            <summary>
            Modification specification formats
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModSpecFormats.MSGFPlusAndMSPathFinder">
            <summary>
            MS-GF+ or MSPathFinder
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModSpecFormats.TopPIC">
            <summary>
            TopPIC
            </summary>
        </member>
        <member name="T:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo">
            <summary>
            Tracks dynamic and static modification details
            Also tracks Custom amino acids
            </summary>
            <remarks>
            Notes when tracking information for custom amino acids
              ModName:    Name associated with the custom amino acid
              ModMass:    Composition string, for example C5H7N1O2S0 for Hydroxyproline
              ModMassVal: Computed mass of the composition string
              Residues:   Single letter abbreviation for the custom amino acid, for example J or X
              ModType:    MSGFPlusModType.CustomAA
              ModSymbol:  ?   (a question mark; not used)
            </remarks>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.ModName">
            <summary>
            Mod name (read from the parameter file) isn't used by MS-GF+, but it is used by MSPathFinder
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.ModMass">
            <summary>
            Mod mass, stored as a string since reading from a text file and writing to a text file.  Also, can be a mass or an empirical formula
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.ModMassVal">
            <summary>
            Modification mass
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.Residues">
            <summary>
            Affected residues
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.ModType">
            <summary>
            Modification type
            </summary>
        </member>
        <member name="F:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.ModSymbol">
            <summary>
            Modification symbol: *, #, @, ... ; dash if a static mod
            </summary>
        </member>
        <member name="M:PHRPReader.MSGFPlusParamFileModExtractor.ModInfo.ToString">
            <summary>
            Mod type, name, mass, residues
            </summary>
        </member>
        <member name="P:PHRPReader.MSGFPlusParamFileModExtractor.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.MSGFPlusParamFileModExtractor.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="toolName">
            Search engine name, typically MS-GF+
            This name is only used in log messages
            </param>
        </member>
        <member name="M:PHRPReader.MSGFPlusParamFileModExtractor.ExtractModInfoFromParamFile(System.String,PHRPReader.MSGFPlusParamFileModExtractor.ModSpecFormats,System.Collections.Generic.List{PHRPReader.MSGFPlusParamFileModExtractor.ModInfo}@)">
            <summary>
            Extracts mod info from a MS-GF+ or MSPathFinder param file, or from a MSGFPlus_Mods.txt file (previously MSGFDB_Mods.txt)
            </summary>
            <param name="paramFilePath"></param>
            <param name="modSpecFormat"></param>
            <param name="modInfo"></param>
            <returns>True if success; false if a problem</returns>
        </member>
        <member name="M:PHRPReader.MSGFPlusParamFileModExtractor.ParseModSpecMSGFPlus(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Int32@,PHRPReader.MSGFPlusParamFileModExtractor.ModInfo@)">
            <summary>
            Parse the mod spec definition from a MS-GF+ or MSPathFinder parameter file
            </summary>
            <param name="paramFilePath"></param>
            <param name="splitLine"></param>
            <param name="unnamedModID"></param>
            <param name="udtModInfo"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.MSGFPlusParamFileModExtractor.ParseModSpecTopPIC(System.String,System.Collections.Generic.IReadOnlyList{System.String},PHRPReader.MSGFPlusParamFileModExtractor.MSGFPlusModType,System.Int32@,PHRPReader.MSGFPlusParamFileModExtractor.ModInfo@)">
            <summary>
            Parse the mod spec definition from a TopPIC parameter file
            </summary>
            <param name="paramFilePath"></param>
            <param name="splitLine"></param>
            <param name="modType">MSGFPlusModType.DynamicMod or MSGFPlusModType.StaticMod</param>
            <param name="unnamedModID"></param>
            <param name="udtModInfo"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.MSGFPlusParamFileModExtractor.ResolveMSGFPlusModsWithModDefinitions(System.Collections.Generic.List{PHRPReader.MSGFPlusParamFileModExtractor.ModInfo},PHRPReader.Data.PeptideModificationContainer)">
            <summary>
            Resolve MS-GF+, MSPathFinder, or TopPIC mods with mod definitions
            </summary>
            <param name="modInfo"></param>
            <param name="peptideMods"></param>
        </member>
        <member name="T:PHRPReader.PeptideCleavageStateCalculator">
            <summary>
            This class will compute the cleavage state and terminus state of a given peptide sequence.
            It can also be used to remove modification symbols from a sequence using ExtractCleanSequenceFromSequenceWithMods
            </summary>
            <remarks>
            <para>
            The sequence can simply contain single-letter amino acid symbols (capital letters) or a mix
            of amino acid symbols and modification symbols, for example:
              A.BCDEFGHIJK.L
              A.B*CDEFGHIJK.L
              A.BCDEFGHIJK*.L
              A.BCDEFGHIJK.L
            </para>
            <para>
            Function ComputeCleavageState is overloaded to either except the peptide sequence with
            prefix and suffix letters (e.g. A.BCDEFGHIJK.L) or accept the primary peptide sequence,
            the prefix residue(s), and the suffix residue(s).
            </para>
            <para>Use EnzymeMatchSpec to specify the residues to match for cleavage</para>
            <para>The default cleavage specification is for trypsin: [KR]|[^P]</para>
            <para>
            Note: Function SplitPrefixAndSuffixFromSequence will change peptides that look like:
                 E.TGMLTQKFARSLGMLAVDNQARV..   to   E.TGMLTQKFARSLGMLAVDNQARV.
              or ..TGMLTQKFARSLGMLAVDNQARV.R   to   .TGMLTQKFARSLGMLAVDNQARV.R
            </para>
            </remarks>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.GENERIC_RESIDUE_SYMBOL">
            <summary>
            Generic residue symbol
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.TERMINUS_SYMBOL_SEQUEST">
            <summary>
            Peptide terminus symbol for SEQUEST
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.TERMINUS_SYMBOL_XTANDEM_NTerminus">
            <summary>
            Peptide N-terminus symbol for X!Tandem
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.TERMINUS_SYMBOL_XTANDEM_CTerminus">
            <summary>
            /// Peptide C-terminus symbol for X!Tandem
            </summary>
        </member>
        <member name="T:PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState">
            <summary>
            Peptide cleavage state
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState.Unknown">
            <summary>
            Unknown cleavage specificity
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState.NonSpecific">
            <summary>
            E.g., non-tryptic
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState.Partial">
            <summary>
            E.g., partially tryptic
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState.Full">
            <summary>
            E.g., fully tryptic
            </summary>
        </member>
        <member name="T:PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState">
            <summary>
            Peptide terminus state
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState.None">
            <summary>
            The peptide is located in the middle of the protein
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState.ProteinNTerminus">
            <summary>
            The peptide is located at the protein's N-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState.ProteinCTerminus">
            <summary>
            The peptide is located at the protein's C-terminus
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.PeptideTerminusState.ProteinNandCCTerminus">
            <summary>
            The peptide spans the entire length of the protein
            </summary>
        </member>
        <member name="T:PHRPReader.PeptideCleavageStateCalculator.StandardCleavageAgent">
            <summary>
            Standard enzymes
            </summary>
        </member>
        <member name="T:PHRPReader.PeptideCleavageStateCalculator.EnzymeMatchSpecInfo">
            <summary>
            Example RegEx match strings for EnzymeMatchSpecInfo:
            [KR] means to match K or R
            [^P] means the residue cannot be P
            [A-Z] means to match anything; empty string also means match anything
            </summary>
            <remarks>Note, this class will automatically change [X] to [A-Z] (provided GENERIC_RESIDUE_SYMBOL = "X")</remarks>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.EnzymeMatchSpecInfo.LeftResidueRegEx">
            <summary>
            RegEx match string for matching the residue to the left of the cleavage point
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideCleavageStateCalculator.EnzymeMatchSpecInfo.RightResidueRegEx">
            <summary>
            RegEx match string for matching the residue to the right of the cleavage point
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.EnzymeMatchSpecInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="leftResidueRegEx"></param>
            <param name="rightResidueRegEx"></param>
        </member>
        <member name="P:PHRPReader.PeptideCleavageStateCalculator.EnzymeMatchSpec">
            <summary>
            RegEx patterns for matching cleavage site residues
            </summary>
        </member>
        <member name="P:PHRPReader.PeptideCleavageStateCalculator.TerminusSymbols">
            <summary>
            Array of peptide terminus symbols
            </summary>
            <remarks>
            This holds TERMINUS_SYMBOL_SEQUEST, TERMINUS_SYMBOL_XTANDEM_NTerminus, and TERMINUS_SYMBOL_XTANDEM_CTerminus
            and is useful for quickly checking for the presence of a terminus symbol using a binary search
            </remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.CleavageStateToShort(PHRPReader.PeptideCleavageStateCalculator.PeptideCleavageState)">
            <summary>
            Converts Cleavage State to 0, 1, or 2
            </summary>
            <param name="cleavageState"></param>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ComputeCleavageState(System.String)">
            <summary>
            Determines the cleavage state of the specified peptide
            </summary>
            <param name="sequenceWithPrefixAndSuffix"></param>
            <remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ComputeCleavageState(System.String,System.String,System.String)">
            <summary>
            Determine the cleavage state of cleanSequence utilizing the rules specified in mEnzymeMatchSpec
            </summary>
            <param name="cleanSequence"></param>
            <param name="prefixResidues"></param>
            <param name="suffixResidues"></param>
            <remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ComputeNumberOfMissedCleavages(System.String)">
            <summary>
            Count the number of missed cleavages in the peptide
            </summary>
            <param name="sequenceWithPrefixAndSuffix"></param>
            <remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ComputeTerminusState(System.String)">
            <summary>
            Determine the terminus state of the peptide
            </summary>
            <param name="sequenceWithPrefixAndSuffix"></param>
            <remarks>Peptide must have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ComputeTerminusState(System.Char,System.Char)">
            <summary>
            Determine the terminus state given the prefix and suffix characters
            </summary>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <remarks>For example, if the peptide is -.PEPTIDE.G, pass prefix="-" and suffix="G"</remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ComputeTerminusState(System.String,System.String,System.String)">
            <summary>
            Determine the terminus state of the peptide
            </summary>
            <param name="cleanSequence"></param>
            <param name="prefixResidues"></param>
            <param name="suffixResidues"></param>
            <remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.ExtractCleanSequenceFromSequenceWithMods(System.String,System.Boolean)">
            <summary>
            Removes all modification symbols (*, #, +, 8, etc.) from the peptide; optionally removes prefix and suffix letters
            </summary>
            <param name="sequenceWithMods"></param>
            <param name="checkForPrefixAndSuffixResidues"></param>
            <returns>Clean peptide sequence</returns>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.GetDefaultEnzymeMatchSpec">
            <summary>
            Returns the default enzyme RegEx match specifications
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.SetEnzymeMatchSpec(System.String,System.String)">
            <summary>
            Define custom enzyme match rules using RegEx strings
            </summary>
            <param name="leftResidueRegEx"></param>
            <param name="rightResidueRegEx"></param>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.SetStandardEnzymeMatchSpec(PHRPReader.PeptideCleavageStateCalculator.StandardCleavageAgent)">
            <summary>
            Select a standard enzyme match rule
            </summary>
            <param name="standardCleavageAgent"></param>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.SplitPrefixAndSuffixFromSequence(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Examines sequenceIn and splits apart into prefix, primary sequence, and suffix
            </summary>
            <param name="sequenceIn">Peptide sequence to examine</param>
            <param name="primarySequence">Output: Primary sequence</param>
            <param name="prefix">Output: Prefix residue</param>
            <param name="suffix">Output: Suffix residue</param>
            <returns> Returns True if success, False if prefix and suffix residues were not found</returns>
            <remarks>If more than one character is present before the first period or after the last period, all characters are returned
            If the peptide starts with ".." it is auto-changed to start with "."
            If the peptide ends with ".." it is auto-changed to end with "."
            </remarks>
        </member>
        <member name="M:PHRPReader.PeptideCleavageStateCalculator.TestCleavageRule(System.Char,System.Char)">
            <summary>
            Examines the two residues to see if they represent an expected cleavage point
            </summary>
            <param name="chLeftChar"></param>
            <param name="chRightChar"></param>
            <returns>True if the characters match the currently defined cleavage rule</returns>
        </member>
        <member name="T:PHRPReader.PeptideMassCalculator">
            <summary>
            This class will compute the mass of a given peptide sequence.  The sequence
            must consist of only capital letters, though if RemovePrefixAndSuffixIfPresent = True,
            characters up to the first . and after the last . in the sequence will be removed.
            Residue modification information can be supplied by passing an array of modifications
            using the structure udtPeptideSequenceModInfoType
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.NO_AFFECTED_ATOM_SYMBOL">
            <summary>
            Symbol used when the modification is not an isotopic modification
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.MASS_HYDROGEN">
            <summary>
            Monoisotopic mass of hydrogen
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.MASS_OXYGEN">
            <summary>
            Monoisotopic mass of oxygen
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.MASS_PROTON">
            <summary>
            Monoisotopic mass of a proton
            </summary>
            <remarks>This is the mass of hydrogen minus the mass of one electron</remarks>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.MASS_ELECTRON">
            <summary>
            Monoisotopic mass of hydrogen
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.DEFAULT_N_TERMINUS_MASS_CHANGE">
            <summary>
            Default N-terminal mass change (+1.007276)
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.DEFAULT_C_TERMINUS_MASS_CHANGE">
            <summary>
            Default C-terminal mass change (+15.9949)
            </summary>
        </member>
        <member name="T:PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo">
            <summary>
            Peptide sequence mod info
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo.ResidueLocInPeptide">
            <summary>
            Position that the modification occurs; not used by PeptideMassCalculator
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo.ModificationMass">
            <summary>
            Modification mass
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo.AffectedAtom">
            <summary>
            Affected atom
            </summary>
            <remarks>
            Set to Nothing or to NO_AFFECTED_ATOM_SYMBOL for positional modifications (including terminus modifications)
            For Isotopic modifications, indicate the atom affected (e.g. C, H, N, O, or S)
            </remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo.ToString">
            <summary>
            Modification mass and residue number
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.mAtomicFormulaRegEx">
            <summary>
            Regular expression for parsing an empirical formula
            </summary>
        </member>
        <member name="F:PHRPReader.PeptideMassCalculator.mElementMonoMasses">
            <summary>
            This dictionary tracks element symbols and monoisotopic masses
            </summary>
        </member>
        <member name="P:PHRPReader.PeptideMassCalculator.ChargeCarrierMass">
            <summary>
            Charge carrier mass
            </summary>
        </member>
        <member name="P:PHRPReader.PeptideMassCalculator.ErrorMessage">
            <summary>
            Most recent error message
            </summary>
        </member>
        <member name="P:PHRPReader.PeptideMassCalculator.PeptideCTerminusMass">
            <summary>
            Peptide C-terminus mass
            </summary>
        </member>
        <member name="P:PHRPReader.PeptideMassCalculator.PeptideNTerminusMass">
            <summary>
            Peptide N-terminus mass
            </summary>
        </member>
        <member name="P:PHRPReader.PeptideMassCalculator.RemovePrefixAndSuffixIfPresent">
            <summary>
            If true, look for and remove prefix and suffix residues
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.#cctor">
            <summary>
            Constructor for shared (static) variables
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeMonoistopicMass(PHRPReader.Data.EmpiricalFormula)">
            <summary>
            Compute the monoisotopic mass of the given empirical formula
            </summary>
            <param name="empiricalFormula"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeMonoisotopicMass(PHRPReader.Data.EmpiricalFormula)">
            <summary>
            Compute the monoisotopic mass of the given empirical formula
            </summary>
            <param name="empiricalFormula"></param>
            <remarks>Throws an exception if an unknown symbol is encountered</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeMonoistopicMass(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String}@)">
            <summary>
            Compute the monoisotopic mass of the compound represented by elementalComposition
            </summary>
            <param name="elementalComposition"></param>
            <param name="unknownSymbols"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeMonoisotopicMass(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String}@)">
            <summary>
            Compute the monoisotopic mass of the compound represented by elementalComposition
            </summary>
            <param name="elementalComposition"></param>
            <param name="unknownSymbols"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeSequenceMass(System.String)">
            <summary>
            Compute the mass of the peptide sequence (it cannot contain modification symbols)
            </summary>
            <param name="sequence">One letter amino acid symbols (no modification symbols or numbers); can have prefix and suffix letters</param>
            <returns>Monoisotopic mass, or -1 if an error</returns>
            <remarks>
            Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True
            If modification symbols are present, returns -1</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeSequenceMass(System.String,System.Int32,PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo[]@)">
            <summary>
            Compute the mass of the peptide sequence; uses the information in udtResidueModificationInfo() to determine modification masses
            </summary>
            <param name="sequence"></param>
            <param name="modCount"></param>
            <param name="udtResidueModificationInfo">Array of modified residues; index 0 to modCount-1</param>
            <returns>The computed mass, or -1 if an error</returns>
            <remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeSequenceMass(System.String,System.Collections.Generic.List{PHRPReader.PeptideMassCalculator.PeptideSequenceModInfo})">
            <summary>
            Compute the mass of the peptide sequence; uses the information in modifiedResidues() to determine modification masses
            </summary>
            <param name="sequence">One letter amino acid symbols (no modification symbols or numbers)</param>
            <param name="modifiedResidues">List of modified residues</param>
            <returns>The computed mass, or -1 if an error</returns>
            <remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ComputeSequenceMassNumericMods(System.String)">
            <summary>
            Compute the mass of the peptide sequence.  Supports peptide sequences with numeric mod masses
            Examples of numeric mods:
             R.A+144.102063AS+79.9663PQDLAGGYTSSLAC+57.0215HR.A
             K.Q-17.0265QIEESTSDYDKEK.L
            </summary>
            <param name="sequence"></param>
            <remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ConvoluteMass(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts the m/z value from one charge state to another charge state.  Either charge state can be 0, which means an uncharged peptide
            </summary>
            <param name="massMZ"></param>
            <param name="currentCharge"></param>
            <param name="desiredCharge"></param>
            <remarks>Uses the charge carrier mass defined by ChargeCarrierMass</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ConvoluteMass(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Converts the m/z value from one charge state to another charge state.  Either charge state can be 0, which means an uncharged peptide
            </summary>
            <param name="massMZ">m/z</param>
            <param name="currentCharge">Current charge; if 0, assumes massMZ is the neutral, monoisotopic mass</param>
            <param name="desiredCharge">Desired charge</param>
            <param name="chargeCarrierMass">Charge carrier mass (Default is the mass of a proton)</param>
            <remarks>To return the neutral mass, set desiredCharge to 0</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ConvertAminoAcidSequenceToEmpiricalFormula(System.String)">
            <summary>
            Convert an amino acid sequence into an empirical formula
            </summary>
            <param name="sequence">One letter amino acid symbols (no modification symbols or numbers)</param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.GetAminoAcidMass(System.Char)">
            <summary>
            Returns the mass of the specified amino acid
            </summary>
            <param name="chAminoAcidSymbol"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.GetAminoAcidEmpiricalFormula(System.Char)">
            <summary>
            Returns a List with the number of atoms of C, H, N, O, and S in the specified amino acid
            </summary>
            <param name="chAminoAcidSymbol"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.GetAminoAcidEmpiricalFormula(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new EmpiricalFormula instance with the specified number of atoms
            </summary>
            <param name="countC"></param>
            <param name="countH"></param>
            <param name="countN"></param>
            <param name="countO"></param>
            <param name="countS"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.GetAtomicFormulaRegEx(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Create a RegEx for parsing an empirical formula that optionally contains element counts and optionally contains plus or minus signs
            Examples of supported empirical formulas:
             CHNOS
             C3H3NOS4
             CH23NO-5S+4
            </summary>
            <param name="elementMonoMasses"></param>
            <returns>RegEx with named capture groups ElementSymbol and ElementCount</returns>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.GetElementMonoMasses">
            <summary>
            Return a dictionary of element symbols and element masses
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.GetEmpiricalFormulaComponents(System.String)">
            <summary>
            Parse the given empirical formula to return a dictionary of the elements
            Examples of supported empirical formulas:
             CHNOS
             C3H3NOS4
             CH23NO-5S+4
            </summary>
            <param name="empiricalFormula"></param>
            <returns>EmpiricalFormula instance tracking the element symbols and counts</returns>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.MassToPPM(System.Double,System.Double)">
            <summary>
            Converts massToConvert to ppm, based on the value of currentMZ
            </summary>
            <param name="massToConvert"></param>
            <param name="currentMZ"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.MHToMonoisotopicMass(System.Double)">
            <summary>
            Converts and MH mass to the uncharged (neutral) mass
            </summary>
            <param name="mH"></param>
            <remarks>Equivalent to ConvoluteMass(mH, 1, 0)</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.MonoisotopicMassToMZ(System.Double,System.Int32)">
            <summary>
            Converts an uncharged (neutral) mass to the m/z value for the specified charge
            </summary>
            <param name="monoisotopicMass"></param>
            <param name="desiredCharge"></param>
            <remarks>Equivalent to ConvoluteMass(monoisotopicMass, 0, desiredCharge)</remarks>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.PPMToMass(System.Double,System.Double)">
            <summary>
            Converts from a ppm value to a mass value, using the specified m/z as a reference point
            </summary>
            <param name="ppmToConvert"></param>
            <param name="currentMZ"></param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ResetAminoAcidMasses">
            <summary>
            Reset all of the amino acid masses and atom counts to default values
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ResetAminoAcidToDefault(System.Char)">
            <summary>
            Reset the mass and atom counts of the given amino acid to use default values
            </summary>
            <param name="aminoAcidSymbol">Letter between A and Z</param>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.ResetTerminusMasses">
            <summary>
            Reset the N and C terminus default mass values
            </summary>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.SetAminoAcidAtomCounts(System.Char,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Defines the number of C, H, N, O, S, etc. elements in an amino acid
            </summary>
            <param name="chAminoAcidSymbol">Amino acid symbol</param>
            <param name="elementalComposition">Dictionary where keys are element symbols and values are the element counts</param>
            <returns>True if successful, False if an invalid amino acid symbol</returns>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.SetAminoAcidAtomCounts(System.Char,PHRPReader.Data.EmpiricalFormula)">
            <summary>
            Defines the number of C, H, N, O, S, etc. elements in an amino acid
            </summary>
            <param name="chAminoAcidSymbol">>Amino acid symbol</param>
            <param name="empiricalFormula">Empirical formula class</param>
            <returns>True if successful, False if an invalid amino acid symbol</returns>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.SetAminoAcidMass(System.Char,System.Double)">
            <summary>
            Defines a custom mass for an amino acid
            </summary>
            <param name="chAminoAcidSymbol"></param>
            <param name="mass"></param>
            <returns>True if successful, False if an invalid amino acid symbol</returns>
        </member>
        <member name="M:PHRPReader.PeptideMassCalculator.UpdateAminoAcidStatEntry(System.Byte)">
            <summary>
            Updates an entry in parallel arrays AminoAcidMasses and AminoAcidSymbols
            </summary>
            <param name="aminoAcidIndex"></param>
        </member>
        <member name="T:PHRPReader.ReaderFactory">
            <summary>
            <para>
            This class reads a tab-delimited text file (created by the Peptide File Extractor or by PHRP)
            and returns the data for each peptide hit search result
            </para>
            <para>
            It also integrates MSGF results with the peptide hit search results
            And, it integrates scan stats values (to determine elution time)
            </para>
            </summary>
        </member>
        <member name="F:PHRPReader.ReaderFactory.PROTEIN_TERMINUS_SYMBOL_PHRP">
            <summary>
            Symbol used by PHRP to indicate a protein terminus
            </summary>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mFastReadMode">
            <summary>
            When set to true, calls to MoveNext will read the next data line, but will skip several additional processing steps for performance reasons
            </summary>
            <remarks>If the peptide is a peptide of interest, you must call FinalizeCurrentPSM after calling .MoveNext()</remarks>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mDynamicMods">
            <summary>
            Keys in this dictionary are mod symbols
            Values are the corresponding modification definition
            </summary>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mStaticMods">
            <summary>
            Keys in this dictionary are amino acid names
            Values are a list of modification definitions
            </summary>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mMSGFCachedResults">
            <summary>
            Dictionary of cached MSGF values
            </summary>
            <remarks>
            Keys are Result_ID
            Values are MSGFSpecEValue (stored as string to preserve formatting)
            </remarks>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mScanStats">
            <summary>
            Dictionary of cached scan stats data, in particular elution time
            </summary>
            <remarks>
            Keys are ScanNumber
            Values are ScanStatsInfo objects
            </remarks>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mScanStatsEx">
            <summary>
            Dictionary of cached extended scan stats date, including  parent ion mz (via MonoisotopicMZ) and collision mode
            </summary>
            <remarks>
            Keys are ScanNumber
            Values are ScanStatsExInfo objects
            </remarks>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mFindParentIonOnlyNonMsx">
            <summary>
            RegEx to extract parent ions from filter strings that do not have Full msx
            </summary>
            <remarks>Shared (aka static) only to speed up unit tests</remarks>
        </member>
        <member name="F:PHRPReader.ReaderFactory.mFindParentIonOnlyMsx">
            <summary>
            RegEx to extract parent ions from filter strings that have Full msx
            </summary>
            <remarks>Shared (aka static) only to speed up unit tests</remarks>
        </member>
        <member name="P:PHRPReader.ReaderFactory.CanRead">
            <summary>
            Returns True if the input file was successfully opened and data remains to be read
            </summary>
            <returns>True if the file is readable</returns>
        </member>
        <member name="P:PHRPReader.ReaderFactory.CurrentPSM">
            <summary>
            Returns the most recently loaded PSM
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.CurrentPSMSeqInfo">
            <summary>
            Returns the most recently loaded PSM's sequence info (if available)
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.DatasetName">
            <summary>
            Dataset name (auto-determined based on the input filename)
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.EchoMessagesToConsole">
            <summary>
            If True, will display messages at the console
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.ErrorMessages">
            <summary>
            Cached error messages
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.ErrorMessage">
            <summary>
            Current error message
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.FastReadMode">
            <summary>
            Used to enable fast read mode when calling MoveNext
            When FastReadMode is True, you should call FinalizeCurrentPSM after calling MoveNext to populate the remaining fields if the peptide is a peptide of interest
            </summary>
            <remarks>Once FastReadMode is enabled it cannot be turned off (this is a safety measure due to how data is cached)</remarks>
        </member>
        <member name="P:PHRPReader.ReaderFactory.LoadModsAndSeqInfo">
            <summary>
            If True, looks for and loads the modification definitions from the _ModSummary.txt file associated with the input file
            Also reads the SeqInfo and related files
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.LoadMSGFResults">
            <summary>
            If true, loads the MSGF SpecProb values from the _MSGF.txt file associated with the input file
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.LoadScanStatsData">
            <summary>
            If True, loads the MASIC _ScanStats.txt file
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.MaxProteinsPerPSM">
            <summary>
            The maximum number of proteins that will be tracked for each PSM
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.ModSummaryFileLoaded">
            <summary>
            Returns True if the ModSummary file was successfully loaded
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.PeptideHitResultType">
            <summary>
            Peptide hit result type; Sequest, XTandem, Inspect, MSGFPlus, etc.
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.PercentComplete">
            <summary>
            Returns a number between 0 and 100 indicating the percentage of the source file that has been read
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.SynFileReader">
            <summary>
            Returns the PHRP SynFileReader object
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.ResultToSeqMap">
            <summary>
            Returns the cached mapping between ResultID and SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.SeqInfo">
            <summary>
            Returns the cached sequence info, where key is SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.SeqToProteinMap">
            <summary>
            Returns the cached sequence to protein map information
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.SkipDuplicatePSMs">
            <summary>
            When True, skips near-duplicate lines in the PHRP data file (lines with the same peptide in the same scan, but different protein names)
            </summary>
        </member>
        <member name="P:PHRPReader.ReaderFactory.WarningMessages">
            <summary>
            Cached warning messages
            </summary>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <remarks>Sets LoadModSummaryFile to True and LoadMSGFResults to true</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <param name="loadScanStats">If True, looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor that auto-determines the PeptideHit result type based on the filename
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="startupOptions">Startup options</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,PHRPReader.PeptideHitResultTypes,System.Boolean,System.Boolean)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,PHRPReader.PeptideHitResultTypes,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <param name="loadModsAndSeqInfo">If True, looks for and auto-loads the modification definitions from the _ModSummary.txt file</param>
            <param name="loadMSGFResults">If True, looks for and auto-loads the MSGF results from the _msg.txt file</param>
            <param name="loadScanStats">If True, looks for and auto-loads the MASIC scan stats files (used to determine collision mode and to refine the precursor m/z values)</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.#ctor(System.String,PHRPReader.PeptideHitResultTypes,PHRPReader.StartupOptions)">
            <summary>
            Constructor where the PeptideHit result type is explicitly set
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
            <param name="startupOptions">Startup options</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoSwitchToFHTIfRequired(System.String,System.String)">
            <summary>
            Updates filePath to have _fht instead of _syn if filePath contains_syn yet basePHRPFileName contains _fht
            </summary>
            <param name="filePath"></param>
            <param name="basePHRPFileName"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoSwitchToLegacyMSGFDBIfRequired(System.String,System.String)">
            <summary>
            Updates filePath to have _msgfdb instead of _msgfplus if basePHRPFileName contains _msgfdb
            </summary>
            <param name="filePath"></param>
            <param name="basePHRPFileName"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.ClearErrors">
            <summary>
            Clear any cached error messages
            </summary>
        </member>
        <member name="M:PHRPReader.ReaderFactory.ClearWarnings">
            <summary>
            Clear any cached warning messages
            </summary>
        </member>
        <member name="M:PHRPReader.ReaderFactory.InitializeClass(System.String,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Initialize the class
            </summary>
            <param name="inputFilePath">Input file to read</param>
            <param name="resultType">Source file PeptideHit result type</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AddFileToFind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,PHRPReader.PeptideHitResultTypes}},PHRPReader.PeptideHitResultTypes,System.Func{System.String,System.String},System.String)">
            <summary>
            Add a PHRP file to find when auto-determining the input file type
            </summary>
            <param name="filesToFind"></param>
            <param name="resultType"></param>
            <param name="getPhrpFilenameMethod"></param>
            <param name="datasetName"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AddFileToFind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,PHRPReader.PeptideHitResultTypes}},PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Add a PHRP file to find when auto-determining the input file type
            </summary>
            <param name="filesToFind"></param>
            <param name="resultType"></param>
            <param name="phrpFilename"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AddSuffixToCheck(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,PHRPReader.PeptideHitResultTypes}},PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Add a filename suffix to check when auto-determining the input file type
            </summary>
            <param name="suffixesToCheck"></param>
            <param name="resultType"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineBestInputFile(System.String)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineBestInputFile(System.String,PHRPReader.PeptideHitResultTypes@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for any dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="matchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineBestInputFile(System.String,System.String)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetName">Dataset name</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineBestInputFile(System.String,System.String,PHRPReader.PeptideHitResultTypes@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the specified dataset in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetName">Dataset name</param>
            <param name="matchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineBestInputFile(System.String,System.Collections.Generic.List{System.String},PHRPReader.PeptideHitResultTypes@)">
            <summary>
            Looks for a valid _syn.txt or _fht.txt file for the given list of datasets in the specified directory
            If both the _syn.txt and _fht.txt files are present, chooses the file with _ResultToSeqMap.txt and _SeqInfo.txt files
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="datasetNames">List of dataset names to search for</param>
            <param name="matchedResultType">Output parameter: the result type of the best result file found</param>
            <returns>The full path to the most appropriate Synopsis or First hits file</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineDatasetName(System.String)">
            <summary>
            Auto-determine the dataset name using the input file path
            </summary>
            <param name="filePath"></param>
            <returns>Dataset name</returns>
            <remarks>Returns an empty string if unable to determine the dataset name</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineDatasetName(System.String,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Auto-determine the dataset name using the input file path and specified PeptideHit result type
            </summary>
            <param name="filePath"></param>
            <param name="resultType"></param>
            <returns>Dataset name</returns>
            <remarks>Returns an empty string if unable to determine the dataset name</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.AutoDetermineResultType(System.String)">
            <summary>
            Determine the PeptideHit result type given the input file path
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.ConvertModsToNumericMods(System.String,System.String@,System.Collections.Generic.List{PHRPReader.Data.AminoAcidModInfo}@)">
            <summary>
            Look for dynamic mod symbols in the peptide sequence; replace with the corresponding mod masses
            Note that if the _SeqInfo.txt file is available, this function will not be used
            </summary>
            <param name="peptide"></param>
            <param name="peptideWithNumericMods">Output: Peptide with numeric mods</param>
            <param name="peptideMods">Output: List of modified amino acids</param>
            <returns>True if successful, false if an error</returns>
            <remarks>peptideWithNumericMods will look like R.TDM+15.9949ESALPVTVLSAEDIAK.T</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.FindModSummaryFile(PHRPReader.PeptideHitResultTypes,System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ModSummary file for the given input file
            </summary>
            <param name="peptideHitResultType">PHRP Result Type of the input file</param>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="modSummaryFileNamePreferred">Output: preferred mod summary filename (based on whether a _syn.txt or _fht.txt file is present)</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.FindModSummaryFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ModSummary file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="modSummaryFileName">Expected mod summary filename</param>
            <param name="modSummaryFileNamePreferred">Output: preferred mod summary filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.FindResultToSeqMapFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the ResultToSeqMap file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="resultToSeqMapFileName">Expected ResultToSeqMap filename</param>
            <param name="resultToSeqMapFileNamePreferred">Output: preferred ResultToSeqMap filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.FindPHRPFile(System.String,System.String,System.String,System.String@)">
            <summary>
            Find the given PHRP result file for the given input file
            </summary>
            <param name="inputDirectoryPath">Input directory (can be an empty string if inputFileName is a full path)</param>
            <param name="inputFileName">Name or path of the input file, e.g. Dataset_msgfplus_syn.txt or Dataset_syn.txt</param>
            <param name="fileNameToFind">Expected PHRP result filename</param>
            <param name="preferredName">Output: preferred PHRP result filename (based on whether a _syn.txt or _fht.txt file is present)</param>
            <returns>Mod summary file path if found; otherwise, an empty string</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetCollisionMode(System.String)">
            <summary>
            Determines the collision mode using the Scan Type name
            </summary>
            <param name="scanTypeName"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetMSGFFileName(System.String)">
            <summary>
            Returns the filename of the MSGF file that corresponds to synopsisOrFirstHitsFileName
            </summary>
            <param name="synopsisOrFirstHitsFileName">Filename (or full path) to the synopsis or first-hits file</param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPeptideHitResultType(System.String)">
            <summary>
            Get the peptide hit result type for the given result type name
            </summary>
            <param name="resultTypeName"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPAuxiliaryFileSuffixes">
            <summary>
            Get the list of auxiliary file suffixes
            </summary>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPFirstHitsFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default first-hits file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPModSummaryFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default ModSummary file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPPepToProteinMapFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default PepToProtMap file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPProteinModsFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default ProteinMods file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPSynopsisFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default Synopsis file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPResultToSeqMapFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default ResultToSeq Map file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPSeqInfoFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default SeqInfo file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetPHRPSeqToProteinMapFileName(PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Returns the default SeqToProtein Map file name for the given PeptideHit result type
            </summary>
            <param name="resultType"></param>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetScanStatsFilename(System.String)">
            <summary>
            Get the ScanStats filename for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetExtendedScanStatsFilename(System.String)">
            <summary>
            Get the extended ScanStats filename for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.GetToolVersionInfoFilename(PHRPReader.PeptideHitResultTypes)">
            <summary>
            Get the tool version info filename for the given analysis tool
            </summary>
            <param name="resultType"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.IsLetterAtoZ(System.Char)">
            <summary>
            Returns true if the character is a letter between A and Z or a and z
            </summary>
            <param name="chChar">Character to examine</param>
            <remarks>The Char.IsLetter() function returns True for "º" and various other Unicode ModifierLetter characters; use this function to only return True for normal letters between A and Z</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.IsNumber(System.String)">
            <summary>
            Examines the string to determine if it is numeric
            </summary>
            <param name="data"></param>
            <returns>True if a number, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnIndex(System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Returns the index of the indicated column, as tracked by columnHeaders
            </summary>
            <param name="columnName"></param>
            <param name="columnHeaders"></param>
            <returns>Column index, or -1 if not found</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnIndex(System.Enum,System.Collections.Generic.SortedDictionary{System.Enum,System.Int32})">
            <summary>
            Returns the index of the indicated column, as tracked by columnHeaders
            </summary>
            <param name="columnEnum"></param>
            <param name="columnHeaders"></param>
            <returns>Column index, or -1 if not found</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; an empty string if the specific column name is not recognized</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.String)">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; valueIfMissing if the specific column name is not recognized</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnValue(System.String[],System.Enum,System.Collections.Generic.SortedDictionary{System.Enum,System.Int32},System.String)">
            <summary>
            Returns the string stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The text in the specified column; valueIfMissing if the specific column name is not recognized</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Returns the value stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.LookupColumnValue(System.String[],System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32},System.Double)">
            <summary>
            Returns the value stored in the given named column (using columnHeaders to dereference column name with column index)
            </summary>
            <returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
        </member>
        <member name="M:PHRPReader.ReaderFactory.ParseColumnHeaders(System.String[],System.Collections.Generic.SortedDictionary{System.String,System.Int32})">
            <summary>
            Updates the column name to column index mapping in columnHeaders
            </summary>
            <param name="dataColumns">Column names read from the input file</param>
            <param name="columnHeaders">Column mapping dictionary object to update</param>
            <remarks>The SortedDictionary object should be instantiated using a case-insensitive comparer, i.e. (StringComparer.OrdinalIgnoreCase)</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.MoveNext">
            <summary>
            Reads the next line from a synopsis file or first hits file
            </summary>
            <returns>True if a line was read, false if not more data is available</returns>
            <remarks>When FastReadMode is True, you should call FinalizeCurrentPSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.ExtractParentIonMzFromFilterText(System.String,System.Double@)">
            <summary>
            This function extracts the Parent Ion m/z from the filter string
            </summary>
            <param name="filterText"></param>
            <param name="parentIonMz"></param>
            <returns>True if parsing successful</returns>
            <remarks>The original version of this code is in ThermoRawFileReader.XRawFileIO.ExtractParentIonMZFromFilterText(string, out double)</remarks>
        </member>
        <member name="M:PHRPReader.ReaderFactory.FinalizeCurrentPSM">
            <summary>
            When FastReadMode is True, first call MoveNext to read the peptide scores.
            Then, if the peptide is a peptide of interest, call this function to finalize any processing steps that were skipped.
            </summary>
        </member>
        <member name="M:PHRPReader.ReaderFactory.ReadModSummaryFile(System.String,System.Collections.Generic.IDictionary{System.Char,PHRPReader.Data.ModificationDefinition},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{PHRPReader.Data.ModificationDefinition}})">
            <summary>
            Reads the data in modSummaryFilePath.  Populates dynamicMods and staticMods with the modification definitions
            </summary>
            <param name="modSummaryFilePath">Path to the PHRP Mod Summary file to read</param>
            <param name="dynamicMods">List with mod symbols as the key and the corresponding mod mass</param>
            <param name="staticMods">List with amino acid names as the key and the corresponding mod mass</param>
            <returns>True if success; false if an error</returns>
        </member>
        <member name="F:PHRPReader.ReaderFactory.disposedValue">
            <summary>
            Used to detect redundant calls
            </summary>
        </member>
        <member name="M:PHRPReader.ReaderFactory.Dispose(System.Boolean)">
            <summary>
            Dispose of this class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PHRPReader.ReaderFactory.Dispose">
            <summary>
            This code added by Visual Studio to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:PHRPReader.StartupOptions">
            <summary>
            PHRP Startup options
            </summary>
            <remarks>Use these options to define load behavior to be used when instantiating PHRP reader</remarks>
        </member>
        <member name="P:PHRPReader.StartupOptions.LoadModsAndSeqInfo">
            <summary>
            If true, load the modification and SeqInfo data
            </summary>
        </member>
        <member name="P:PHRPReader.StartupOptions.LoadMSGFResults">
            <summary>
            If true, load MSGF results (not MS-GF+)
            </summary>
        </member>
        <member name="P:PHRPReader.StartupOptions.LoadScanStatsData">
            <summary>
            If true, load ScanStats data
            </summary>
        </member>
        <member name="P:PHRPReader.StartupOptions.MaxProteinsPerPSM">
            <summary>
            Maximum number of proteins to associate with each PSM
            </summary>
            <remarks>Set to 0 to load all proteins</remarks>
        </member>
        <member name="P:PHRPReader.StartupOptions.PeptideMassCalculator">
            <summary>
            Use this to override the default peptide mass calculator class;
            this is useful if custom amino acids are in use
            </summary>
        </member>
        <member name="M:PHRPReader.StartupOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.InspectSynFileReader">
            <summary>
            PHRP SynFileReader for Inspect
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.InspectSynFileReader.InspectSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by InSpecTResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.InspectSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.DeterminePrecursorMassTolerance(PHRPReader.Data.SearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum InspectSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified Inspect parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.InspectSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.MODaSynFileReader">
            <summary>
            PHRP SynFileReader for MODa
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.MODaSynFileReader.MODaSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by MODaResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODaSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.DeterminePrecursorMassTolerance(PHRPReader.Data.SearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MODaSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified MODa parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODaSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.MODPlusSynFileReader">
            <summary>
            PHRP SynFileReader for MOD+
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.MODPlusSynFileReader.MODPlusSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by MODPlusResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MODPlusSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MODPlusSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified MODp parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.MODPlusSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.MSAlignSynFileReader">
            <summary>
            PHRP SynFileReader for MSAlign
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.MSAlignSynFileReader.MSAlignSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by MSAlignResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSAlignSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.DeterminePrecursorMassTolerance(PHRPReader.Data.SearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MSAlignSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified MSAlign parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSAlignSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.MSGFDBSynFileReader">
            <summary>
            Old PHRP SynFileReader for MS-GF+
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSGFDBSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.MSGFDBSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.MSGFDBSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="T:PHRPReader.Reader.MSGFPlusSynFileReader">
            <summary>
            PHRP SynFileReader for MS-GF+
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFPlusSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.DeterminePrecursorMassTolerance(PHRPReader.Data.SearchEngineParameters,System.Double@,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Determines the precursor mass tolerance for either MS-GF+, MSPathFinder, or TopPIC
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <param name="resultType"></param>
            <returns>Precursor tolerance, in Da</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetCustomChargeCarrierMass(PHRPReader.Data.SearchEngineParameters,System.Double@)">
            <summary>
            Look for MS-GF+ parameter ChargeCarrierMass
            If defined, update chargeCarrierMass with the associated mass value and return True
            Otherwise return false
            </summary>
            <param name="searchEngineParams"></param>
            <param name="chargeCarrierMass"></param>
            <returns>True if successful, false if an error</returns>
            <remarks>This function is used by PHRPMassErrorValidator in the Analysis Manager</remarks>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
            <remarks>This includes headers for synopsis files from both MSGFDB and MS-GF+</remarks>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MSGFPlusSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified MS-GF+ (previously MSGFDB) parameter file
            </summary>
            <param name="searchEngineParamFilePath"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="M:PHRPReader.Reader.MSGFPlusSynFileReader.UpdateMassCalculatorMasses(System.String,PHRPReader.MSGFPlusParamFileModExtractor,PHRPReader.PeptideMassCalculator,System.String@)">
            <summary>
            Look for custom amino acid definitions in the MS-GF+ parameter file
            If any are found, update the amino acid mass values in the PeptideMassCalculator instance
            </summary>
            <param name="searchEngineParamFilePath"></param>
            <param name="modFileProcessor"></param>
            <param name="peptideMassCalculator"></param>
            <param name="errorMessage"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="T:PHRPReader.Reader.MSGFResultsReader">
            <summary>
            This class reads MSGF scores from a tab-delimited _msgf.txt file
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.MSGFResultsReader.mColumnHeaders">
            <summary>
            Column headers
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSGFResultsReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSGFResultsReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSGFResultsReader.DefineColumnHeaders">
            <summary>
            Define header names for MSGF result files
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSGFResultsReader.ReadMSGFData(System.String)">
            <summary>
            Open a tab-delimited MSGF results file and read the data
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>A Dictionary where keys are ResultID and values are MSGF_SpecProb values (stored as strings)</returns>
        </member>
        <member name="T:PHRPReader.Reader.MSPathFinderSynFileReader">
            <summary>
            PHRP SynFileReader for MSPathfinder
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.MSPathFinderSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum MSPathFinderSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Empty string, since MSPathFinder does not have a first-hits file; just the _syn.txt file</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified MSPathFinder parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.MSPathFinderSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.PHRPModSummaryReader">
            <summary>
            ModSummary file reader
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPModSummaryReader.ModificationDefs">
            <summary>
            Modification list
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPModSummaryReader.Success">
            <summary>
            True if the mod summary was successfully loaded
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.PHRPModSummaryReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="modSummaryFilePath"></param>
        </member>
        <member name="M:PHRPReader.Reader.PHRPModSummaryReader.GetModificationMassAsText(System.String)">
            <summary>
            Returns the mass value associated with the given mass correction tag
            </summary>
            <param name="massCorrectionTag"></param>
        </member>
        <member name="T:PHRPReader.Reader.SynFileReaderBaseClass">
            <summary>
            PHRP synopsis file reader base class
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.SynFileReaderBaseClass.AmbiguousModInfo">
            <summary>
            Tracks ambiguous modifications
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.AmbiguousModInfo.ResidueStart">
            <summary>
            First residue the mod could apply to
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.AmbiguousModInfo.ResidueEnd">
            <summary>
            Last residue the mod could apply to
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.AmbiguousModInfo.ModMassString">
            <summary>
            Modification mass (as a string)
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mDatasetName">
            <summary>
            Dataset name
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mInitialized">
            <summary>
            True if initialized
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mColumnHeaders">
            <summary>
            Column headers in the synopsis file and first hits file
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mCleavageStateCalculator">
            <summary>
            Cleavage state calculator
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mPeptideMassCalculator">
            <summary>
            Peptide mass calculator
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mPeptideHitResultType">
            <summary>
            PHRP result type
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mModInfo">
            <summary>
            Modification info
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.SynFileReaderBaseClass.mResultIDToProteins">
            <summary>
            Protein Names for each ResultID
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.ErrorMessages">
            <summary>
            Cached error messages
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.InputFilePath">
            <summary>
            Input file path
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.InputDirectoryPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.InputFolderPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.MaxProteinsPerPSM">
            <summary>
            Maximum number of proteins to associate with each PSM
            </summary>
            <remarks>0 means to load all proteins</remarks>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PeptideHitResultType">
            <summary>
            Peptide hit result type; Sequest, XTandem, Inspect, MSGFPlus, etc.
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PepToProteinMap">
            <summary>
            Peptide to protein map file name
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.ResultToSeqMap">
            <summary>
            Returns the cached mapping between ResultID and SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.SeqInfo">
            <summary>
            Returns the cached sequence info, where key is SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.SeqToProteinMap">
            <summary>
            Returns the cached sequence to protein map information
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.WarningMessages">
            <summary>
            Cached warning messages
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SynFileReaderBaseClass.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.#ctor(System.String,System.String,PHRPReader.PeptideHitResultTypes,System.Boolean)">
            <summary>
            Initialize the SynFileReader for the given dataset, input file, and result type
            </summary>
            <param name="datasetName">Dataset Name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="peptideHitResultType">Peptide Hit Results file type</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks>If inputFilePath is an empty string, the functions that solely depend on dataset name will be callable, but data related functions will not be callable</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.#ctor(System.String,System.String,PHRPReader.PeptideHitResultTypes,PHRPReader.StartupOptions)">
            <summary>
            Initialize the SynFileReader for the given dataset, input file, and result type
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="peptideHitResultType"></param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
            <remarks>If inputFilePath is an empty string, the functions that solely depend on dataset name will be callable, but data related functions will not be callable</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.InitializeReader(System.String,System.String,PHRPReader.PeptideHitResultTypes,PHRPReader.StartupOptions)">
            <summary>
            Initialize the SynFileReader for the given dataset and input file
            </summary>
            <param name="datasetName">Dataset Name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="peptideHitResultType">Peptide Hit Results file type</param>
            <param name="startupOptions">Startup options</param>
            <remarks>
            If inputFilePath is an empty string,  the functions that solely depend on dataset name will be callable, but data related functions will not be callable
            startupOptions.LoadModsAndSeqInfo controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read
            Setting startupOptions.MaxProteinsPerPSM to a non-zero value will limit the number of proteins that are tracked
            </remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.GetReader(System.String)">
            <summary>
            Returns the appropriate SynFileReader class based on the input file name; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="inputFilePath">Input file path</param>
            <remarks>Throws an exception if unable to auto-determine the input file type or dataset name from inputFilePath</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.GetReader(System.String,System.Boolean)">
            <summary>
            Returns the appropriate SynFileReader class based on the input file name
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks>Throws an exception if unable to auto-determine the input file type or dataset name from inputFilePath</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.GetReader(System.String,System.String,System.Boolean)">
            <summary>
            Returns the appropriate SynFileReader class based on the input file name
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="datasetName">Dataset Name</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
            <remarks>Throws an exception if unable to auto-determine the input file type from inputFilePath</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.GetReader(System.String,System.String,PHRPReader.PeptideHitResultTypes,System.Boolean)">
            <summary>
            Returns the appropriate SynFileReader class based on PeptideHitResultType
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="datasetName">Dataset Name</param>
            <param name="peptideHitResultType">Peptide Hit Results file type</param>
            <param name="loadModsAndSeqInfo">Controls whether or not the _SeqInfo.txt and _SeqToProteinMap.txt files should be read</param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.DefineColumnHeaders">
            <summary>
            Define header names for the PHRP synopsis or first hits file for the given tool
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.GetColumnHeaderNames">
            <summary>
            List of header names for the PHRP synopsis or first hits file for the given tool
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM info</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM info</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields if the peptide is a peptide of interest</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified parameter file
            Also reads the Tool_Version_Info file in the same directory (if present)
            </summary>
            <param name="searchEngineParamFileName">Name of the parameter file to parse (must reside in InputDirectoryPath)</param>
            <param name="searchEngineParams">Output: Search engine parameters class</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.AddHeaderColumn(System.String)">
            <summary>
            Add a PHRP synopsis or first hits header column to mColumnHeaders
            </summary>
            <param name="columnName"></param>
            <remarks>
            The column index will be set to mColumnHeaders.Count
            That value will be updated by ParseColumnHeaders
            </remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.AddScore(PHRPReader.Data.PSM,System.String[],System.String)">
            <summary>
            Add a score to a PSM
            </summary>
            <param name="psm"></param>
            <param name="columns"></param>
            <param name="scoreColumnName"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ClearErrors">
            <summary>
            Clear any cached error messages
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ClearWarnings">
            <summary>
            Clear any cached warning messages
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ExtractAmbiguousMods(System.String)">
            <summary>
            Look for ambiguous mods in sequenceWithMods
            For example, -30.09 in I.(TIIQ)[-30.09]APQGVSLQYTSR.Q
            </summary>
            <param name="sequenceWithMods"></param>
            <returns>List of ambiguous mods, where the keys are the start residues and the values are the ambiguous mod info</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.FinalizePSM(PHRPReader.Data.PSM)">
            <summary>
            Finalize the PSM by updating the clean sequence, updating mod info, and updating the sequence info
            </summary>
            <param name="psm"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.GetColumnMapFromHeaderLine``1(System.Collections.Generic.List{System.String},System.Collections.Generic.SortedDictionary{System.String,``0})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by headerColumnInfo
            Populates a dictionary mapping a PHRPReader enum to the 0-based index in columnNames
            </summary>
            <param name="headerNames">List of column names from the header line of a data file</param>
            <param name="headerColumnInfo">Dictionary mapping standard header column names to a PHRPReader enum (e.g. MSGFPlusSynFileColumns)</param>
            <returns>Dictionary mapping the PHRPReader enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.HandleException(System.String,System.Exception)">
            <summary>
            Report an exception as an error
            </summary>
            <param name="baseMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.IsNumber(System.String)">
            <summary>
            Examines the string to determine if it is numeric
            </summary>
            <param name="data"></param>
            <returns>True if a number, otherwise false</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.LoadModSummary">
            <summary>
            Reads the data in modSummaryFilePath.  Populates mModInfo with the modification names, masses, and affected residues
            </summary>
            <returns>True if success; false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.NumToStringPlusMinus(System.Double,System.Int32)">
            <summary>
            Formats a number so that it begins with a + sign if positive or a - sign if negative
            Rounds the number to the specified number of digits, trimming off trailing zeros
            Example output: +79.9663 or -17.016
            </summary>
            <param name="value"></param>
            <param name="digitsOfPrecision"></param>
            <returns>Formatted number</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ParseColumnHeaders(System.String[])">
            <summary>
            Parse the column names in splitLine and update the local column header mapping
            </summary>
            <param name="splitLine"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ParseKeyValueSetting(System.String,System.Char)">
            <summary>
            Splits text on text, returning a KeyValuePair object where the key is the text to the left of the delimiter and the value is the text to the right
            </summary>
            <param name="text"></param>
            <param name="chDelimiter"></param>
            <returns>KeyValuePair with key and value from text; key and value will be empty if chDelimiter was not found</returns>
            <remarks>Automatically trims whitespace</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ParseKeyValueSetting(System.String,System.Char,System.String)">
            <summary>
            Splits text on text, returning a KeyValuePair object where the key is the text to the left of the delimiter and the value is the text to the right
            </summary>
            <param name="text"></param>
            <param name="chDelimiter"></param>
            <param name="commentChar">If defined, looks for this character in the value portion of the setting and removes that character plus any text after it</param>
            <returns>KeyValuePair with key and value from text; key and value will be empty if chDelimiter was not found</returns>
            <remarks>Automatically trims whitespace</remarks>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ReadKeyValuePairSearchEngineParamFile(System.String,System.String,PHRPReader.PeptideHitResultTypes,PHRPReader.Data.SearchEngineParameters)">
            <summary>
            Read a Search Engine parameter file where settings are stored as key/value pairs
            </summary>
            <param name="searchEngineName">Search engine name (e.g. MS-GF+)</param>
            <param name="searchEngineParamFileName">Search engine parameter file name (must exist in InputDirectoryPath)</param>
            <param name="peptideHitResultType">PeptideHitResultType (only important if reading a ModA parameter file</param>
            <param name="searchEngineParams">SearchEngineParams container class (must be initialized by the calling function)</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ReadKeyValuePairSearchEngineParamFile(System.String,System.String,PHRPReader.PeptideHitResultTypes,PHRPReader.Data.SearchEngineParameters,System.String@,System.String@)">
            <summary>
            Read a Search Engine parameter file where settings are stored as key/value pairs
            </summary>
            <param name="searchEngineName">Search engine name (e.g. MS-GF+)</param>
            <param name="paramFilePath">Search engine parameter file path</param>
            <param name="peptideHitResultType">PeptideHitResultType (only important if reading a ModA parameter file</param>
            <param name="searchEngineParams">SearchEngineParams container class (must be initialized by the calling function)</param>
            <param name="errorMessage">Output: error message</param>
            <param name="warningMessage">Output: warning message</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ReadSearchEngineVersion(PHRPReader.PeptideHitResultTypes,PHRPReader.Data.SearchEngineParameters)">
            <summary>
            Determine the search engine version using a Tool_Version_Info file
            </summary>
            <param name="peptideHitResultType"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ReportError(System.String)">
            <summary>
            Report an error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ReportWarning(System.String)">
            <summary>
            Report a warning
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.ShowMessage(System.String)">
            <summary>
            Report a status message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PHRPReader.Reader.SynFileReaderBaseClass.UpdatePSMUsingSeqInfo(PHRPReader.Data.PSM)">
            <summary>
            Updates the theoretical (computed) monoisotopic mass of currentPSM using mResultToSeqMap and mSeqInfo
            Also updates the modification info
            Also updates SeqID
            </summary>
            <param name="currentPSM"></param>
            <returns>True if successful, False if currentPSM.ResultID is not found in mResultToSeqMap</returns>
        </member>
        <member name="T:PHRPReader.Reader.PHRPSeqMapReader">
            <summary>
            PHRP SeqMap reader
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.DatasetName">
            <summary>
            Dataset name
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.InputDirectoryPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.InputFolderPath">
            <summary>
            Input directory path
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.MaxProteinsPerSeqID">
            <summary>
            Max proteins to track for each SeqID
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.PeptideHitResultType">
            <summary>
            PHRP result type
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.PepToProteinMapFilename">
            <summary>
            PepToProtMap filename
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.ResultToSeqMapFilename">
            <summary>
            ResultToSeqMap filename
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.PHRPSeqMapReader.SeqToProteinMapFilename">
            <summary>
            SeqToProteinMap filename
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.#ctor(System.String,System.String,PHRPReader.PeptideHitResultTypes)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input file path</param>
            <param name="peptideHitResultType">Peptide Hit result type</param>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.#ctor(System.String,System.String,PHRPReader.PeptideHitResultTypes,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputDirectoryPath">Input file path</param>
            <param name="peptideHitResultType">Peptide Hit result type</param>
            <param name="phrpDataFileName">The base PHRP data file name; used when calling AutoSwitchToLegacyMSGFDBIfRequired and AutoSwitchToFHTIfRequired</param>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="inputDirectoryPath">Input directory path</param>
            <param name="resultToSeqMapFilename">ResultToSeqMap filename</param>
            <param name="seqToProteinMapFilename"></param>
            <param name="seqInfoFilename">SeqInfo filename</param>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.GetProteinMapping(System.Collections.Generic.SortedList{System.Int32,System.Int32},System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.Data.ProteinInfo}},System.Collections.Generic.SortedList{System.Int32,PHRPReader.Data.SequenceInfo})">
            <summary>
            Load the mapping between ResultID and Protein Name
            </summary>
            <param name="resultToSeqMap">Output: ResultToSeqMap list; keys are ResultID, Values as SeqID</param>
            <param name="seqToProteinMap">Output: SeqToProteinMap list; keys are SeqID, Values are list of ProteinInfo objects</param>
            <param name="seqInfo">Output: SeqInfo list; keys are SeqID, Values are seq details stored in SeqInfo objects</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.GetProteinMapping(System.Collections.Generic.SortedList{System.Int32,System.Int32},System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.List{PHRPReader.Data.ProteinInfo}},System.Collections.Generic.SortedList{System.Int32,PHRPReader.Data.SequenceInfo},System.Collections.Generic.Dictionary{System.String,PHRPReader.Data.PepToProteinMapInfo})">
            <summary>
            Load the mapping between ResultID and Protein Name
            </summary>
            <param name="resultToSeqMap">Output: ResultToSeqMap list; keys are ResultID, Values as SeqID</param>
            <param name="seqToProteinMap">Output: SeqToProteinMap list; keys are SeqID, Values are list of ProteinInfo objects</param>
            <param name="seqInfo">Output: SeqInfo list; keys are SeqID, Values are seq details stored in SeqInfo objects</param>
            <param name="pepToProteinMap">Output: PepToProteinMap list; keys are clean peptide sequences (no mods), Values are Protein name and residue start/end locations for the peptide</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.LoadPepToProtMapData(System.String,System.Collections.Generic.IDictionary{System.String,PHRPReader.Data.PepToProteinMapInfo})">
            <summary>
            Load the Peptide to Protein mapping using the specified PHRP result file
            </summary>
            <param name="filePath"></param>
            <param name="pepToProteinMap">Peptide to protein mapping</param>
            <returns>True if successful, false if an error</returns>
            <remarks>The PepToProtMap file contains Residue_Start and Residue_End columns</remarks>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.LoadResultToSeqMapping(System.String,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Load the Result to Seq mapping using the specified PHRP result file
            </summary>
            <param name="filePath"></param>
            <param name="resultToSeqMap">Result to sequence mapping</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.LoadSeqInfo(System.String,System.Collections.Generic.IDictionary{System.Int32,PHRPReader.Data.SequenceInfo})">
            <summary>
            Load the sequence info
            </summary>
            <param name="filePath"></param>
            <param name="seqInfo">Sequences</param>
        </member>
        <member name="M:PHRPReader.Reader.PHRPSeqMapReader.LoadSeqToProteinMapping(System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.List{PHRPReader.Data.ProteinInfo}})">
            <summary>
            Load the Sequence to Protein mapping using the specified PHRP result file
            </summary>
            <param name="filePath"></param>
            <param name="seqToProteinMap">Sequence to protein map</param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="T:PHRPReader.Reader.ExtendedScanStatsReader">
            <summary>
            Extended scan stats reader
            </summary>
        </member>
        <member name="F:PHRPReader.Reader.ExtendedScanStatsReader.mColumnHeaders">
            <summary>
            Column headers
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.ExtendedScanStatsReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.ExtendedScanStatsReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.ExtendedScanStatsReader.ReadExtendedScanStatsData(System.String)">
            <summary>
            Open a tab-delimited _ScanStatsEx.txt file and read the data
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>A Dictionary where keys are ScanNumber and values are ScanStatsInfo objects</returns>
        </member>
        <member name="T:PHRPReader.Reader.ScanStatsReader">
            <summary>
            This class reads MASIC ScanStats data from a tab-delimited _ScanStats.txt file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.ScanStatsReader.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.ScanStatsReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.ScanStatsReader.ReadScanStatsData(System.String)">
            <summary>
            Open a tab-delimited _ScanStats.txt file and read the data
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>A Dictionary where keys are ScanNumber and values are instances of ScanStatsInfo</returns>
        </member>
        <member name="T:PHRPReader.Reader.SequestSynFileReader">
            <summary>
            PHRP SynFileReader for SEQUEST
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.SequestSynFileReader.SequestSynopsisFileColumns">
            <summary>
            These columns correspond to the tab-delimited file created directly by SEQUEST
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.SequestSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.DefineColumnHeaders">
            <summary>
            Define column header names for SEQUEST synopsis and first hits files
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.DeterminePrecursorMassTolerance(PHRPReader.Data.SearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum SequestSynopsisFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified Sequest parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.SequestSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.TopPICSynFileReader">
            <summary>
            PHRP SynFileReader for TopPIC
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.TopPICSynFileReader.TopPICSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by TopPICResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.TopPICSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetColumnHeaderNamesAndIDs(System.Boolean)">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum TopPICSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified TopPIC parameter file
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.TopPICSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
        <member name="T:PHRPReader.Reader.XTandemSynFileReader">
            <summary>
            PHRP SynFileReader for X!Tandem
            </summary>
        </member>
        <member name="T:PHRPReader.Reader.XTandemSynFileReader.XTandemSynFileColumns">
            <summary>
            These columns correspond to the Synopsis file created by XTandemResultsProcessor
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPFirstHitsFileName">
            <summary>
            First hits file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPModSummaryFileName">
            <summary>
            Mod summary file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPPepToProteinMapFileName">
            <summary>
            Peptide to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPProteinModsFileName">
            <summary>
            Protein mods file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPSynopsisFileName">
            <summary>
            Synopsis file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPResultToSeqMapFileName">
            <summary>
            Result to sequence map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPSeqInfoFileName">
            <summary>
            Sequence info file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.PHRPSeqToProteinMapFileName">
            <summary>
            Sequence to protein map file
            </summary>
        </member>
        <member name="P:PHRPReader.Reader.XTandemSynFileReader.SearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.#ctor(System.String,System.String)">
            <summary>
            Constructor; assumes loadModsAndSeqInfo=True
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="loadModsAndSeqInfo">If True, load the ModSummary file and SeqInfo files</param>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.#ctor(System.String,System.String,PHRPReader.StartupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="datasetName">Dataset name</param>
            <param name="inputFilePath">Input file path</param>
            <param name="startupOptions">Startup Options, in particular LoadModsAndSeqInfo and MaxProteinsPerPSM</param>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.DeterminePrecursorMassTolerance(PHRPReader.Data.SearchEngineParameters,System.Double@)">
            <summary>
            Determines the precursor mass tolerance
            </summary>
            <param name="searchEngineParams"></param>
            <param name="tolerancePPM">Precursor mass tolerance, in ppm</param>
            <returns>Precursor tolerance, in Da</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetColumnHeaderNames">
            <summary>
            Get the header names in the PHRP synopsis or first hits file for this tool
            </summary>
            <returns>List of header names</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetColumnHeaderNamesAndIDs">
            <summary>
            Header names and enums for the PHRP synopsis file for this tool
            </summary>
            <returns>Dictionary of header names and enum values</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetColumnMapFromHeaderLine(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the names in headerNames to the standard header names tracked by the dictionary returned by GetColumnHeaderNamesAndIDs
            Populates a dictionary mapping enum XTandemSynFileColumns to the 0-based index in columnNames
            </summary>
            <param name="headerNames"></param>
            <returns>Dictionary mapping the enum value to the column index in headerNames (0-based column index)</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPFirstHitsFileName(System.String)">
            <summary>
            Default first hits file for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Empty string, since X!Tandem does not have a first-hits file; just the _xt.txt file</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPModSummaryFileName(System.String)">
            <summary>
            Default ModSummary file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPPepToProteinMapFileName(System.String)">
            <summary>
            Default PepToProtMap file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPProteinModsFileName(System.String)">
            <summary>
            Default ProteinMods file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPSynopsisFileName(System.String)">
            <summary>
            Default Synopsis file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPResultToSeqMapFileName(System.String)">
            <summary>
            Default ResultToSeq map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPSeqInfoFileName(System.String)">
            <summary>
            Default SeqInfo map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetPHRPSeqToProteinMapFileName(System.String)">
            <summary>
            Default SeqToProtein map file name for the given dataset
            </summary>
            <param name="datasetName"></param>
            <returns>Filename</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetAdditionalSearchEngineParamFileNames(System.String)">
            <summary>
            Additional search engine parameter file names
            </summary>
            <param name="searchEngineParamFilePath"></param>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.GetSearchEngineName">
            <summary>
            Search engine name
            </summary>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.LoadSearchEngineParameters(System.String,PHRPReader.Data.SearchEngineParameters@)">
            <summary>
            Parses the specified X!Tandem parameter file
            Note that the file specified by parameter "list path, default parameters" will also be auto-parsed (if found in directory mInputDirectoryPath)
            </summary>
            <param name="searchEngineParamFileName"></param>
            <param name="searchEngineParams"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.ParseXTandemParamFile(System.String,PHRPReader.Data.SearchEngineParameters,System.Boolean,System.Boolean)">
            <summary>
            Parse an X!Tandem parameter file
            </summary>
            <param name="paramFileName"></param>
            <param name="searchEngineParams"></param>
            <param name="lookForDefaultParamsFileName"></param>
            <param name="determineFastaFileNameUsingTaxonomyFile"></param>
            <returns>True if successful, false if an error</returns>
        </member>
        <member name="M:PHRPReader.Reader.XTandemSynFileReader.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.Data.PSM@,System.Boolean)">
            <summary>
            Parse the data line read from a PHRP results file
            </summary>
            <param name="line">Data line</param>
            <param name="linesRead">Number of lines read so far (used for error reporting)</param>
            <param name="psm">Output: PSM details</param>
            <param name="fastReadMode">When set to true, reads the next data line, but doesn't perform text parsing required to determine cleavage state</param>
            <returns>True if successful, false if an error</returns>
            <remarks>When fastReadMode is True, you should call FinalizePSM to populate the remaining fields</remarks>
        </member>
    </members>
</doc>
